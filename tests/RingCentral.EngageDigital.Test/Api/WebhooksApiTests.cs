/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Api;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Test
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhooksApiTests : IDisposable
    {
        private WebhooksApi instance;

        public WebhooksApiTests()
        {
            instance = new WebhooksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebhooksApi
            //Assert.IsType(typeof(WebhooksApi), instance, "instance is a WebhooksApi");
        }

        
        /// <summary>
        /// Test CreateWebhook
        /// </summary>
        [Fact]
        public void CreateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accessToken = null;
            //string label = null;
            //string url = null;
            //Collection<string> registeredEvents = null;
            //bool? active = null;
            //bool? stagingUse = null;
            //string verifyToken = null;
            //string secret = null;
            //var response = instance.CreateWebhook(accessToken, label, url, registeredEvents, active, stagingUse, verifyToken, secret);
            //Assert.IsType<Webhook> (response, "response is Webhook");
        }
        
        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Fact]
        public void DeleteWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //string accessToken = null;
            //var response = instance.DeleteWebhook(webhookId, accessToken);
            //Assert.IsType<Webhook> (response, "response is Webhook");
        }
        
        /// <summary>
        /// Test GetAllWebhooks
        /// </summary>
        [Fact]
        public void GetAllWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accessToken = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllWebhooks(accessToken, offset, limit);
            //Assert.IsType<GetAllWebhooksResponse> (response, "response is GetAllWebhooksResponse");
        }
        
        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact]
        public void GetWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //string accessToken = null;
            //var response = instance.GetWebhook(webhookId, accessToken);
            //Assert.IsType<Webhook> (response, "response is Webhook");
        }
        
        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Fact]
        public void UpdateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string webhookId = null;
            //string accessToken = null;
            //bool? active = null;
            //string label = null;
            //bool? stagingUse = null;
            //string url = null;
            //string verifyToken = null;
            //string secret = null;
            //Collection<string> registeredEvents = null;
            //var response = instance.UpdateWebhook(webhookId, accessToken, active, label, stagingUse, url, verifyToken, secret, registeredEvents);
            //Assert.IsType<Webhook> (response, "response is Webhook");
        }
        
    }

}
