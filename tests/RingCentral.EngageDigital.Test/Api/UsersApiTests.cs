/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Api;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string firstname = null;
            //string lastname = null;
            //string password = null;
            //string roleId = null;
            //Collection<string> categoryIds = null;
            //bool? enabled = null;
            //string externalId = null;
            //string gender = null;
            //Collection<string> identityIds = null;
            //string locale = null;
            //string nickname = null;
            //Collection<string> teamIds = null;
            //string timezone = null;
            //Collection<string> spokenLanguages = null;
            //var response = instance.CreateUser(email, firstname, lastname, password, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Fact]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.DeleteUser(userId);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetAllUsers
        /// </summary>
        [Fact]
        public void GetAllUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string categoryId = null;
            //string identityId = null;
            //string externalId = null;
            //string roleId = null;
            //string teamId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllUsers(email, categoryId, identityId, externalId, roleId, teamId, offset, limit);
            //Assert.IsType<GetAllUsersResponse> (response, "response is GetAllUsersResponse");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetUser(userId);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test InviteUser
        /// </summary>
        [Fact]
        public void InviteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string firstname = null;
            //string lastname = null;
            //string roleId = null;
            //Collection<string> categoryIds = null;
            //bool? enabled = null;
            //string externalId = null;
            //string gender = null;
            //Collection<string> identityIds = null;
            //string locale = null;
            //string nickname = null;
            //Collection<string> teamIds = null;
            //string timezone = null;
            //Collection<string> spokenLanguages = null;
            //var response = instance.InviteUser(email, firstname, lastname, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Fact]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //Collection<string> categoryIds = null;
            //string email = null;
            //bool? enabled = null;
            //string externalId = null;
            //string firstname = null;
            //string gender = null;
            //Collection<string> identityIds = null;
            //string lastname = null;
            //string locale = null;
            //string nickname = null;
            //string password = null;
            //string roleId = null;
            //Collection<string> teamIds = null;
            //string timezone = null;
            //Collection<string> spokenLanguages = null;
            //var response = instance.UpdateUser(userId, categoryIds, email, enabled, externalId, firstname, gender, identityIds, lastname, locale, nickname, password, roleId, teamIds, timezone, spokenLanguages);
            //Assert.IsType<User> (response, "response is User");
        }
        
    }

}
