/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Api;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Test
{
    /// <summary>
    ///  Class for testing InterventionCommentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InterventionCommentsApiTests : IDisposable
    {
        private InterventionCommentsApi instance;

        public InterventionCommentsApiTests()
        {
            instance = new InterventionCommentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InterventionCommentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InterventionCommentsApi
            //Assert.IsType(typeof(InterventionCommentsApi), instance, "instance is a InterventionCommentsApi");
        }

        
        /// <summary>
        /// Test CreateInterventionComment
        /// </summary>
        [Fact]
        public void CreateInterventionCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //string interventionId = null;
            //string userId = null;
            //var response = instance.CreateInterventionComment(body, interventionId, userId);
            //Assert.IsType<InterventionComment> (response, "response is InterventionComment");
        }
        
        /// <summary>
        /// Test DeleteInterventionComment
        /// </summary>
        [Fact]
        public void DeleteInterventionCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionCommentId = null;
            //var response = instance.DeleteInterventionComment(interventionCommentId);
            //Assert.IsType<InterventionComment> (response, "response is InterventionComment");
        }
        
        /// <summary>
        /// Test GetAllInterventionComments
        /// </summary>
        [Fact]
        public void GetAllInterventionCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionId = null;
            //string threadId = null;
            //string userId = null;
            //string identityId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllInterventionComments(interventionId, threadId, userId, identityId, offset, limit);
            //Assert.IsType<GetAllInterventionCommentsResponse> (response, "response is GetAllInterventionCommentsResponse");
        }
        
        /// <summary>
        /// Test GetInterventionComment
        /// </summary>
        [Fact]
        public void GetInterventionCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionCommentId = null;
            //var response = instance.GetInterventionComment(interventionCommentId);
            //Assert.IsType<InterventionComment> (response, "response is InterventionComment");
        }
        
    }

}
