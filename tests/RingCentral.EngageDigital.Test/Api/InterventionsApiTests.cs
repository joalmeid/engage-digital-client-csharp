/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Api;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Test
{
    /// <summary>
    ///  Class for testing InterventionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InterventionsApiTests : IDisposable
    {
        private InterventionsApi instance;

        public InterventionsApiTests()
        {
            instance = new InterventionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InterventionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InterventionsApi
            //Assert.IsType(typeof(InterventionsApi), instance, "instance is a InterventionsApi");
        }

        
        /// <summary>
        /// Test CancelIntervention
        /// </summary>
        [Fact]
        public void CancelInterventionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionId = null;
            //var response = instance.CancelIntervention(interventionId);
            //Assert.IsType<Intervention> (response, "response is Intervention");
        }
        
        /// <summary>
        /// Test CategorizeIntervention
        /// </summary>
        [Fact]
        public void CategorizeInterventionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionId = null;
            //Collection<string> categoryIds = null;
            //var response = instance.CategorizeIntervention(interventionId, categoryIds);
            //Assert.IsType<Intervention> (response, "response is Intervention");
        }
        
        /// <summary>
        /// Test CloseIntervention
        /// </summary>
        [Fact]
        public void CloseInterventionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionId = null;
            //var response = instance.CloseIntervention(interventionId);
            //Assert.IsType<Intervention> (response, "response is Intervention");
        }
        
        /// <summary>
        /// Test CreateIntervention
        /// </summary>
        [Fact]
        public void CreateInterventionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentId = null;
            //var response = instance.CreateIntervention(contentId);
            //Assert.IsType<GetAllInterventionsResponse> (response, "response is GetAllInterventionsResponse");
        }
        
        /// <summary>
        /// Test GetAllInterventions
        /// </summary>
        [Fact]
        public void GetAllInterventionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string userId = null;
            //string identityGroupId = null;
            //Collection<string> identityId = null;
            //string sort = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllInterventions(threadId, userId, identityGroupId, identityId, sort, offset, limit);
            //Assert.IsType<GetAllInterventionsResponse> (response, "response is GetAllInterventionsResponse");
        }
        
        /// <summary>
        /// Test GetIntervention
        /// </summary>
        [Fact]
        public void GetInterventionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionId = null;
            //var response = instance.GetIntervention(interventionId);
            //Assert.IsType<Intervention> (response, "response is Intervention");
        }
        
        /// <summary>
        /// Test ReassignIntervention
        /// </summary>
        [Fact]
        public void ReassignInterventionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string interventionId = null;
            //string userId = null;
            //var response = instance.ReassignIntervention(interventionId, userId);
            //Assert.IsType<Intervention> (response, "response is Intervention");
        }
        
    }

}
