/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Api;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Test
{
    /// <summary>
    ///  Class for testing FoldersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FoldersApiTests : IDisposable
    {
        private FoldersApi instance;

        public FoldersApiTests()
        {
            instance = new FoldersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FoldersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FoldersApi
            //Assert.IsType(typeof(FoldersApi), instance, "instance is a FoldersApi");
        }

        
        /// <summary>
        /// Test CreateFolder
        /// </summary>
        [Fact]
        public void CreateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string label = null;
            //string parentId = null;
            //int? position = null;
            //string query = null;
            //bool? renderThreadsCount = null;
            //Collection<string> roleRestrictionOnly = null;
            //Collection<string> teamRestrictionOnly = null;
            //var response = instance.CreateFolder(label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
            //Assert.IsType<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test DeleteFolder
        /// </summary>
        [Fact]
        public void DeleteFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //var response = instance.DeleteFolder(folderId);
            //Assert.IsType<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test GetAllFolders
        /// </summary>
        [Fact]
        public void GetAllFoldersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllFolders(offset, limit);
            //Assert.IsType<GetAllFoldersResponse> (response, "response is GetAllFoldersResponse");
        }
        
        /// <summary>
        /// Test GetFolder
        /// </summary>
        [Fact]
        public void GetFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //var response = instance.GetFolder(folderId);
            //Assert.IsType<Folder> (response, "response is Folder");
        }
        
        /// <summary>
        /// Test UpdateFolder
        /// </summary>
        [Fact]
        public void UpdateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string folderId = null;
            //string label = null;
            //string parentId = null;
            //int? position = null;
            //string query = null;
            //bool? renderThreadsCount = null;
            //Collection<string> roleRestrictionOnly = null;
            //Collection<string> teamRestrictionOnly = null;
            //var response = instance.UpdateFolder(folderId, label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
            //Assert.IsType<Folder> (response, "response is Folder");
        }
        
    }

}
