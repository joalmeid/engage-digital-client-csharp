/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Api;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Test
{
    /// <summary>
    ///  Class for testing TagsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TagsApiTests : IDisposable
    {
        private TagsApi instance;

        public TagsApiTests()
        {
            instance = new TagsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TagsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TagsApi
            //Assert.IsType(typeof(TagsApi), instance, "instance is a TagsApi");
        }

        
        /// <summary>
        /// Test CreateTag
        /// </summary>
        [Fact]
        public void CreateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.CreateTag(name);
            //Assert.IsType<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Fact]
        public void DeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagId = null;
            //var response = instance.DeleteTag(tagId);
            //Assert.IsType<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test GetAllTags
        /// </summary>
        [Fact]
        public void GetAllTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllTags(offset, limit);
            //Assert.IsType<GetAllTagsResponse> (response, "response is GetAllTagsResponse");
        }
        
        /// <summary>
        /// Test GetTag
        /// </summary>
        [Fact]
        public void GetTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagId = null;
            //var response = instance.GetTag(tagId);
            //Assert.IsType<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test UpdateTag
        /// </summary>
        [Fact]
        public void UpdateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tagId = null;
            //string name = null;
            //var response = instance.UpdateTag(tagId, name);
            //Assert.IsType<Tag> (response, "response is Tag");
        }
        
    }

}
