/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RingCentral.Engage.Client;
using RingCentral.Engage.Api;
using RingCentral.Engage.Model;

namespace RingCentral.Engage.Test
{
    /// <summary>
    ///  Class for testing ReplyAssistantGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReplyAssistantGroupsApiTests
    {
        private ReplyAssistantGroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReplyAssistantGroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReplyAssistantGroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReplyAssistantGroupsApi
            //Assert.IsInstanceOfType(typeof(ReplyAssistantGroupsApi), instance, "instance is a ReplyAssistantGroupsApi");
        }

        /// <summary>
        /// Test CreateReplyAssistantGroup
        /// </summary>
        [Test]
        public void CreateReplyAssistantGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //List<string> entryIds = null;
            //bool? autocomplete = null;
            //int? position = null;
            //var response = instance.CreateReplyAssistantGroup(name, entryIds, autocomplete, position);
            //Assert.IsInstanceOf<ReplyAssistantGroup> (response, "response is ReplyAssistantGroup");
        }
        /// <summary>
        /// Test DeleteReplyAssistantGroup
        /// </summary>
        [Test]
        public void DeleteReplyAssistantGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string replyAssistantGroupId = null;
            //var response = instance.DeleteReplyAssistantGroup(replyAssistantGroupId);
            //Assert.IsInstanceOf<ReplyAssistantGroup> (response, "response is ReplyAssistantGroup");
        }
        /// <summary>
        /// Test GetAllReplyAssistantGroups
        /// </summary>
        [Test]
        public void GetAllReplyAssistantGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllReplyAssistantGroups(offset, limit);
            //Assert.IsInstanceOf<GetAllReplyAssistantGroupsResponse> (response, "response is GetAllReplyAssistantGroupsResponse");
        }
        /// <summary>
        /// Test GetReplyAssistantGroup
        /// </summary>
        [Test]
        public void GetReplyAssistantGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string replyAssistantGroupId = null;
            //var response = instance.GetReplyAssistantGroup(replyAssistantGroupId);
            //Assert.IsInstanceOf<ReplyAssistantGroup> (response, "response is ReplyAssistantGroup");
        }
        /// <summary>
        /// Test UpdateReplyAssistantGroup
        /// </summary>
        [Test]
        public void UpdateReplyAssistantGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string replyAssistantGroupId = null;
            //string name = null;
            //List<string> entryIds = null;
            //bool? autocomplete = null;
            //int? position = null;
            //var response = instance.UpdateReplyAssistantGroup(replyAssistantGroupId, name, entryIds, autocomplete, position);
            //Assert.IsInstanceOf<ReplyAssistantGroup> (response, "response is ReplyAssistantGroup");
        }
    }

}
