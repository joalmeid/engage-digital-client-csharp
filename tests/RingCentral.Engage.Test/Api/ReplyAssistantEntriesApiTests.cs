/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RingCentral.Engage.Client;
using RingCentral.Engage.Api;
using RingCentral.Engage.Model;

namespace RingCentral.Engage.Test
{
    /// <summary>
    ///  Class for testing ReplyAssistantEntriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReplyAssistantEntriesApiTests
    {
        private ReplyAssistantEntriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReplyAssistantEntriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReplyAssistantEntriesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReplyAssistantEntriesApi
            //Assert.IsInstanceOfType(typeof(ReplyAssistantEntriesApi), instance, "instance is a ReplyAssistantEntriesApi");
        }

        /// <summary>
        /// Test CreateReplyAssistantEntry
        /// </summary>
        [Test]
        public void CreateReplyAssistantEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string label = null;
            //var response = instance.CreateReplyAssistantEntry(label);
            //Assert.IsInstanceOf<ReplyAssistantEntry> (response, "response is ReplyAssistantEntry");
        }
        /// <summary>
        /// Test DeleteReplyAssistantEntry
        /// </summary>
        [Test]
        public void DeleteReplyAssistantEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string replyAssistantEntryId = null;
            //var response = instance.DeleteReplyAssistantEntry(replyAssistantEntryId);
            //Assert.IsInstanceOf<ReplyAssistantEntry> (response, "response is ReplyAssistantEntry");
        }
        /// <summary>
        /// Test GetAllReplyAssistantEntries
        /// </summary>
        [Test]
        public void GetAllReplyAssistantEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllReplyAssistantEntries(offset, limit);
            //Assert.IsInstanceOf<GetAllReplyAssistantEntriesResponse> (response, "response is GetAllReplyAssistantEntriesResponse");
        }
        /// <summary>
        /// Test GetReplyAssistantEntry
        /// </summary>
        [Test]
        public void GetReplyAssistantEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string replyAssistantEntryId = null;
            //var response = instance.GetReplyAssistantEntry(replyAssistantEntryId);
            //Assert.IsInstanceOf<ReplyAssistantEntry> (response, "response is ReplyAssistantEntry");
        }
        /// <summary>
        /// Test UpdateReplyAssistantEntry
        /// </summary>
        [Test]
        public void UpdateReplyAssistantEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string replyAssistantEntryId = null;
            //string label = null;
            //string foreignId = null;
            //List<string> categoryIds = null;
            //List<string> shortcuts = null;
            //string entryGroupId = null;
            //List<string> sourceIds = null;
            //var response = instance.UpdateReplyAssistantEntry(replyAssistantEntryId, label, foreignId, categoryIds, shortcuts, entryGroupId, sourceIds);
            //Assert.IsInstanceOf<ReplyAssistantEntry> (response, "response is ReplyAssistantEntry");
        }
    }

}
