/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using RingCentral.Engage.Client;
using RingCentral.Engage.Api;
using RingCentral.Engage.Model;

namespace RingCentral.Engage.Test
{
    /// <summary>
    ///  Class for testing TeamsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeamsApiTests
    {
        private TeamsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeamsApi
            //Assert.IsInstanceOfType(typeof(TeamsApi), instance, "instance is a TeamsApi");
        }

        /// <summary>
        /// Test CreateTeam
        /// </summary>
        [Test]
        public void CreateTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //List<string> leaderIds = null;
            //List<string> userIds = null;
            //var response = instance.CreateTeam(name, leaderIds, userIds);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        /// <summary>
        /// Test DeleteTeam
        /// </summary>
        [Test]
        public void DeleteTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //string takeOverCategoryId = null;
            //var response = instance.DeleteTeam(teamId, takeOverCategoryId);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        /// <summary>
        /// Test GetAllTeams
        /// </summary>
        [Test]
        public void GetAllTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllTeams(offset, limit);
            //Assert.IsInstanceOf<GetAllTeamsResponse> (response, "response is GetAllTeamsResponse");
        }
        /// <summary>
        /// Test GetTeam
        /// </summary>
        [Test]
        public void GetTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //var response = instance.GetTeam(teamId);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        /// <summary>
        /// Test UpdateTeam
        /// </summary>
        [Test]
        public void UpdateTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //string name = null;
            //List<string> leaderIds = null;
            //List<string> userIds = null;
            //var response = instance.UpdateTeam(teamId, name, leaderIds, userIds);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
    }

}
