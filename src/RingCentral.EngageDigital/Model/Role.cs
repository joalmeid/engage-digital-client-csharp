/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RingCentral.EngageDigital.Client.OpenAPIDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// Role
    /// </summary>
    [DataContract]
    public partial class Role :  IEquatable<Role>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Role" /> class.
        /// </summary>
        /// <param name="accessHelpCenter">accessHelpCenter.</param>
        /// <param name="accessPreviousMessages">accessPreviousMessages.</param>
        /// <param name="accessPullMode">accessPullMode.</param>
        /// <param name="adminStampAnswer">adminStampAnswer.</param>
        /// <param name="anonymizeIdentity">anonymizeIdentity.</param>
        /// <param name="approveContent">approveContent.</param>
        /// <param name="assignIntervention">assignIntervention.</param>
        /// <param name="authorBlockContent">authorBlockContent.</param>
        /// <param name="closeContentThread">closeContentThread.</param>
        /// <param name="createAndDestroyExtension">createAndDestroyExtension.</param>
        /// <param name="createCommunity">createCommunity.</param>
        /// <param name="createContentSource">createContentSource.</param>
        /// <param name="createUser">createUser.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="delayExportContent">delayExportContent.</param>
        /// <param name="deleteContentThread">deleteContentThread.</param>
        /// <param name="exportIdentity">exportIdentity.</param>
        /// <param name="id">id.</param>
        /// <param name="impersonateUser">impersonateUser.</param>
        /// <param name="inviteUser">inviteUser.</param>
        /// <param name="label">label.</param>
        /// <param name="lockIdentity">lockIdentity.</param>
        /// <param name="manageApiAccessTokens">manageApiAccessTokens.</param>
        /// <param name="manageAppSdkApplications">manageAppSdkApplications.</param>
        /// <param name="manageCategories">manageCategories.</param>
        /// <param name="manageChat">manageChat.</param>
        /// <param name="manageCustomFields">manageCustomFields.</param>
        /// <param name="manageCustomNotifications">manageCustomNotifications.</param>
        /// <param name="manageEmailsTemplates">manageEmailsTemplates.</param>
        /// <param name="manageFolders">manageFolders.</param>
        /// <param name="manageIce">manageIce.</param>
        /// <param name="manageIdentities">manageIdentities.</param>
        /// <param name="manageMessaging">manageMessaging.</param>
        /// <param name="manageOwnNotifications">manageOwnNotifications.</param>
        /// <param name="manageReplyAssistant">manageReplyAssistant.</param>
        /// <param name="manageRoles">manageRoles.</param>
        /// <param name="manageRulesEngineRules">manageRulesEngineRules.</param>
        /// <param name="manageTags">manageTags.</param>
        /// <param name="manageTeams">manageTeams.</param>
        /// <param name="manageTopologies">manageTopologies.</param>
        /// <param name="manageUsersOfMyTeams">manageUsersOfMyTeams.</param>
        /// <param name="monitorTasks">monitorTasks.</param>
        /// <param name="monitorTeamTasks">monitorTeamTasks.</param>
        /// <param name="muteContent">muteContent.</param>
        /// <param name="openContentThread">openContentThread.</param>
        /// <param name="publishContent">publishContent.</param>
        /// <param name="readCommunity">readCommunity.</param>
        /// <param name="readContentSource">readContentSource.</param>
        /// <param name="readEvent">readEvent.</param>
        /// <param name="readExport">readExport.</param>
        /// <param name="readIdentity">readIdentity.</param>
        /// <param name="readOwnStats">readOwnStats.</param>
        /// <param name="readPresence">readPresence.</param>
        /// <param name="readStats">readStats.</param>
        /// <param name="readUser">readUser.</param>
        /// <param name="receiveTasks">receiveTasks.</param>
        /// <param name="replyWithAssistant">replyWithAssistant.</param>
        /// <param name="searchContents">searchContents.</param>
        /// <param name="searchEvent">searchEvent.</param>
        /// <param name="updateCommunity">updateCommunity.</param>
        /// <param name="updateContentSource">updateContentSource.</param>
        /// <param name="updateExtension">updateExtension.</param>
        /// <param name="updateIdentity">updateIdentity.</param>
        /// <param name="updateIntervention">updateIntervention.</param>
        /// <param name="updateOwnIntervention">updateOwnIntervention.</param>
        /// <param name="updateSettings">updateSettings.</param>
        /// <param name="updateTimeSheet">updateTimeSheet.</param>
        /// <param name="updateUser">updateUser.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="useCobrowsing">useCobrowsing.</param>
        /// <param name="useEmoji">useEmoji.</param>
        public Role(bool accessHelpCenter = default(bool), bool accessPreviousMessages = default(bool), bool accessPullMode = default(bool), bool adminStampAnswer = default(bool), bool anonymizeIdentity = default(bool), bool approveContent = default(bool), bool assignIntervention = default(bool), bool authorBlockContent = default(bool), bool closeContentThread = default(bool), bool createAndDestroyExtension = default(bool), bool createCommunity = default(bool), bool createContentSource = default(bool), bool createUser = default(bool), DateTime createdAt = default(DateTime), bool delayExportContent = default(bool), bool deleteContentThread = default(bool), bool exportIdentity = default(bool), string id = default(string), bool impersonateUser = default(bool), bool inviteUser = default(bool), string label = default(string), bool lockIdentity = default(bool), bool manageApiAccessTokens = default(bool), bool manageAppSdkApplications = default(bool), bool manageCategories = default(bool), bool manageChat = default(bool), bool manageCustomFields = default(bool), bool manageCustomNotifications = default(bool), bool manageEmailsTemplates = default(bool), bool manageFolders = default(bool), bool manageIce = default(bool), bool manageIdentities = default(bool), bool manageMessaging = default(bool), bool manageOwnNotifications = default(bool), bool manageReplyAssistant = default(bool), bool manageRoles = default(bool), bool manageRulesEngineRules = default(bool), bool manageTags = default(bool), bool manageTeams = default(bool), bool manageTopologies = default(bool), bool manageUsersOfMyTeams = default(bool), bool monitorTasks = default(bool), bool monitorTeamTasks = default(bool), bool muteContent = default(bool), bool openContentThread = default(bool), bool publishContent = default(bool), bool readCommunity = default(bool), bool readContentSource = default(bool), bool readEvent = default(bool), bool readExport = default(bool), bool readIdentity = default(bool), bool readOwnStats = default(bool), bool readPresence = default(bool), bool readStats = default(bool), bool readUser = default(bool), bool receiveTasks = default(bool), bool replyWithAssistant = default(bool), bool searchContents = default(bool), bool searchEvent = default(bool), bool updateCommunity = default(bool), bool updateContentSource = default(bool), bool updateExtension = default(bool), bool updateIdentity = default(bool), bool updateIntervention = default(bool), bool updateOwnIntervention = default(bool), bool updateSettings = default(bool), bool updateTimeSheet = default(bool), bool updateUser = default(bool), DateTime updatedAt = default(DateTime), bool useCobrowsing = default(bool), bool useEmoji = default(bool))
        {
            this.AccessHelpCenter = accessHelpCenter;
            this.AccessPreviousMessages = accessPreviousMessages;
            this.AccessPullMode = accessPullMode;
            this.AdminStampAnswer = adminStampAnswer;
            this.AnonymizeIdentity = anonymizeIdentity;
            this.ApproveContent = approveContent;
            this.AssignIntervention = assignIntervention;
            this.AuthorBlockContent = authorBlockContent;
            this.CloseContentThread = closeContentThread;
            this.CreateAndDestroyExtension = createAndDestroyExtension;
            this.CreateCommunity = createCommunity;
            this.CreateContentSource = createContentSource;
            this.CreateUser = createUser;
            this.CreatedAt = createdAt;
            this.DelayExportContent = delayExportContent;
            this.DeleteContentThread = deleteContentThread;
            this.ExportIdentity = exportIdentity;
            this.Id = id;
            this.ImpersonateUser = impersonateUser;
            this.InviteUser = inviteUser;
            this.Label = label;
            this.LockIdentity = lockIdentity;
            this.ManageApiAccessTokens = manageApiAccessTokens;
            this.ManageAppSdkApplications = manageAppSdkApplications;
            this.ManageCategories = manageCategories;
            this.ManageChat = manageChat;
            this.ManageCustomFields = manageCustomFields;
            this.ManageCustomNotifications = manageCustomNotifications;
            this.ManageEmailsTemplates = manageEmailsTemplates;
            this.ManageFolders = manageFolders;
            this.ManageIce = manageIce;
            this.ManageIdentities = manageIdentities;
            this.ManageMessaging = manageMessaging;
            this.ManageOwnNotifications = manageOwnNotifications;
            this.ManageReplyAssistant = manageReplyAssistant;
            this.ManageRoles = manageRoles;
            this.ManageRulesEngineRules = manageRulesEngineRules;
            this.ManageTags = manageTags;
            this.ManageTeams = manageTeams;
            this.ManageTopologies = manageTopologies;
            this.ManageUsersOfMyTeams = manageUsersOfMyTeams;
            this.MonitorTasks = monitorTasks;
            this.MonitorTeamTasks = monitorTeamTasks;
            this.MuteContent = muteContent;
            this.OpenContentThread = openContentThread;
            this.PublishContent = publishContent;
            this.ReadCommunity = readCommunity;
            this.ReadContentSource = readContentSource;
            this.ReadEvent = readEvent;
            this.ReadExport = readExport;
            this.ReadIdentity = readIdentity;
            this.ReadOwnStats = readOwnStats;
            this.ReadPresence = readPresence;
            this.ReadStats = readStats;
            this.ReadUser = readUser;
            this.ReceiveTasks = receiveTasks;
            this.ReplyWithAssistant = replyWithAssistant;
            this.SearchContents = searchContents;
            this.SearchEvent = searchEvent;
            this.UpdateCommunity = updateCommunity;
            this.UpdateContentSource = updateContentSource;
            this.UpdateExtension = updateExtension;
            this.UpdateIdentity = updateIdentity;
            this.UpdateIntervention = updateIntervention;
            this.UpdateOwnIntervention = updateOwnIntervention;
            this.UpdateSettings = updateSettings;
            this.UpdateTimeSheet = updateTimeSheet;
            this.UpdateUser = updateUser;
            this.UpdatedAt = updatedAt;
            this.UseCobrowsing = useCobrowsing;
            this.UseEmoji = useEmoji;
        }
        
        /// <summary>
        /// Gets or Sets AccessHelpCenter
        /// </summary>
        [DataMember(Name="access_help_center", EmitDefaultValue=false)]
        public bool AccessHelpCenter { get; set; }

        /// <summary>
        /// Gets or Sets AccessPreviousMessages
        /// </summary>
        [DataMember(Name="access_previous_messages", EmitDefaultValue=false)]
        public bool AccessPreviousMessages { get; set; }

        /// <summary>
        /// Gets or Sets AccessPullMode
        /// </summary>
        [DataMember(Name="access_pull_mode", EmitDefaultValue=false)]
        public bool AccessPullMode { get; set; }

        /// <summary>
        /// Gets or Sets AdminStampAnswer
        /// </summary>
        [DataMember(Name="admin_stamp_answer", EmitDefaultValue=false)]
        public bool AdminStampAnswer { get; set; }

        /// <summary>
        /// Gets or Sets AnonymizeIdentity
        /// </summary>
        [DataMember(Name="anonymize_identity", EmitDefaultValue=false)]
        public bool AnonymizeIdentity { get; set; }

        /// <summary>
        /// Gets or Sets ApproveContent
        /// </summary>
        [DataMember(Name="approve_content", EmitDefaultValue=false)]
        public bool ApproveContent { get; set; }

        /// <summary>
        /// Gets or Sets AssignIntervention
        /// </summary>
        [DataMember(Name="assign_intervention", EmitDefaultValue=false)]
        public bool AssignIntervention { get; set; }

        /// <summary>
        /// Gets or Sets AuthorBlockContent
        /// </summary>
        [DataMember(Name="author_block_content", EmitDefaultValue=false)]
        public bool AuthorBlockContent { get; set; }

        /// <summary>
        /// Gets or Sets CloseContentThread
        /// </summary>
        [DataMember(Name="close_content_thread", EmitDefaultValue=false)]
        public bool CloseContentThread { get; set; }

        /// <summary>
        /// Gets or Sets CreateAndDestroyExtension
        /// </summary>
        [DataMember(Name="create_and_destroy_extension", EmitDefaultValue=false)]
        public bool CreateAndDestroyExtension { get; set; }

        /// <summary>
        /// Gets or Sets CreateCommunity
        /// </summary>
        [DataMember(Name="create_community", EmitDefaultValue=false)]
        public bool CreateCommunity { get; set; }

        /// <summary>
        /// Gets or Sets CreateContentSource
        /// </summary>
        [DataMember(Name="create_content_source", EmitDefaultValue=false)]
        public bool CreateContentSource { get; set; }

        /// <summary>
        /// Gets or Sets CreateUser
        /// </summary>
        [DataMember(Name="create_user", EmitDefaultValue=false)]
        public bool CreateUser { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DelayExportContent
        /// </summary>
        [DataMember(Name="delay_export_content", EmitDefaultValue=false)]
        public bool DelayExportContent { get; set; }

        /// <summary>
        /// Gets or Sets DeleteContentThread
        /// </summary>
        [DataMember(Name="delete_content_thread", EmitDefaultValue=false)]
        public bool DeleteContentThread { get; set; }

        /// <summary>
        /// Gets or Sets ExportIdentity
        /// </summary>
        [DataMember(Name="export_identity", EmitDefaultValue=false)]
        public bool ExportIdentity { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImpersonateUser
        /// </summary>
        [DataMember(Name="impersonate_user", EmitDefaultValue=false)]
        public bool ImpersonateUser { get; set; }

        /// <summary>
        /// Gets or Sets InviteUser
        /// </summary>
        [DataMember(Name="invite_user", EmitDefaultValue=false)]
        public bool InviteUser { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets LockIdentity
        /// </summary>
        [DataMember(Name="lock_identity", EmitDefaultValue=false)]
        public bool LockIdentity { get; set; }

        /// <summary>
        /// Gets or Sets ManageApiAccessTokens
        /// </summary>
        [DataMember(Name="manage_api_access_tokens", EmitDefaultValue=false)]
        public bool ManageApiAccessTokens { get; set; }

        /// <summary>
        /// Gets or Sets ManageAppSdkApplications
        /// </summary>
        [DataMember(Name="manage_app_sdk_applications", EmitDefaultValue=false)]
        public bool ManageAppSdkApplications { get; set; }

        /// <summary>
        /// Gets or Sets ManageCategories
        /// </summary>
        [DataMember(Name="manage_categories", EmitDefaultValue=false)]
        public bool ManageCategories { get; set; }

        /// <summary>
        /// Gets or Sets ManageChat
        /// </summary>
        [DataMember(Name="manage_chat", EmitDefaultValue=false)]
        public bool ManageChat { get; set; }

        /// <summary>
        /// Gets or Sets ManageCustomFields
        /// </summary>
        [DataMember(Name="manage_custom_fields", EmitDefaultValue=false)]
        public bool ManageCustomFields { get; set; }

        /// <summary>
        /// Gets or Sets ManageCustomNotifications
        /// </summary>
        [DataMember(Name="manage_custom_notifications", EmitDefaultValue=false)]
        public bool ManageCustomNotifications { get; set; }

        /// <summary>
        /// Gets or Sets ManageEmailsTemplates
        /// </summary>
        [DataMember(Name="manage_emails_templates", EmitDefaultValue=false)]
        public bool ManageEmailsTemplates { get; set; }

        /// <summary>
        /// Gets or Sets ManageFolders
        /// </summary>
        [DataMember(Name="manage_folders", EmitDefaultValue=false)]
        public bool ManageFolders { get; set; }

        /// <summary>
        /// Gets or Sets ManageIce
        /// </summary>
        [DataMember(Name="manage_ice", EmitDefaultValue=false)]
        public bool ManageIce { get; set; }

        /// <summary>
        /// Gets or Sets ManageIdentities
        /// </summary>
        [DataMember(Name="manage_identities", EmitDefaultValue=false)]
        public bool ManageIdentities { get; set; }

        /// <summary>
        /// Gets or Sets ManageMessaging
        /// </summary>
        [DataMember(Name="manage_messaging", EmitDefaultValue=false)]
        public bool ManageMessaging { get; set; }

        /// <summary>
        /// Gets or Sets ManageOwnNotifications
        /// </summary>
        [DataMember(Name="manage_own_notifications", EmitDefaultValue=false)]
        public bool ManageOwnNotifications { get; set; }

        /// <summary>
        /// Gets or Sets ManageReplyAssistant
        /// </summary>
        [DataMember(Name="manage_reply_assistant", EmitDefaultValue=false)]
        public bool ManageReplyAssistant { get; set; }

        /// <summary>
        /// Gets or Sets ManageRoles
        /// </summary>
        [DataMember(Name="manage_roles", EmitDefaultValue=false)]
        public bool ManageRoles { get; set; }

        /// <summary>
        /// Gets or Sets ManageRulesEngineRules
        /// </summary>
        [DataMember(Name="manage_rules_engine_rules", EmitDefaultValue=false)]
        public bool ManageRulesEngineRules { get; set; }

        /// <summary>
        /// Gets or Sets ManageTags
        /// </summary>
        [DataMember(Name="manage_tags", EmitDefaultValue=false)]
        public bool ManageTags { get; set; }

        /// <summary>
        /// Gets or Sets ManageTeams
        /// </summary>
        [DataMember(Name="manage_teams", EmitDefaultValue=false)]
        public bool ManageTeams { get; set; }

        /// <summary>
        /// Gets or Sets ManageTopologies
        /// </summary>
        [DataMember(Name="manage_topologies", EmitDefaultValue=false)]
        public bool ManageTopologies { get; set; }

        /// <summary>
        /// Gets or Sets ManageUsersOfMyTeams
        /// </summary>
        [DataMember(Name="manage_users_of_my_teams", EmitDefaultValue=false)]
        public bool ManageUsersOfMyTeams { get; set; }

        /// <summary>
        /// Gets or Sets MonitorTasks
        /// </summary>
        [DataMember(Name="monitor_tasks", EmitDefaultValue=false)]
        public bool MonitorTasks { get; set; }

        /// <summary>
        /// Gets or Sets MonitorTeamTasks
        /// </summary>
        [DataMember(Name="monitor_team_tasks", EmitDefaultValue=false)]
        public bool MonitorTeamTasks { get; set; }

        /// <summary>
        /// Gets or Sets MuteContent
        /// </summary>
        [DataMember(Name="mute_content", EmitDefaultValue=false)]
        public bool MuteContent { get; set; }

        /// <summary>
        /// Gets or Sets OpenContentThread
        /// </summary>
        [DataMember(Name="open_content_thread", EmitDefaultValue=false)]
        public bool OpenContentThread { get; set; }

        /// <summary>
        /// Gets or Sets PublishContent
        /// </summary>
        [DataMember(Name="publish_content", EmitDefaultValue=false)]
        public bool PublishContent { get; set; }

        /// <summary>
        /// Gets or Sets ReadCommunity
        /// </summary>
        [DataMember(Name="read_community", EmitDefaultValue=false)]
        public bool ReadCommunity { get; set; }

        /// <summary>
        /// Gets or Sets ReadContentSource
        /// </summary>
        [DataMember(Name="read_content_source", EmitDefaultValue=false)]
        public bool ReadContentSource { get; set; }

        /// <summary>
        /// Gets or Sets ReadEvent
        /// </summary>
        [DataMember(Name="read_event", EmitDefaultValue=false)]
        public bool ReadEvent { get; set; }

        /// <summary>
        /// Gets or Sets ReadExport
        /// </summary>
        [DataMember(Name="read_export", EmitDefaultValue=false)]
        public bool ReadExport { get; set; }

        /// <summary>
        /// Gets or Sets ReadIdentity
        /// </summary>
        [DataMember(Name="read_identity", EmitDefaultValue=false)]
        public bool ReadIdentity { get; set; }

        /// <summary>
        /// Gets or Sets ReadOwnStats
        /// </summary>
        [DataMember(Name="read_own_stats", EmitDefaultValue=false)]
        public bool ReadOwnStats { get; set; }

        /// <summary>
        /// Gets or Sets ReadPresence
        /// </summary>
        [DataMember(Name="read_presence", EmitDefaultValue=false)]
        public bool ReadPresence { get; set; }

        /// <summary>
        /// Gets or Sets ReadStats
        /// </summary>
        [DataMember(Name="read_stats", EmitDefaultValue=false)]
        public bool ReadStats { get; set; }

        /// <summary>
        /// Gets or Sets ReadUser
        /// </summary>
        [DataMember(Name="read_user", EmitDefaultValue=false)]
        public bool ReadUser { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveTasks
        /// </summary>
        [DataMember(Name="receive_tasks", EmitDefaultValue=false)]
        public bool ReceiveTasks { get; set; }

        /// <summary>
        /// Gets or Sets ReplyWithAssistant
        /// </summary>
        [DataMember(Name="reply_with_assistant", EmitDefaultValue=false)]
        public bool ReplyWithAssistant { get; set; }

        /// <summary>
        /// Gets or Sets SearchContents
        /// </summary>
        [DataMember(Name="search_contents", EmitDefaultValue=false)]
        public bool SearchContents { get; set; }

        /// <summary>
        /// Gets or Sets SearchEvent
        /// </summary>
        [DataMember(Name="search_event", EmitDefaultValue=false)]
        public bool SearchEvent { get; set; }

        /// <summary>
        /// Gets or Sets UpdateCommunity
        /// </summary>
        [DataMember(Name="update_community", EmitDefaultValue=false)]
        public bool UpdateCommunity { get; set; }

        /// <summary>
        /// Gets or Sets UpdateContentSource
        /// </summary>
        [DataMember(Name="update_content_source", EmitDefaultValue=false)]
        public bool UpdateContentSource { get; set; }

        /// <summary>
        /// Gets or Sets UpdateExtension
        /// </summary>
        [DataMember(Name="update_extension", EmitDefaultValue=false)]
        public bool UpdateExtension { get; set; }

        /// <summary>
        /// Gets or Sets UpdateIdentity
        /// </summary>
        [DataMember(Name="update_identity", EmitDefaultValue=false)]
        public bool UpdateIdentity { get; set; }

        /// <summary>
        /// Gets or Sets UpdateIntervention
        /// </summary>
        [DataMember(Name="update_intervention", EmitDefaultValue=false)]
        public bool UpdateIntervention { get; set; }

        /// <summary>
        /// Gets or Sets UpdateOwnIntervention
        /// </summary>
        [DataMember(Name="update_own_intervention", EmitDefaultValue=false)]
        public bool UpdateOwnIntervention { get; set; }

        /// <summary>
        /// Gets or Sets UpdateSettings
        /// </summary>
        [DataMember(Name="update_settings", EmitDefaultValue=false)]
        public bool UpdateSettings { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTimeSheet
        /// </summary>
        [DataMember(Name="update_time_sheet", EmitDefaultValue=false)]
        public bool UpdateTimeSheet { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUser
        /// </summary>
        [DataMember(Name="update_user", EmitDefaultValue=false)]
        public bool UpdateUser { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UseCobrowsing
        /// </summary>
        [DataMember(Name="use_cobrowsing", EmitDefaultValue=false)]
        public bool UseCobrowsing { get; set; }

        /// <summary>
        /// Gets or Sets UseEmoji
        /// </summary>
        [DataMember(Name="use_emoji", EmitDefaultValue=false)]
        public bool UseEmoji { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Role {\n");
            sb.Append("  AccessHelpCenter: ").Append(AccessHelpCenter).Append("\n");
            sb.Append("  AccessPreviousMessages: ").Append(AccessPreviousMessages).Append("\n");
            sb.Append("  AccessPullMode: ").Append(AccessPullMode).Append("\n");
            sb.Append("  AdminStampAnswer: ").Append(AdminStampAnswer).Append("\n");
            sb.Append("  AnonymizeIdentity: ").Append(AnonymizeIdentity).Append("\n");
            sb.Append("  ApproveContent: ").Append(ApproveContent).Append("\n");
            sb.Append("  AssignIntervention: ").Append(AssignIntervention).Append("\n");
            sb.Append("  AuthorBlockContent: ").Append(AuthorBlockContent).Append("\n");
            sb.Append("  CloseContentThread: ").Append(CloseContentThread).Append("\n");
            sb.Append("  CreateAndDestroyExtension: ").Append(CreateAndDestroyExtension).Append("\n");
            sb.Append("  CreateCommunity: ").Append(CreateCommunity).Append("\n");
            sb.Append("  CreateContentSource: ").Append(CreateContentSource).Append("\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DelayExportContent: ").Append(DelayExportContent).Append("\n");
            sb.Append("  DeleteContentThread: ").Append(DeleteContentThread).Append("\n");
            sb.Append("  ExportIdentity: ").Append(ExportIdentity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImpersonateUser: ").Append(ImpersonateUser).Append("\n");
            sb.Append("  InviteUser: ").Append(InviteUser).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LockIdentity: ").Append(LockIdentity).Append("\n");
            sb.Append("  ManageApiAccessTokens: ").Append(ManageApiAccessTokens).Append("\n");
            sb.Append("  ManageAppSdkApplications: ").Append(ManageAppSdkApplications).Append("\n");
            sb.Append("  ManageCategories: ").Append(ManageCategories).Append("\n");
            sb.Append("  ManageChat: ").Append(ManageChat).Append("\n");
            sb.Append("  ManageCustomFields: ").Append(ManageCustomFields).Append("\n");
            sb.Append("  ManageCustomNotifications: ").Append(ManageCustomNotifications).Append("\n");
            sb.Append("  ManageEmailsTemplates: ").Append(ManageEmailsTemplates).Append("\n");
            sb.Append("  ManageFolders: ").Append(ManageFolders).Append("\n");
            sb.Append("  ManageIce: ").Append(ManageIce).Append("\n");
            sb.Append("  ManageIdentities: ").Append(ManageIdentities).Append("\n");
            sb.Append("  ManageMessaging: ").Append(ManageMessaging).Append("\n");
            sb.Append("  ManageOwnNotifications: ").Append(ManageOwnNotifications).Append("\n");
            sb.Append("  ManageReplyAssistant: ").Append(ManageReplyAssistant).Append("\n");
            sb.Append("  ManageRoles: ").Append(ManageRoles).Append("\n");
            sb.Append("  ManageRulesEngineRules: ").Append(ManageRulesEngineRules).Append("\n");
            sb.Append("  ManageTags: ").Append(ManageTags).Append("\n");
            sb.Append("  ManageTeams: ").Append(ManageTeams).Append("\n");
            sb.Append("  ManageTopologies: ").Append(ManageTopologies).Append("\n");
            sb.Append("  ManageUsersOfMyTeams: ").Append(ManageUsersOfMyTeams).Append("\n");
            sb.Append("  MonitorTasks: ").Append(MonitorTasks).Append("\n");
            sb.Append("  MonitorTeamTasks: ").Append(MonitorTeamTasks).Append("\n");
            sb.Append("  MuteContent: ").Append(MuteContent).Append("\n");
            sb.Append("  OpenContentThread: ").Append(OpenContentThread).Append("\n");
            sb.Append("  PublishContent: ").Append(PublishContent).Append("\n");
            sb.Append("  ReadCommunity: ").Append(ReadCommunity).Append("\n");
            sb.Append("  ReadContentSource: ").Append(ReadContentSource).Append("\n");
            sb.Append("  ReadEvent: ").Append(ReadEvent).Append("\n");
            sb.Append("  ReadExport: ").Append(ReadExport).Append("\n");
            sb.Append("  ReadIdentity: ").Append(ReadIdentity).Append("\n");
            sb.Append("  ReadOwnStats: ").Append(ReadOwnStats).Append("\n");
            sb.Append("  ReadPresence: ").Append(ReadPresence).Append("\n");
            sb.Append("  ReadStats: ").Append(ReadStats).Append("\n");
            sb.Append("  ReadUser: ").Append(ReadUser).Append("\n");
            sb.Append("  ReceiveTasks: ").Append(ReceiveTasks).Append("\n");
            sb.Append("  ReplyWithAssistant: ").Append(ReplyWithAssistant).Append("\n");
            sb.Append("  SearchContents: ").Append(SearchContents).Append("\n");
            sb.Append("  SearchEvent: ").Append(SearchEvent).Append("\n");
            sb.Append("  UpdateCommunity: ").Append(UpdateCommunity).Append("\n");
            sb.Append("  UpdateContentSource: ").Append(UpdateContentSource).Append("\n");
            sb.Append("  UpdateExtension: ").Append(UpdateExtension).Append("\n");
            sb.Append("  UpdateIdentity: ").Append(UpdateIdentity).Append("\n");
            sb.Append("  UpdateIntervention: ").Append(UpdateIntervention).Append("\n");
            sb.Append("  UpdateOwnIntervention: ").Append(UpdateOwnIntervention).Append("\n");
            sb.Append("  UpdateSettings: ").Append(UpdateSettings).Append("\n");
            sb.Append("  UpdateTimeSheet: ").Append(UpdateTimeSheet).Append("\n");
            sb.Append("  UpdateUser: ").Append(UpdateUser).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UseCobrowsing: ").Append(UseCobrowsing).Append("\n");
            sb.Append("  UseEmoji: ").Append(UseEmoji).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Role);
        }

        /// <summary>
        /// Returns true if Role instances are equal
        /// </summary>
        /// <param name="input">Instance of Role to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Role input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessHelpCenter == input.AccessHelpCenter ||
                    this.AccessHelpCenter.Equals(input.AccessHelpCenter)
                ) && 
                (
                    this.AccessPreviousMessages == input.AccessPreviousMessages ||
                    this.AccessPreviousMessages.Equals(input.AccessPreviousMessages)
                ) && 
                (
                    this.AccessPullMode == input.AccessPullMode ||
                    this.AccessPullMode.Equals(input.AccessPullMode)
                ) && 
                (
                    this.AdminStampAnswer == input.AdminStampAnswer ||
                    this.AdminStampAnswer.Equals(input.AdminStampAnswer)
                ) && 
                (
                    this.AnonymizeIdentity == input.AnonymizeIdentity ||
                    this.AnonymizeIdentity.Equals(input.AnonymizeIdentity)
                ) && 
                (
                    this.ApproveContent == input.ApproveContent ||
                    this.ApproveContent.Equals(input.ApproveContent)
                ) && 
                (
                    this.AssignIntervention == input.AssignIntervention ||
                    this.AssignIntervention.Equals(input.AssignIntervention)
                ) && 
                (
                    this.AuthorBlockContent == input.AuthorBlockContent ||
                    this.AuthorBlockContent.Equals(input.AuthorBlockContent)
                ) && 
                (
                    this.CloseContentThread == input.CloseContentThread ||
                    this.CloseContentThread.Equals(input.CloseContentThread)
                ) && 
                (
                    this.CreateAndDestroyExtension == input.CreateAndDestroyExtension ||
                    this.CreateAndDestroyExtension.Equals(input.CreateAndDestroyExtension)
                ) && 
                (
                    this.CreateCommunity == input.CreateCommunity ||
                    this.CreateCommunity.Equals(input.CreateCommunity)
                ) && 
                (
                    this.CreateContentSource == input.CreateContentSource ||
                    this.CreateContentSource.Equals(input.CreateContentSource)
                ) && 
                (
                    this.CreateUser == input.CreateUser ||
                    this.CreateUser.Equals(input.CreateUser)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DelayExportContent == input.DelayExportContent ||
                    this.DelayExportContent.Equals(input.DelayExportContent)
                ) && 
                (
                    this.DeleteContentThread == input.DeleteContentThread ||
                    this.DeleteContentThread.Equals(input.DeleteContentThread)
                ) && 
                (
                    this.ExportIdentity == input.ExportIdentity ||
                    this.ExportIdentity.Equals(input.ExportIdentity)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImpersonateUser == input.ImpersonateUser ||
                    this.ImpersonateUser.Equals(input.ImpersonateUser)
                ) && 
                (
                    this.InviteUser == input.InviteUser ||
                    this.InviteUser.Equals(input.InviteUser)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.LockIdentity == input.LockIdentity ||
                    this.LockIdentity.Equals(input.LockIdentity)
                ) && 
                (
                    this.ManageApiAccessTokens == input.ManageApiAccessTokens ||
                    this.ManageApiAccessTokens.Equals(input.ManageApiAccessTokens)
                ) && 
                (
                    this.ManageAppSdkApplications == input.ManageAppSdkApplications ||
                    this.ManageAppSdkApplications.Equals(input.ManageAppSdkApplications)
                ) && 
                (
                    this.ManageCategories == input.ManageCategories ||
                    this.ManageCategories.Equals(input.ManageCategories)
                ) && 
                (
                    this.ManageChat == input.ManageChat ||
                    this.ManageChat.Equals(input.ManageChat)
                ) && 
                (
                    this.ManageCustomFields == input.ManageCustomFields ||
                    this.ManageCustomFields.Equals(input.ManageCustomFields)
                ) && 
                (
                    this.ManageCustomNotifications == input.ManageCustomNotifications ||
                    this.ManageCustomNotifications.Equals(input.ManageCustomNotifications)
                ) && 
                (
                    this.ManageEmailsTemplates == input.ManageEmailsTemplates ||
                    this.ManageEmailsTemplates.Equals(input.ManageEmailsTemplates)
                ) && 
                (
                    this.ManageFolders == input.ManageFolders ||
                    this.ManageFolders.Equals(input.ManageFolders)
                ) && 
                (
                    this.ManageIce == input.ManageIce ||
                    this.ManageIce.Equals(input.ManageIce)
                ) && 
                (
                    this.ManageIdentities == input.ManageIdentities ||
                    this.ManageIdentities.Equals(input.ManageIdentities)
                ) && 
                (
                    this.ManageMessaging == input.ManageMessaging ||
                    this.ManageMessaging.Equals(input.ManageMessaging)
                ) && 
                (
                    this.ManageOwnNotifications == input.ManageOwnNotifications ||
                    this.ManageOwnNotifications.Equals(input.ManageOwnNotifications)
                ) && 
                (
                    this.ManageReplyAssistant == input.ManageReplyAssistant ||
                    this.ManageReplyAssistant.Equals(input.ManageReplyAssistant)
                ) && 
                (
                    this.ManageRoles == input.ManageRoles ||
                    this.ManageRoles.Equals(input.ManageRoles)
                ) && 
                (
                    this.ManageRulesEngineRules == input.ManageRulesEngineRules ||
                    this.ManageRulesEngineRules.Equals(input.ManageRulesEngineRules)
                ) && 
                (
                    this.ManageTags == input.ManageTags ||
                    this.ManageTags.Equals(input.ManageTags)
                ) && 
                (
                    this.ManageTeams == input.ManageTeams ||
                    this.ManageTeams.Equals(input.ManageTeams)
                ) && 
                (
                    this.ManageTopologies == input.ManageTopologies ||
                    this.ManageTopologies.Equals(input.ManageTopologies)
                ) && 
                (
                    this.ManageUsersOfMyTeams == input.ManageUsersOfMyTeams ||
                    this.ManageUsersOfMyTeams.Equals(input.ManageUsersOfMyTeams)
                ) && 
                (
                    this.MonitorTasks == input.MonitorTasks ||
                    this.MonitorTasks.Equals(input.MonitorTasks)
                ) && 
                (
                    this.MonitorTeamTasks == input.MonitorTeamTasks ||
                    this.MonitorTeamTasks.Equals(input.MonitorTeamTasks)
                ) && 
                (
                    this.MuteContent == input.MuteContent ||
                    this.MuteContent.Equals(input.MuteContent)
                ) && 
                (
                    this.OpenContentThread == input.OpenContentThread ||
                    this.OpenContentThread.Equals(input.OpenContentThread)
                ) && 
                (
                    this.PublishContent == input.PublishContent ||
                    this.PublishContent.Equals(input.PublishContent)
                ) && 
                (
                    this.ReadCommunity == input.ReadCommunity ||
                    this.ReadCommunity.Equals(input.ReadCommunity)
                ) && 
                (
                    this.ReadContentSource == input.ReadContentSource ||
                    this.ReadContentSource.Equals(input.ReadContentSource)
                ) && 
                (
                    this.ReadEvent == input.ReadEvent ||
                    this.ReadEvent.Equals(input.ReadEvent)
                ) && 
                (
                    this.ReadExport == input.ReadExport ||
                    this.ReadExport.Equals(input.ReadExport)
                ) && 
                (
                    this.ReadIdentity == input.ReadIdentity ||
                    this.ReadIdentity.Equals(input.ReadIdentity)
                ) && 
                (
                    this.ReadOwnStats == input.ReadOwnStats ||
                    this.ReadOwnStats.Equals(input.ReadOwnStats)
                ) && 
                (
                    this.ReadPresence == input.ReadPresence ||
                    this.ReadPresence.Equals(input.ReadPresence)
                ) && 
                (
                    this.ReadStats == input.ReadStats ||
                    this.ReadStats.Equals(input.ReadStats)
                ) && 
                (
                    this.ReadUser == input.ReadUser ||
                    this.ReadUser.Equals(input.ReadUser)
                ) && 
                (
                    this.ReceiveTasks == input.ReceiveTasks ||
                    this.ReceiveTasks.Equals(input.ReceiveTasks)
                ) && 
                (
                    this.ReplyWithAssistant == input.ReplyWithAssistant ||
                    this.ReplyWithAssistant.Equals(input.ReplyWithAssistant)
                ) && 
                (
                    this.SearchContents == input.SearchContents ||
                    this.SearchContents.Equals(input.SearchContents)
                ) && 
                (
                    this.SearchEvent == input.SearchEvent ||
                    this.SearchEvent.Equals(input.SearchEvent)
                ) && 
                (
                    this.UpdateCommunity == input.UpdateCommunity ||
                    this.UpdateCommunity.Equals(input.UpdateCommunity)
                ) && 
                (
                    this.UpdateContentSource == input.UpdateContentSource ||
                    this.UpdateContentSource.Equals(input.UpdateContentSource)
                ) && 
                (
                    this.UpdateExtension == input.UpdateExtension ||
                    this.UpdateExtension.Equals(input.UpdateExtension)
                ) && 
                (
                    this.UpdateIdentity == input.UpdateIdentity ||
                    this.UpdateIdentity.Equals(input.UpdateIdentity)
                ) && 
                (
                    this.UpdateIntervention == input.UpdateIntervention ||
                    this.UpdateIntervention.Equals(input.UpdateIntervention)
                ) && 
                (
                    this.UpdateOwnIntervention == input.UpdateOwnIntervention ||
                    this.UpdateOwnIntervention.Equals(input.UpdateOwnIntervention)
                ) && 
                (
                    this.UpdateSettings == input.UpdateSettings ||
                    this.UpdateSettings.Equals(input.UpdateSettings)
                ) && 
                (
                    this.UpdateTimeSheet == input.UpdateTimeSheet ||
                    this.UpdateTimeSheet.Equals(input.UpdateTimeSheet)
                ) && 
                (
                    this.UpdateUser == input.UpdateUser ||
                    this.UpdateUser.Equals(input.UpdateUser)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UseCobrowsing == input.UseCobrowsing ||
                    this.UseCobrowsing.Equals(input.UseCobrowsing)
                ) && 
                (
                    this.UseEmoji == input.UseEmoji ||
                    this.UseEmoji.Equals(input.UseEmoji)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccessHelpCenter.GetHashCode();
                hashCode = hashCode * 59 + this.AccessPreviousMessages.GetHashCode();
                hashCode = hashCode * 59 + this.AccessPullMode.GetHashCode();
                hashCode = hashCode * 59 + this.AdminStampAnswer.GetHashCode();
                hashCode = hashCode * 59 + this.AnonymizeIdentity.GetHashCode();
                hashCode = hashCode * 59 + this.ApproveContent.GetHashCode();
                hashCode = hashCode * 59 + this.AssignIntervention.GetHashCode();
                hashCode = hashCode * 59 + this.AuthorBlockContent.GetHashCode();
                hashCode = hashCode * 59 + this.CloseContentThread.GetHashCode();
                hashCode = hashCode * 59 + this.CreateAndDestroyExtension.GetHashCode();
                hashCode = hashCode * 59 + this.CreateCommunity.GetHashCode();
                hashCode = hashCode * 59 + this.CreateContentSource.GetHashCode();
                hashCode = hashCode * 59 + this.CreateUser.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.DelayExportContent.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteContentThread.GetHashCode();
                hashCode = hashCode * 59 + this.ExportIdentity.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.ImpersonateUser.GetHashCode();
                hashCode = hashCode * 59 + this.InviteUser.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                hashCode = hashCode * 59 + this.LockIdentity.GetHashCode();
                hashCode = hashCode * 59 + this.ManageApiAccessTokens.GetHashCode();
                hashCode = hashCode * 59 + this.ManageAppSdkApplications.GetHashCode();
                hashCode = hashCode * 59 + this.ManageCategories.GetHashCode();
                hashCode = hashCode * 59 + this.ManageChat.GetHashCode();
                hashCode = hashCode * 59 + this.ManageCustomFields.GetHashCode();
                hashCode = hashCode * 59 + this.ManageCustomNotifications.GetHashCode();
                hashCode = hashCode * 59 + this.ManageEmailsTemplates.GetHashCode();
                hashCode = hashCode * 59 + this.ManageFolders.GetHashCode();
                hashCode = hashCode * 59 + this.ManageIce.GetHashCode();
                hashCode = hashCode * 59 + this.ManageIdentities.GetHashCode();
                hashCode = hashCode * 59 + this.ManageMessaging.GetHashCode();
                hashCode = hashCode * 59 + this.ManageOwnNotifications.GetHashCode();
                hashCode = hashCode * 59 + this.ManageReplyAssistant.GetHashCode();
                hashCode = hashCode * 59 + this.ManageRoles.GetHashCode();
                hashCode = hashCode * 59 + this.ManageRulesEngineRules.GetHashCode();
                hashCode = hashCode * 59 + this.ManageTags.GetHashCode();
                hashCode = hashCode * 59 + this.ManageTeams.GetHashCode();
                hashCode = hashCode * 59 + this.ManageTopologies.GetHashCode();
                hashCode = hashCode * 59 + this.ManageUsersOfMyTeams.GetHashCode();
                hashCode = hashCode * 59 + this.MonitorTasks.GetHashCode();
                hashCode = hashCode * 59 + this.MonitorTeamTasks.GetHashCode();
                hashCode = hashCode * 59 + this.MuteContent.GetHashCode();
                hashCode = hashCode * 59 + this.OpenContentThread.GetHashCode();
                hashCode = hashCode * 59 + this.PublishContent.GetHashCode();
                hashCode = hashCode * 59 + this.ReadCommunity.GetHashCode();
                hashCode = hashCode * 59 + this.ReadContentSource.GetHashCode();
                hashCode = hashCode * 59 + this.ReadEvent.GetHashCode();
                hashCode = hashCode * 59 + this.ReadExport.GetHashCode();
                hashCode = hashCode * 59 + this.ReadIdentity.GetHashCode();
                hashCode = hashCode * 59 + this.ReadOwnStats.GetHashCode();
                hashCode = hashCode * 59 + this.ReadPresence.GetHashCode();
                hashCode = hashCode * 59 + this.ReadStats.GetHashCode();
                hashCode = hashCode * 59 + this.ReadUser.GetHashCode();
                hashCode = hashCode * 59 + this.ReceiveTasks.GetHashCode();
                hashCode = hashCode * 59 + this.ReplyWithAssistant.GetHashCode();
                hashCode = hashCode * 59 + this.SearchContents.GetHashCode();
                hashCode = hashCode * 59 + this.SearchEvent.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateCommunity.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateContentSource.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateExtension.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateIdentity.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateIntervention.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateOwnIntervention.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateSettings.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateTimeSheet.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateUser.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.UseCobrowsing.GetHashCode();
                hashCode = hashCode * 59 + this.UseEmoji.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
