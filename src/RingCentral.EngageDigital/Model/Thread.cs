/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = RingCentral.EngageDigital.Client.SwaggerDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// Thread
    /// </summary>
    [DataContract]
        public partial class Thread :  IEquatable<Thread>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Thread" /> class.
        /// </summary>
        /// <param name="categoryIds">categoryIds.</param>
        /// <param name="closed">closed.</param>
        /// <param name="contentsCount">contentsCount.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="extraData">extraData.</param>
        /// <param name="foreignId">foreignId.</param>
        /// <param name="id">id (required).</param>
        /// <param name="interventionsCount">interventionsCount.</param>
        /// <param name="sourceId">sourceId.</param>
        /// <param name="threadCategoryIds">threadCategoryIds.</param>
        /// <param name="title">title.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Thread(List<string> categoryIds = default(List<string>), bool? closed = default(bool?), int? contentsCount = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), Object extraData = default(Object), string foreignId = default(string), string id = default(string), int? interventionsCount = default(int?), string sourceId = default(string), List<string> threadCategoryIds = default(List<string>), string title = default(string), DateTimeOffset? updatedAt = default(DateTimeOffset?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Thread and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.CategoryIds = categoryIds;
            this.Closed = closed;
            this.ContentsCount = contentsCount;
            this.CreatedAt = createdAt;
            this.ExtraData = extraData;
            this.ForeignId = foreignId;
            this.InterventionsCount = interventionsCount;
            this.SourceId = sourceId;
            this.ThreadCategoryIds = threadCategoryIds;
            this.Title = title;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets CategoryIds
        /// </summary>
        [DataMember(Name="category_ids", EmitDefaultValue=false)]
        public List<string> CategoryIds { get; set; }

        /// <summary>
        /// Gets or Sets Closed
        /// </summary>
        [DataMember(Name="closed", EmitDefaultValue=false)]
        public bool? Closed { get; set; }

        /// <summary>
        /// Gets or Sets ContentsCount
        /// </summary>
        [DataMember(Name="contents_count", EmitDefaultValue=false)]
        public int? ContentsCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name="extra_data", EmitDefaultValue=false)]
        public Object ExtraData { get; set; }

        /// <summary>
        /// Gets or Sets ForeignId
        /// </summary>
        [DataMember(Name="foreign_id", EmitDefaultValue=false)]
        public string ForeignId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InterventionsCount
        /// </summary>
        [DataMember(Name="interventions_count", EmitDefaultValue=false)]
        public int? InterventionsCount { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets ThreadCategoryIds
        /// </summary>
        [DataMember(Name="thread_category_ids", EmitDefaultValue=false)]
        public List<string> ThreadCategoryIds { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Thread {\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  ContentsCount: ").Append(ContentsCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  ForeignId: ").Append(ForeignId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterventionsCount: ").Append(InterventionsCount).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  ThreadCategoryIds: ").Append(ThreadCategoryIds).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Thread);
        }

        /// <summary>
        /// Returns true if Thread instances are equal
        /// </summary>
        /// <param name="input">Instance of Thread to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Thread input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                ) && 
                (
                    this.Closed == input.Closed ||
                    (this.Closed != null &&
                    this.Closed.Equals(input.Closed))
                ) && 
                (
                    this.ContentsCount == input.ContentsCount ||
                    (this.ContentsCount != null &&
                    this.ContentsCount.Equals(input.ContentsCount))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    (this.ExtraData != null &&
                    this.ExtraData.Equals(input.ExtraData))
                ) && 
                (
                    this.ForeignId == input.ForeignId ||
                    (this.ForeignId != null &&
                    this.ForeignId.Equals(input.ForeignId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InterventionsCount == input.InterventionsCount ||
                    (this.InterventionsCount != null &&
                    this.InterventionsCount.Equals(input.InterventionsCount))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.ThreadCategoryIds == input.ThreadCategoryIds ||
                    this.ThreadCategoryIds != null &&
                    input.ThreadCategoryIds != null &&
                    this.ThreadCategoryIds.SequenceEqual(input.ThreadCategoryIds)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryIds != null)
                    hashCode = hashCode * 59 + this.CategoryIds.GetHashCode();
                if (this.Closed != null)
                    hashCode = hashCode * 59 + this.Closed.GetHashCode();
                if (this.ContentsCount != null)
                    hashCode = hashCode * 59 + this.ContentsCount.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                if (this.ForeignId != null)
                    hashCode = hashCode * 59 + this.ForeignId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InterventionsCount != null)
                    hashCode = hashCode * 59 + this.InterventionsCount.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.ThreadCategoryIds != null)
                    hashCode = hashCode * 59 + this.ThreadCategoryIds.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }
}
