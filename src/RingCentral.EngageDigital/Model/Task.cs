/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = RingCentral.EngageDigital.Client.SwaggerDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// Task
    /// </summary>
    [DataContract]
        public partial class Task :  IEquatable<Task>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Task" /> class.
        /// </summary>
        /// <param name="acceptedAt">acceptedAt.</param>
        /// <param name="agentIds">agentIds.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="completedAt">completedAt.</param>
        /// <param name="contentId">contentId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="expireAt">expireAt.</param>
        /// <param name="id">id (required).</param>
        /// <param name="interventionId">interventionId.</param>
        /// <param name="lockedAt">lockedAt.</param>
        /// <param name="priority">priority.</param>
        /// <param name="step">step.</param>
        /// <param name="threadId">threadId.</param>
        /// <param name="transferedAt">transferedAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Task(DateTimeOffset? acceptedAt = default(DateTimeOffset?), List<string> agentIds = default(List<string>), string channelId = default(string), DateTimeOffset? completedAt = default(DateTimeOffset?), string contentId = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? expireAt = default(DateTimeOffset?), string id = default(string), string interventionId = default(string), DateTimeOffset? lockedAt = default(DateTimeOffset?), int? priority = default(int?), string step = default(string), string threadId = default(string), DateTimeOffset? transferedAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Task and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.AcceptedAt = acceptedAt;
            this.AgentIds = agentIds;
            this.ChannelId = channelId;
            this.CompletedAt = completedAt;
            this.ContentId = contentId;
            this.CreatedAt = createdAt;
            this.ExpireAt = expireAt;
            this.InterventionId = interventionId;
            this.LockedAt = lockedAt;
            this.Priority = priority;
            this.Step = step;
            this.ThreadId = threadId;
            this.TransferedAt = transferedAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets AcceptedAt
        /// </summary>
        [DataMember(Name="accepted_at", EmitDefaultValue=false)]
        public DateTimeOffset? AcceptedAt { get; set; }

        /// <summary>
        /// Gets or Sets AgentIds
        /// </summary>
        [DataMember(Name="agent_ids", EmitDefaultValue=false)]
        public List<string> AgentIds { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name="completed_at", EmitDefaultValue=false)]
        public DateTimeOffset? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="content_id", EmitDefaultValue=false)]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpireAt
        /// </summary>
        [DataMember(Name="expire_at", EmitDefaultValue=false)]
        public DateTimeOffset? ExpireAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InterventionId
        /// </summary>
        [DataMember(Name="intervention_id", EmitDefaultValue=false)]
        public string InterventionId { get; set; }

        /// <summary>
        /// Gets or Sets LockedAt
        /// </summary>
        [DataMember(Name="locked_at", EmitDefaultValue=false)]
        public DateTimeOffset? LockedAt { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public string Step { get; set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; set; }

        /// <summary>
        /// Gets or Sets TransferedAt
        /// </summary>
        [DataMember(Name="transfered_at", EmitDefaultValue=false)]
        public DateTimeOffset? TransferedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  AcceptedAt: ").Append(AcceptedAt).Append("\n");
            sb.Append("  AgentIds: ").Append(AgentIds).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpireAt: ").Append(ExpireAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterventionId: ").Append(InterventionId).Append("\n");
            sb.Append("  LockedAt: ").Append(LockedAt).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  TransferedAt: ").Append(TransferedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Task);
        }

        /// <summary>
        /// Returns true if Task instances are equal
        /// </summary>
        /// <param name="input">Instance of Task to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Task input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptedAt == input.AcceptedAt ||
                    (this.AcceptedAt != null &&
                    this.AcceptedAt.Equals(input.AcceptedAt))
                ) && 
                (
                    this.AgentIds == input.AgentIds ||
                    this.AgentIds != null &&
                    input.AgentIds != null &&
                    this.AgentIds.SequenceEqual(input.AgentIds)
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.ContentId == input.ContentId ||
                    (this.ContentId != null &&
                    this.ContentId.Equals(input.ContentId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExpireAt == input.ExpireAt ||
                    (this.ExpireAt != null &&
                    this.ExpireAt.Equals(input.ExpireAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InterventionId == input.InterventionId ||
                    (this.InterventionId != null &&
                    this.InterventionId.Equals(input.InterventionId))
                ) && 
                (
                    this.LockedAt == input.LockedAt ||
                    (this.LockedAt != null &&
                    this.LockedAt.Equals(input.LockedAt))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Step == input.Step ||
                    (this.Step != null &&
                    this.Step.Equals(input.Step))
                ) && 
                (
                    this.ThreadId == input.ThreadId ||
                    (this.ThreadId != null &&
                    this.ThreadId.Equals(input.ThreadId))
                ) && 
                (
                    this.TransferedAt == input.TransferedAt ||
                    (this.TransferedAt != null &&
                    this.TransferedAt.Equals(input.TransferedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptedAt != null)
                    hashCode = hashCode * 59 + this.AcceptedAt.GetHashCode();
                if (this.AgentIds != null)
                    hashCode = hashCode * 59 + this.AgentIds.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.ContentId != null)
                    hashCode = hashCode * 59 + this.ContentId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ExpireAt != null)
                    hashCode = hashCode * 59 + this.ExpireAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InterventionId != null)
                    hashCode = hashCode * 59 + this.InterventionId.GetHashCode();
                if (this.LockedAt != null)
                    hashCode = hashCode * 59 + this.LockedAt.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Step != null)
                    hashCode = hashCode * 59 + this.Step.GetHashCode();
                if (this.ThreadId != null)
                    hashCode = hashCode * 59 + this.ThreadId.GetHashCode();
                if (this.TransferedAt != null)
                    hashCode = hashCode * 59 + this.TransferedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }
}
