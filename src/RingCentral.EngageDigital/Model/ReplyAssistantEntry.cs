/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RingCentral.EngageDigital.Client.OpenAPIDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// ReplyAssistantEntry
    /// </summary>
    [DataContract]
    public partial class ReplyAssistantEntry :  IEquatable<ReplyAssistantEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplyAssistantEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntry" /> class.
        /// </summary>
        /// <param name="categoryIds">categoryIds.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="entryGroupId">entryGroupId.</param>
        /// <param name="foreignId">foreignId.</param>
        /// <param name="id">id (required).</param>
        /// <param name="label">label.</param>
        /// <param name="shortcuts">shortcuts.</param>
        /// <param name="sourceIds">sourceIds.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="versionIds">versionIds.</param>
        public ReplyAssistantEntry(Collection<string> categoryIds = default(Collection<string>), DateTime createdAt = default(DateTime), string entryGroupId = default(string), string foreignId = default(string), string id = default(string), string label = default(string), string shortcuts = default(string), Collection<string> sourceIds = default(Collection<string>), DateTime updatedAt = default(DateTime), Collection<string> versionIds = default(Collection<string>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for ReplyAssistantEntry and cannot be null");;
            this.CategoryIds = categoryIds;
            this.CreatedAt = createdAt;
            this.EntryGroupId = entryGroupId;
            this.ForeignId = foreignId;
            this.Label = label;
            this.Shortcuts = shortcuts;
            this.SourceIds = sourceIds;
            this.UpdatedAt = updatedAt;
            this.VersionIds = versionIds;
        }
        
        /// <summary>
        /// Gets or Sets CategoryIds
        /// </summary>
        [DataMember(Name="category_ids", EmitDefaultValue=false)]
        public Collection<string> CategoryIds { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets EntryGroupId
        /// </summary>
        [DataMember(Name="entry_group_id", EmitDefaultValue=false)]
        public string EntryGroupId { get; set; }

        /// <summary>
        /// Gets or Sets ForeignId
        /// </summary>
        [DataMember(Name="foreign_id", EmitDefaultValue=false)]
        public string ForeignId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Shortcuts
        /// </summary>
        [DataMember(Name="shortcuts", EmitDefaultValue=false)]
        public string Shortcuts { get; set; }

        /// <summary>
        /// Gets or Sets SourceIds
        /// </summary>
        [DataMember(Name="source_ids", EmitDefaultValue=false)]
        public Collection<string> SourceIds { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets VersionIds
        /// </summary>
        [DataMember(Name="version_ids", EmitDefaultValue=false)]
        public Collection<string> VersionIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplyAssistantEntry {\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EntryGroupId: ").Append(EntryGroupId).Append("\n");
            sb.Append("  ForeignId: ").Append(ForeignId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Shortcuts: ").Append(Shortcuts).Append("\n");
            sb.Append("  SourceIds: ").Append(SourceIds).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VersionIds: ").Append(VersionIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplyAssistantEntry);
        }

        /// <summary>
        /// Returns true if ReplyAssistantEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplyAssistantEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplyAssistantEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EntryGroupId == input.EntryGroupId ||
                    (this.EntryGroupId != null &&
                    this.EntryGroupId.Equals(input.EntryGroupId))
                ) && 
                (
                    this.ForeignId == input.ForeignId ||
                    (this.ForeignId != null &&
                    this.ForeignId.Equals(input.ForeignId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Shortcuts == input.Shortcuts ||
                    (this.Shortcuts != null &&
                    this.Shortcuts.Equals(input.Shortcuts))
                ) && 
                (
                    this.SourceIds == input.SourceIds ||
                    this.SourceIds != null &&
                    input.SourceIds != null &&
                    this.SourceIds.SequenceEqual(input.SourceIds)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.VersionIds == input.VersionIds ||
                    this.VersionIds != null &&
                    input.VersionIds != null &&
                    this.VersionIds.SequenceEqual(input.VersionIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryIds != null)
                    hashCode = hashCode * 59 + this.CategoryIds.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.EntryGroupId != null)
                    hashCode = hashCode * 59 + this.EntryGroupId.GetHashCode();
                if (this.ForeignId != null)
                    hashCode = hashCode * 59 + this.ForeignId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Shortcuts != null)
                    hashCode = hashCode * 59 + this.Shortcuts.GetHashCode();
                if (this.SourceIds != null)
                    hashCode = hashCode * 59 + this.SourceIds.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.VersionIds != null)
                    hashCode = hashCode * 59 + this.VersionIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
