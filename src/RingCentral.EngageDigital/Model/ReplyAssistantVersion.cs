/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = RingCentral.EngageDigital.Client.SwaggerDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// ReplyAssistantVersion
    /// </summary>
    [DataContract]
        public partial class ReplyAssistantVersion :  IEquatable<ReplyAssistantVersion>
    {
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FormatEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 0,
            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 1        }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersion" /> class.
        /// </summary>
        /// <param name="attachmentsCount">attachmentsCount.</param>
        /// <param name="body">body.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="entryId">entryId.</param>
        /// <param name="format">format.</param>
        /// <param name="id">id (required).</param>
        /// <param name="language">language.</param>
        /// <param name="sourceIds">sourceIds.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public ReplyAssistantVersion(int? attachmentsCount = default(int?), string body = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), string entryId = default(string), FormatEnum? format = default(FormatEnum?), string id = default(string), string language = default(string), List<string> sourceIds = default(List<string>), DateTimeOffset? updatedAt = default(DateTimeOffset?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ReplyAssistantVersion and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.AttachmentsCount = attachmentsCount;
            this.Body = body;
            this.CreatedAt = createdAt;
            this.EntryId = entryId;
            this.Format = format;
            this.Language = language;
            this.SourceIds = sourceIds;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets AttachmentsCount
        /// </summary>
        [DataMember(Name="attachments_count", EmitDefaultValue=false)]
        public int? AttachmentsCount { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets EntryId
        /// </summary>
        [DataMember(Name="entry_id", EmitDefaultValue=false)]
        public string EntryId { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets SourceIds
        /// </summary>
        [DataMember(Name="source_ids", EmitDefaultValue=false)]
        public List<string> SourceIds { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplyAssistantVersion {\n");
            sb.Append("  AttachmentsCount: ").Append(AttachmentsCount).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EntryId: ").Append(EntryId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  SourceIds: ").Append(SourceIds).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplyAssistantVersion);
        }

        /// <summary>
        /// Returns true if ReplyAssistantVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplyAssistantVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplyAssistantVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentsCount == input.AttachmentsCount ||
                    (this.AttachmentsCount != null &&
                    this.AttachmentsCount.Equals(input.AttachmentsCount))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EntryId == input.EntryId ||
                    (this.EntryId != null &&
                    this.EntryId.Equals(input.EntryId))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.SourceIds == input.SourceIds ||
                    this.SourceIds != null &&
                    input.SourceIds != null &&
                    this.SourceIds.SequenceEqual(input.SourceIds)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentsCount != null)
                    hashCode = hashCode * 59 + this.AttachmentsCount.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.EntryId != null)
                    hashCode = hashCode * 59 + this.EntryId.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.SourceIds != null)
                    hashCode = hashCode * 59 + this.SourceIds.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }
    }
}
