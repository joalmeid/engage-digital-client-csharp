/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RingCentral.EngageDigital.Client.OpenAPIDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// Webhook
    /// </summary>
    [DataContract]
    public partial class Webhook :  IEquatable<Webhook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Webhook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="apiAccessToken">apiAccessToken.</param>
        /// <param name="id">id (required).</param>
        /// <param name="registeredEvents">registeredEvents.</param>
        /// <param name="stagingUse">stagingUse.</param>
        /// <param name="url">url.</param>
        /// <param name="verifyToken">verifyToken.</param>
        public Webhook(bool active = default(bool), WebhookAccessToken apiAccessToken = default(WebhookAccessToken), string id = default(string), Collection<string> registeredEvents = default(Collection<string>), bool stagingUse = default(bool), string url = default(string), string verifyToken = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Webhook and cannot be null");;
            this.Active = active;
            this.ApiAccessToken = apiAccessToken;
            this.RegisteredEvents = registeredEvents;
            this.StagingUse = stagingUse;
            this.Url = url;
            this.VerifyToken = verifyToken;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets ApiAccessToken
        /// </summary>
        [DataMember(Name="api_access_token", EmitDefaultValue=false)]
        public WebhookAccessToken ApiAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredEvents
        /// </summary>
        [DataMember(Name="registered_events", EmitDefaultValue=false)]
        public Collection<string> RegisteredEvents { get; set; }

        /// <summary>
        /// Gets or Sets StagingUse
        /// </summary>
        [DataMember(Name="staging_use", EmitDefaultValue=false)]
        public bool StagingUse { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets VerifyToken
        /// </summary>
        [DataMember(Name="verify_token", EmitDefaultValue=false)]
        public string VerifyToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ApiAccessToken: ").Append(ApiAccessToken).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RegisteredEvents: ").Append(RegisteredEvents).Append("\n");
            sb.Append("  StagingUse: ").Append(StagingUse).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VerifyToken: ").Append(VerifyToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.ApiAccessToken == input.ApiAccessToken ||
                    (this.ApiAccessToken != null &&
                    this.ApiAccessToken.Equals(input.ApiAccessToken))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RegisteredEvents == input.RegisteredEvents ||
                    this.RegisteredEvents != null &&
                    input.RegisteredEvents != null &&
                    this.RegisteredEvents.SequenceEqual(input.RegisteredEvents)
                ) && 
                (
                    this.StagingUse == input.StagingUse ||
                    this.StagingUse.Equals(input.StagingUse)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.VerifyToken == input.VerifyToken ||
                    (this.VerifyToken != null &&
                    this.VerifyToken.Equals(input.VerifyToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ApiAccessToken != null)
                    hashCode = hashCode * 59 + this.ApiAccessToken.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RegisteredEvents != null)
                    hashCode = hashCode * 59 + this.RegisteredEvents.GetHashCode();
                hashCode = hashCode * 59 + this.StagingUse.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.VerifyToken != null)
                    hashCode = hashCode * 59 + this.VerifyToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
