/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = RingCentral.EngageDigital.Client.SwaggerDateConverter;

namespace RingCentral.EngageDigital.Model
{
    /// <summary>
    /// Source
    /// </summary>
    [DataContract]
        public partial class Source :  IEquatable<Source>
    {
        /// <summary>
        /// SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;)
        /// </summary>
        /// <value>SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SlaExpiredStrategyEnum
        {
            /// <summary>
            /// Enum Max for value: max
            /// </summary>
            [EnumMember(Value = "max")]
            Max = 0,
            /// <summary>
            /// Enum Half for value: half
            /// </summary>
            [EnumMember(Value = "half")]
            Half = 1,
            /// <summary>
            /// Enum Base for value: base
            /// </summary>
            [EnumMember(Value = "base")]
            Base = 2        }
        /// <summary>
        /// SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;)
        /// </summary>
        /// <value>SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;)</value>
        [DataMember(Name="sla_expired_strategy", EmitDefaultValue=false)]
        public SlaExpiredStrategyEnum? SlaExpiredStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Source" /> class.
        /// </summary>
        /// <param name="active">Activate/deactivate the source.</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean).</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="color">Color of the icon: Default: 0 Blue: 1 Green: 2 Turquoise: 3 Purple: 4 Yellow: 5 Orange: 6 Red: 7 Asphalt: 8 Grey: 9.</param>
        /// <param name="communityId">communityId.</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean).</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds).</param>
        /// <param name="contentLanguages">contentLanguages.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="defaultCategoryIds">Default categories.</param>
        /// <param name="defaultContentLanguage">Default content language.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="hiddenFromStats">Hide from statistics.</param>
        /// <param name="id">id.</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention.</param>
        /// <param name="name">Source name.</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;).</param>
        /// <param name="slaResponse">Response time (seconds).</param>
        /// <param name="status">status.</param>
        /// <param name="timeSheetIds">timeSheetIds.</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages).</param>
        public Source(bool? active = default(bool?), bool? autoDetectContentLanguage = default(bool?), string channelId = default(string), int? color = default(int?), string communityId = default(string), bool? contentArchiving = default(bool?), long? contentArchivingPeriod = default(long?), List<string> contentLanguages = default(List<string>), DateTimeOffset? createdAt = default(DateTimeOffset?), List<string> defaultCategoryIds = default(List<string>), string defaultContentLanguage = default(string), string errorMessage = default(string), bool? hiddenFromStats = default(bool?), string id = default(string), int? interventionMessagesBoost = default(int?), string name = default(string), SlaExpiredStrategyEnum? slaExpiredStrategy = default(SlaExpiredStrategyEnum?), int? slaResponse = default(int?), string status = default(string), List<string> timeSheetIds = default(List<string>), int? transferredTasksBoost = default(int?), string type = default(string), DateTimeOffset? updatedAt = default(DateTimeOffset?), List<string> userThreadDefaultCategoryIds = default(List<string>))
        {
            this.Active = active;
            this.AutoDetectContentLanguage = autoDetectContentLanguage;
            this.ChannelId = channelId;
            this.Color = color;
            this.CommunityId = communityId;
            this.ContentArchiving = contentArchiving;
            this.ContentArchivingPeriod = contentArchivingPeriod;
            this.ContentLanguages = contentLanguages;
            this.CreatedAt = createdAt;
            this.DefaultCategoryIds = defaultCategoryIds;
            this.DefaultContentLanguage = defaultContentLanguage;
            this.ErrorMessage = errorMessage;
            this.HiddenFromStats = hiddenFromStats;
            this.Id = id;
            this.InterventionMessagesBoost = interventionMessagesBoost;
            this.Name = name;
            this.SlaExpiredStrategy = slaExpiredStrategy;
            this.SlaResponse = slaResponse;
            this.Status = status;
            this.TimeSheetIds = timeSheetIds;
            this.TransferredTasksBoost = transferredTasksBoost;
            this.Type = type;
            this.UpdatedAt = updatedAt;
            this.UserThreadDefaultCategoryIds = userThreadDefaultCategoryIds;
        }
        
        /// <summary>
        /// Activate/deactivate the source
        /// </summary>
        /// <value>Activate/deactivate the source</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Auto-detect content language (Boolean)
        /// </summary>
        /// <value>Auto-detect content language (Boolean)</value>
        [DataMember(Name="auto_detect_content_language", EmitDefaultValue=false)]
        public bool? AutoDetectContentLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Color of the icon: Default: 0 Blue: 1 Green: 2 Turquoise: 3 Purple: 4 Yellow: 5 Orange: 6 Red: 7 Asphalt: 8 Grey: 9
        /// </summary>
        /// <value>Color of the icon: Default: 0 Blue: 1 Green: 2 Turquoise: 3 Purple: 4 Yellow: 5 Orange: 6 Red: 7 Asphalt: 8 Grey: 9</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public int? Color { get; set; }

        /// <summary>
        /// Gets or Sets CommunityId
        /// </summary>
        [DataMember(Name="community_id", EmitDefaultValue=false)]
        public string CommunityId { get; set; }

        /// <summary>
        /// Automatic archiving of old contents (Boolean)
        /// </summary>
        /// <value>Automatic archiving of old contents (Boolean)</value>
        [DataMember(Name="content_archiving", EmitDefaultValue=false)]
        public bool? ContentArchiving { get; set; }

        /// <summary>
        /// Archive contents older than (seconds)
        /// </summary>
        /// <value>Archive contents older than (seconds)</value>
        [DataMember(Name="content_archiving_period", EmitDefaultValue=false)]
        public long? ContentArchivingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ContentLanguages
        /// </summary>
        [DataMember(Name="content_languages", EmitDefaultValue=false)]
        public List<string> ContentLanguages { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Default categories
        /// </summary>
        /// <value>Default categories</value>
        [DataMember(Name="default_category_ids", EmitDefaultValue=false)]
        public List<string> DefaultCategoryIds { get; set; }

        /// <summary>
        /// Default content language
        /// </summary>
        /// <value>Default content language</value>
        [DataMember(Name="default_content_language", EmitDefaultValue=false)]
        public string DefaultContentLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Hide from statistics
        /// </summary>
        /// <value>Hide from statistics</value>
        [DataMember(Name="hidden_from_stats", EmitDefaultValue=false)]
        public bool? HiddenFromStats { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Priority boost of messages with intervention
        /// </summary>
        /// <value>Priority boost of messages with intervention</value>
        [DataMember(Name="intervention_messages_boost", EmitDefaultValue=false)]
        public int? InterventionMessagesBoost { get; set; }

        /// <summary>
        /// Source name
        /// </summary>
        /// <value>Source name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Response time (seconds)
        /// </summary>
        /// <value>Response time (seconds)</value>
        [DataMember(Name="sla_response", EmitDefaultValue=false)]
        public int? SlaResponse { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TimeSheetIds
        /// </summary>
        [DataMember(Name="time_sheet_ids", EmitDefaultValue=false)]
        public List<string> TimeSheetIds { get; set; }

        /// <summary>
        /// Priority boost of transferred tasks
        /// </summary>
        /// <value>Priority boost of transferred tasks</value>
        [DataMember(Name="transferred_tasks_boost", EmitDefaultValue=false)]
        public int? TransferredTasksBoost { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Default categories (agent messages)
        /// </summary>
        /// <value>Default categories (agent messages)</value>
        [DataMember(Name="user_thread_default_category_ids", EmitDefaultValue=false)]
        public List<string> UserThreadDefaultCategoryIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Source {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AutoDetectContentLanguage: ").Append(AutoDetectContentLanguage).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CommunityId: ").Append(CommunityId).Append("\n");
            sb.Append("  ContentArchiving: ").Append(ContentArchiving).Append("\n");
            sb.Append("  ContentArchivingPeriod: ").Append(ContentArchivingPeriod).Append("\n");
            sb.Append("  ContentLanguages: ").Append(ContentLanguages).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DefaultCategoryIds: ").Append(DefaultCategoryIds).Append("\n");
            sb.Append("  DefaultContentLanguage: ").Append(DefaultContentLanguage).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  HiddenFromStats: ").Append(HiddenFromStats).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterventionMessagesBoost: ").Append(InterventionMessagesBoost).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SlaExpiredStrategy: ").Append(SlaExpiredStrategy).Append("\n");
            sb.Append("  SlaResponse: ").Append(SlaResponse).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeSheetIds: ").Append(TimeSheetIds).Append("\n");
            sb.Append("  TransferredTasksBoost: ").Append(TransferredTasksBoost).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserThreadDefaultCategoryIds: ").Append(UserThreadDefaultCategoryIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Source);
        }

        /// <summary>
        /// Returns true if Source instances are equal
        /// </summary>
        /// <param name="input">Instance of Source to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Source input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AutoDetectContentLanguage == input.AutoDetectContentLanguage ||
                    (this.AutoDetectContentLanguage != null &&
                    this.AutoDetectContentLanguage.Equals(input.AutoDetectContentLanguage))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.CommunityId == input.CommunityId ||
                    (this.CommunityId != null &&
                    this.CommunityId.Equals(input.CommunityId))
                ) && 
                (
                    this.ContentArchiving == input.ContentArchiving ||
                    (this.ContentArchiving != null &&
                    this.ContentArchiving.Equals(input.ContentArchiving))
                ) && 
                (
                    this.ContentArchivingPeriod == input.ContentArchivingPeriod ||
                    (this.ContentArchivingPeriod != null &&
                    this.ContentArchivingPeriod.Equals(input.ContentArchivingPeriod))
                ) && 
                (
                    this.ContentLanguages == input.ContentLanguages ||
                    this.ContentLanguages != null &&
                    input.ContentLanguages != null &&
                    this.ContentLanguages.SequenceEqual(input.ContentLanguages)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DefaultCategoryIds == input.DefaultCategoryIds ||
                    this.DefaultCategoryIds != null &&
                    input.DefaultCategoryIds != null &&
                    this.DefaultCategoryIds.SequenceEqual(input.DefaultCategoryIds)
                ) && 
                (
                    this.DefaultContentLanguage == input.DefaultContentLanguage ||
                    (this.DefaultContentLanguage != null &&
                    this.DefaultContentLanguage.Equals(input.DefaultContentLanguage))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.HiddenFromStats == input.HiddenFromStats ||
                    (this.HiddenFromStats != null &&
                    this.HiddenFromStats.Equals(input.HiddenFromStats))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InterventionMessagesBoost == input.InterventionMessagesBoost ||
                    (this.InterventionMessagesBoost != null &&
                    this.InterventionMessagesBoost.Equals(input.InterventionMessagesBoost))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SlaExpiredStrategy == input.SlaExpiredStrategy ||
                    (this.SlaExpiredStrategy != null &&
                    this.SlaExpiredStrategy.Equals(input.SlaExpiredStrategy))
                ) && 
                (
                    this.SlaResponse == input.SlaResponse ||
                    (this.SlaResponse != null &&
                    this.SlaResponse.Equals(input.SlaResponse))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TimeSheetIds == input.TimeSheetIds ||
                    this.TimeSheetIds != null &&
                    input.TimeSheetIds != null &&
                    this.TimeSheetIds.SequenceEqual(input.TimeSheetIds)
                ) && 
                (
                    this.TransferredTasksBoost == input.TransferredTasksBoost ||
                    (this.TransferredTasksBoost != null &&
                    this.TransferredTasksBoost.Equals(input.TransferredTasksBoost))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserThreadDefaultCategoryIds == input.UserThreadDefaultCategoryIds ||
                    this.UserThreadDefaultCategoryIds != null &&
                    input.UserThreadDefaultCategoryIds != null &&
                    this.UserThreadDefaultCategoryIds.SequenceEqual(input.UserThreadDefaultCategoryIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AutoDetectContentLanguage != null)
                    hashCode = hashCode * 59 + this.AutoDetectContentLanguage.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.CommunityId != null)
                    hashCode = hashCode * 59 + this.CommunityId.GetHashCode();
                if (this.ContentArchiving != null)
                    hashCode = hashCode * 59 + this.ContentArchiving.GetHashCode();
                if (this.ContentArchivingPeriod != null)
                    hashCode = hashCode * 59 + this.ContentArchivingPeriod.GetHashCode();
                if (this.ContentLanguages != null)
                    hashCode = hashCode * 59 + this.ContentLanguages.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DefaultCategoryIds != null)
                    hashCode = hashCode * 59 + this.DefaultCategoryIds.GetHashCode();
                if (this.DefaultContentLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultContentLanguage.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.HiddenFromStats != null)
                    hashCode = hashCode * 59 + this.HiddenFromStats.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InterventionMessagesBoost != null)
                    hashCode = hashCode * 59 + this.InterventionMessagesBoost.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SlaExpiredStrategy != null)
                    hashCode = hashCode * 59 + this.SlaExpiredStrategy.GetHashCode();
                if (this.SlaResponse != null)
                    hashCode = hashCode * 59 + this.SlaResponse.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TimeSheetIds != null)
                    hashCode = hashCode * 59 + this.TimeSheetIds.GetHashCode();
                if (this.TransferredTasksBoost != null)
                    hashCode = hashCode * 59 + this.TransferredTasksBoost.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserThreadDefaultCategoryIds != null)
                    hashCode = hashCode * 59 + this.UserThreadDefaultCategoryIds.GetHashCode();
                return hashCode;
            }
        }
    }
}
