/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a team
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Team</returns>
        Team CreateTeam (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));

        /// <summary>
        /// Creating a team
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> CreateTeamWithHttpInfo (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));
        /// <summary>
        /// Deleting a team
        /// </summary>
        /// <remarks>
        /// This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Team</returns>
        Team DeleteTeam (string teamId, string takeOverCategoryId = default(string));

        /// <summary>
        /// Deleting a team
        /// </summary>
        /// <remarks>
        /// This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> DeleteTeamWithHttpInfo (string teamId, string takeOverCategoryId = default(string));
        /// <summary>
        /// Getting all teams
        /// </summary>
        /// <remarks>
        /// This method renders teams ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTeamsResponse</returns>
        GetAllTeamsResponse GetAllTeams (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all teams
        /// </summary>
        /// <remarks>
        /// This method renders teams ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTeamsResponse</returns>
        ApiResponse<GetAllTeamsResponse> GetAllTeamsWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a team from its id
        /// </summary>
        /// <remarks>
        /// This method renders a team from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Team</returns>
        Team GetTeam (string teamId);

        /// <summary>
        /// Getting a team from its id
        /// </summary>
        /// <remarks>
        /// This method renders a team from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeamWithHttpInfo (string teamId);
        /// <summary>
        /// Updating a team
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Team</returns>
        Team UpdateTeam (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));

        /// <summary>
        /// Updating a team
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> UpdateTeamWithHttpInfo (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a team
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> CreateTeamAsync (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));

        /// <summary>
        /// Creating a team
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> CreateTeamAsyncWithHttpInfo (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));
        /// <summary>
        /// Deleting a team
        /// </summary>
        /// <remarks>
        /// This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> DeleteTeamAsync (string teamId, string takeOverCategoryId = default(string));

        /// <summary>
        /// Deleting a team
        /// </summary>
        /// <remarks>
        /// This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> DeleteTeamAsyncWithHttpInfo (string teamId, string takeOverCategoryId = default(string));
        /// <summary>
        /// Getting all teams
        /// </summary>
        /// <remarks>
        /// This method renders teams ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTeamsResponse</returns>
        System.Threading.Tasks.Task<GetAllTeamsResponse> GetAllTeamsAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all teams
        /// </summary>
        /// <remarks>
        /// This method renders teams ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTeamsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTeamsResponse>> GetAllTeamsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a team from its id
        /// </summary>
        /// <remarks>
        /// This method renders a team from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeamAsync (string teamId);

        /// <summary>
        /// Getting a team from its id
        /// </summary>
        /// <remarks>
        /// This method renders a team from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Updating a team
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> UpdateTeamAsync (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));

        /// <summary>
        /// Updating a team
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> UpdateTeamAsyncWithHttpInfo (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : ITeamsApiSync, ITeamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a team This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Team</returns>
        public Team CreateTeam (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = CreateTeamWithHttpInfo(name, leaderIds, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a team This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Team > CreateTeamWithHttpInfo (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (leaderIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "leader_ids[]", leaderIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "user_ids[]", userIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< Team >("/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a team This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> CreateTeamAsync (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = await CreateTeamAsyncWithHttpInfo(name, leaderIds, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a team This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Team>> CreateTeamAsyncWithHttpInfo (string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (leaderIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "leader_ids[]", leaderIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "user_ids[]", userIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Team>("/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a team This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Team</returns>
        public Team DeleteTeam (string teamId, string takeOverCategoryId = default(string))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = DeleteTeamWithHttpInfo(teamId, takeOverCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a team This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Team > DeleteTeamWithHttpInfo (string teamId, string takeOverCategoryId = default(string))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteTeam");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                localVarRequestOptions.PathParameters.Add("teamId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (takeOverCategoryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "take_over_category_id", takeOverCategoryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete< Team >("/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a team This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> DeleteTeamAsync (string teamId, string takeOverCategoryId = default(string))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = await DeleteTeamAsyncWithHttpInfo(teamId, takeOverCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a team This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Team>> DeleteTeamAsyncWithHttpInfo (string teamId, string takeOverCategoryId = default(string))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->DeleteTeam");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamId != null)
                localVarRequestOptions.PathParameters.Add("teamId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (takeOverCategoryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "take_over_category_id", takeOverCategoryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Team>("/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all teams This method renders teams ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTeamsResponse</returns>
        public GetAllTeamsResponse GetAllTeams (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllTeamsResponse> localVarResponse = GetAllTeamsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all teams This method renders teams ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTeamsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllTeamsResponse > GetAllTeamsWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllTeamsResponse >("/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all teams This method renders teams ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTeamsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTeamsResponse> GetAllTeamsAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllTeamsResponse> localVarResponse = await GetAllTeamsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all teams This method renders teams ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTeamsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllTeamsResponse>> GetAllTeamsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllTeamsResponse>("/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a team from its id This method renders a team from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Team</returns>
        public Team GetTeam (string teamId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = GetTeamWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a team from its id This method renders a team from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>ApiResponse of Team</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Team > GetTeamWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetTeam");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                localVarRequestOptions.PathParameters.Add("teamId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Team >("/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a team from its id This method renders a team from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeamAsync (string teamId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = await GetTeamAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a team from its id This method renders a team from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Team>> GetTeamAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->GetTeam");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamId != null)
                localVarRequestOptions.PathParameters.Add("teamId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Team>("/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a team This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Team</returns>
        public Team UpdateTeam (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = UpdateTeamWithHttpInfo(teamId, name, leaderIds, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a team This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Team > UpdateTeamWithHttpInfo (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateTeam");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                localVarRequestOptions.PathParameters.Add("teamId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (leaderIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "leader_ids[]", leaderIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "user_ids[]", userIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< Team >("/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a team This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> UpdateTeamAsync (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Team> localVarResponse = await UpdateTeamAsyncWithHttpInfo(teamId, name, leaderIds, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a team This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="name">Team name. (optional)</param>
        /// <param name="leaderIds">List of user id as leaders (optional)</param>
        /// <param name="userIds">List of user id as team members. (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Team>> UpdateTeamAsyncWithHttpInfo (string teamId, string name = default(string), Collection<string> leaderIds = default(Collection<string>), Collection<string> userIds = default(Collection<string>))
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UpdateTeam");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (teamId != null)
                localVarRequestOptions.PathParameters.Add("teamId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (leaderIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "leader_ids[]", leaderIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "user_ids[]", userIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Team>("/teams/{teamId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTeam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
