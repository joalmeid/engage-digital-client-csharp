/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Tag</returns>
        Tag CreateTag (string name);

        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> CreateTagWithHttpInfo (string name);
        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        Tag DeleteTag (string tagId);

        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> DeleteTagWithHttpInfo (string tagId);
        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTagsResponse</returns>
        GetAllTagsResponse GetAllTags (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTagsResponse</returns>
        ApiResponse<GetAllTagsResponse> GetAllTagsWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        Tag GetTag (string tagId);

        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> GetTagWithHttpInfo (string tagId);
        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Tag</returns>
        Tag UpdateTag (string tagId, string name);

        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> UpdateTagWithHttpInfo (string tagId, string name);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> CreateTagAsync (string name);

        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTagAsyncWithHttpInfo (string name);
        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> DeleteTagAsync (string tagId);

        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> DeleteTagAsyncWithHttpInfo (string tagId);
        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTagsResponse</returns>
        System.Threading.Tasks.Task<GetAllTagsResponse> GetAllTagsAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTagsResponse>> GetAllTagsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> GetTagAsync (string tagId);

        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> GetTagAsyncWithHttpInfo (string tagId);
        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> UpdateTagAsync (string tagId, string name);

        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> UpdateTagAsyncWithHttpInfo (string tagId, string name);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApi : ITagsApiSync, ITagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagsApi : ITagsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TagsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Tag</returns>
        public Tag CreateTag (string name)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = CreateTagWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>ApiResponse of Tag</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Tag > CreateTagWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'name' when calling TagsApi->CreateTag");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< Tag >("/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> CreateTagAsync (string name)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = await CreateTagAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Tag>> CreateTagAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'name' when calling TagsApi->CreateTag");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Tag>("/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        public Tag DeleteTag (string tagId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = DeleteTagWithHttpInfo(tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Tag > DeleteTagWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->DeleteTag");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tagId != null)
                localVarRequestOptions.PathParameters.Add("tagId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(tagId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< Tag >("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> DeleteTagAsync (string tagId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = await DeleteTagAsyncWithHttpInfo(tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Tag>> DeleteTagAsyncWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->DeleteTag");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tagId != null)
                localVarRequestOptions.PathParameters.Add("tagId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(tagId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Tag>("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTagsResponse</returns>
        public GetAllTagsResponse GetAllTags (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllTagsResponse> localVarResponse = GetAllTagsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTagsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllTagsResponse > GetAllTagsWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllTagsResponse >("/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTagsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTagsResponse> GetAllTagsAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllTagsResponse> localVarResponse = await GetAllTagsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTagsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllTagsResponse>> GetAllTagsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllTagsResponse>("/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        public Tag GetTag (string tagId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = GetTagWithHttpInfo(tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Tag > GetTagWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->GetTag");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tagId != null)
                localVarRequestOptions.PathParameters.Add("tagId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(tagId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Tag >("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> GetTagAsync (string tagId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = await GetTagAsyncWithHttpInfo(tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Tag>> GetTagAsyncWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->GetTag");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tagId != null)
                localVarRequestOptions.PathParameters.Add("tagId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(tagId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tag>("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Tag</returns>
        public Tag UpdateTag (string tagId, string name)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = UpdateTagWithHttpInfo(tagId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>ApiResponse of Tag</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Tag > UpdateTagWithHttpInfo (string tagId, string name)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->UpdateTag");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'name' when calling TagsApi->UpdateTag");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tagId != null)
                localVarRequestOptions.PathParameters.Add("tagId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< Tag >("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> UpdateTagAsync (string tagId, string name)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Tag> localVarResponse = await UpdateTagAsyncWithHttpInfo(tagId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Tag>> UpdateTagAsyncWithHttpInfo (string tagId, string name)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->UpdateTag");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'name' when calling TagsApi->UpdateTag");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tagId != null)
                localVarRequestOptions.PathParameters.Add("tagId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Tag>("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
