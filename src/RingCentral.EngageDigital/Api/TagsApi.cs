/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ITagsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Tag</returns>
        Tag CreateTag (string name);

        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> CreateTagWithHttpInfo (string name);
        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        Tag DeleteTag (string tagId);

        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> DeleteTagWithHttpInfo (string tagId);
        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTagsResponse</returns>
        GetAllTagsResponse GetAllTags (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTagsResponse</returns>
        ApiResponse<GetAllTagsResponse> GetAllTagsWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        Tag GetTag (string tagId);

        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> GetTagWithHttpInfo (string tagId);
        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Tag</returns>
        Tag UpdateTag (string tagId, string name);

        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> UpdateTagWithHttpInfo (string tagId, string name);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> CreateTagAsync (string name);

        /// <summary>
        /// Creating a tag
        /// </summary>
        /// <remarks>
        /// This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTagAsyncWithHttpInfo (string name);
        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> DeleteTagAsync (string tagId);

        /// <summary>
        /// Deleting a tag
        /// </summary>
        /// <remarks>
        /// This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> DeleteTagAsyncWithHttpInfo (string tagId);
        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTagsResponse</returns>
        System.Threading.Tasks.Task<GetAllTagsResponse> GetAllTagsAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all tags
        /// </summary>
        /// <remarks>
        /// This method renders tags ordered by name (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTagsResponse>> GetAllTagsAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> GetTagAsync (string tagId);

        /// <summary>
        /// Getting a tag from its id
        /// </summary>
        /// <remarks>
        /// This method renders a tag from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> GetTagAsyncWithHttpInfo (string tagId);
        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> UpdateTagAsync (string tagId, string name);

        /// <summary>
        /// Updating a tag
        /// </summary>
        /// <remarks>
        /// This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> UpdateTagAsyncWithHttpInfo (string tagId, string name);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class TagsApi : ITagsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TagsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Tag</returns>
        public Tag CreateTag (string name)
        {
             ApiResponse<Tag> localVarResponse = CreateTagWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > CreateTagWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TagsApi->CreateTag");

            var localVarPath = "./tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> CreateTagAsync (string name)
        {
             ApiResponse<Tag> localVarResponse = await CreateTagAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a tag This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Tag name (mandatory).</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTagAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TagsApi->CreateTag");

            var localVarPath = "./tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        public Tag DeleteTag (string tagId)
        {
             ApiResponse<Tag> localVarResponse = DeleteTagWithHttpInfo(tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > DeleteTagWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->DeleteTag");

            var localVarPath = "./tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> DeleteTagAsync (string tagId)
        {
             ApiResponse<Tag> localVarResponse = await DeleteTagAsyncWithHttpInfo(tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a tag This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> DeleteTagAsyncWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->DeleteTag");

            var localVarPath = "./tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTagsResponse</returns>
        public GetAllTagsResponse GetAllTags (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllTagsResponse> localVarResponse = GetAllTagsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTagsResponse</returns>
        public ApiResponse< GetAllTagsResponse > GetAllTagsWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTagsResponse)));
        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTagsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTagsResponse> GetAllTagsAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllTagsResponse> localVarResponse = await GetAllTagsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all tags This method renders tags ordered by name (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTagsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllTagsResponse>> GetAllTagsAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTagsResponse)));
        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Tag</returns>
        public Tag GetTag (string tagId)
        {
             ApiResponse<Tag> localVarResponse = GetTagWithHttpInfo(tagId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > GetTagWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->GetTag");

            var localVarPath = "./tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> GetTagAsync (string tagId)
        {
             ApiResponse<Tag> localVarResponse = await GetTagAsyncWithHttpInfo(tagId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a tag from its id This method renders a tag from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> GetTagAsyncWithHttpInfo (string tagId)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->GetTag");

            var localVarPath = "./tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Tag</returns>
        public Tag UpdateTag (string tagId, string name)
        {
             ApiResponse<Tag> localVarResponse = UpdateTagWithHttpInfo(tagId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > UpdateTagWithHttpInfo (string tagId, string name)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->UpdateTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TagsApi->UpdateTag");

            var localVarPath = "./tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> UpdateTagAsync (string tagId, string name)
        {
             ApiResponse<Tag> localVarResponse = await UpdateTagAsyncWithHttpInfo(tagId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a tag This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId"></param>
        /// <param name="name">Tag’s label.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> UpdateTagAsyncWithHttpInfo (string tagId, string name)
        {
            // verify the required parameter 'tagId' is set
            if (tagId == null)
                throw new ApiException(400, "Missing required parameter 'tagId' when calling TagsApi->UpdateTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TagsApi->UpdateTag");

            var localVarPath = "./tags/{tagId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tagId != null) localVarPathParams.Add("tagId", this.Configuration.ApiClient.ParameterToString(tagId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Tag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
        }

    }
}
