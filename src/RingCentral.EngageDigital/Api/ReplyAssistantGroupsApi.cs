/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IReplyAssistantGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup CreateReplyAssistantGroup (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null);

        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> CreateReplyAssistantGroupWithHttpInfo (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null);
        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup DeleteReplyAssistantGroup (string replyAssistantGroupId);

        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> DeleteReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantGroupsResponse</returns>
        GetAllReplyAssistantGroupsResponse GetAllReplyAssistantGroups (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantGroupsResponse</returns>
        ApiResponse<GetAllReplyAssistantGroupsResponse> GetAllReplyAssistantGroupsWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup GetReplyAssistantGroup (string replyAssistantGroupId);

        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> GetReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup UpdateReplyAssistantGroup (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null);

        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> UpdateReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> CreateReplyAssistantGroupAsync (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null);

        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> CreateReplyAssistantGroupAsyncWithHttpInfo (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null);
        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> DeleteReplyAssistantGroupAsync (string replyAssistantGroupId);

        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> DeleteReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantGroupsResponse</returns>
        System.Threading.Tasks.Task<GetAllReplyAssistantGroupsResponse> GetAllReplyAssistantGroupsAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantGroupsResponse>> GetAllReplyAssistantGroupsAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> GetReplyAssistantGroupAsync (string replyAssistantGroupId);

        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> GetReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> UpdateReplyAssistantGroupAsync (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null);

        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> UpdateReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ReplyAssistantGroupsApi : IReplyAssistantGroupsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantGroupsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantGroupsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplyAssistantGroupsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup CreateReplyAssistantGroup (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = CreateReplyAssistantGroupWithHttpInfo(name, entryIds, autocomplete, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public ApiResponse< ReplyAssistantGroup > CreateReplyAssistantGroupWithHttpInfo (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ReplyAssistantGroupsApi->CreateReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (entryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "entry_ids[]", entryIds)); // query parameter
            if (autocomplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autocomplete", autocomplete)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> CreateReplyAssistantGroupAsync (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = await CreateReplyAssistantGroupAsyncWithHttpInfo(name, entryIds, autocomplete, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> CreateReplyAssistantGroupAsyncWithHttpInfo (string name, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ReplyAssistantGroupsApi->CreateReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (entryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "entry_ids[]", entryIds)); // query parameter
            if (autocomplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autocomplete", autocomplete)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup DeleteReplyAssistantGroup (string replyAssistantGroupId)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = DeleteReplyAssistantGroupWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public ApiResponse< ReplyAssistantGroup > DeleteReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->DeleteReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups/{replyAssistantGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantGroupId != null) localVarPathParams.Add("replyAssistantGroupId", this.Configuration.ApiClient.ParameterToString(replyAssistantGroupId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> DeleteReplyAssistantGroupAsync (string replyAssistantGroupId)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = await DeleteReplyAssistantGroupAsyncWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> DeleteReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->DeleteReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups/{replyAssistantGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantGroupId != null) localVarPathParams.Add("replyAssistantGroupId", this.Configuration.ApiClient.ParameterToString(replyAssistantGroupId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantGroupsResponse</returns>
        public GetAllReplyAssistantGroupsResponse GetAllReplyAssistantGroups (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllReplyAssistantGroupsResponse> localVarResponse = GetAllReplyAssistantGroupsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantGroupsResponse</returns>
        public ApiResponse< GetAllReplyAssistantGroupsResponse > GetAllReplyAssistantGroupsWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./reply_assistant/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReplyAssistantGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllReplyAssistantGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllReplyAssistantGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllReplyAssistantGroupsResponse)));
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantGroupsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllReplyAssistantGroupsResponse> GetAllReplyAssistantGroupsAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllReplyAssistantGroupsResponse> localVarResponse = await GetAllReplyAssistantGroupsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantGroupsResponse>> GetAllReplyAssistantGroupsAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./reply_assistant/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReplyAssistantGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllReplyAssistantGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllReplyAssistantGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllReplyAssistantGroupsResponse)));
        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup GetReplyAssistantGroup (string replyAssistantGroupId)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = GetReplyAssistantGroupWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public ApiResponse< ReplyAssistantGroup > GetReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->GetReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups/{replyAssistantGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantGroupId != null) localVarPathParams.Add("replyAssistantGroupId", this.Configuration.ApiClient.ParameterToString(replyAssistantGroupId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> GetReplyAssistantGroupAsync (string replyAssistantGroupId)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = await GetReplyAssistantGroupAsyncWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> GetReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->GetReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups/{replyAssistantGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantGroupId != null) localVarPathParams.Add("replyAssistantGroupId", this.Configuration.ApiClient.ParameterToString(replyAssistantGroupId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup UpdateReplyAssistantGroup (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = UpdateReplyAssistantGroupWithHttpInfo(replyAssistantGroupId, name, entryIds, autocomplete, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public ApiResponse< ReplyAssistantGroup > UpdateReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->UpdateReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups/{replyAssistantGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantGroupId != null) localVarPathParams.Add("replyAssistantGroupId", this.Configuration.ApiClient.ParameterToString(replyAssistantGroupId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (entryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "entry_ids[]", entryIds)); // query parameter
            if (autocomplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autocomplete", autocomplete)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> UpdateReplyAssistantGroupAsync (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
             ApiResponse<ReplyAssistantGroup> localVarResponse = await UpdateReplyAssistantGroupAsyncWithHttpInfo(replyAssistantGroupId, name, entryIds, autocomplete, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> UpdateReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId, string name = null, List<string> entryIds = null, bool? autocomplete = null, int? position = null)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->UpdateReplyAssistantGroup");

            var localVarPath = "./reply_assistant/groups/{replyAssistantGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantGroupId != null) localVarPathParams.Add("replyAssistantGroupId", this.Configuration.ApiClient.ParameterToString(replyAssistantGroupId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (entryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "entry_ids[]", entryIds)); // query parameter
            if (autocomplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "autocomplete", autocomplete)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplyAssistantGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantGroup)));
        }

    }
}
