/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup CreateReplyAssistantGroup (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));

        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> CreateReplyAssistantGroupWithHttpInfo (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));
        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup DeleteReplyAssistantGroup (string replyAssistantGroupId);

        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> DeleteReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantGroupsResponse</returns>
        GetAllReplyAssistantGroupsResponse GetAllReplyAssistantGroups (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantGroupsResponse</returns>
        ApiResponse<GetAllReplyAssistantGroupsResponse> GetAllReplyAssistantGroupsWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup GetReplyAssistantGroup (string replyAssistantGroupId);

        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> GetReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        ReplyAssistantGroup UpdateReplyAssistantGroup (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));

        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        ApiResponse<ReplyAssistantGroup> UpdateReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> CreateReplyAssistantGroupAsync (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));

        /// <summary>
        /// Creating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> CreateReplyAssistantGroupAsyncWithHttpInfo (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));
        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> DeleteReplyAssistantGroupAsync (string replyAssistantGroupId);

        /// <summary>
        /// Deleting a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> DeleteReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantGroupsResponse</returns>
        System.Threading.Tasks.Task<GetAllReplyAssistantGroupsResponse> GetAllReplyAssistantGroupsAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups
        /// </summary>
        /// <remarks>
        /// This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantGroupsResponse>> GetAllReplyAssistantGroupsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> GetReplyAssistantGroupAsync (string replyAssistantGroupId);

        /// <summary>
        /// Getting a reply assistant group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> GetReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId);
        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        System.Threading.Tasks.Task<ReplyAssistantGroup> UpdateReplyAssistantGroupAsync (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));

        /// <summary>
        /// Updating a reply assistant group
        /// </summary>
        /// <remarks>
        /// This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantGroup>> UpdateReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantGroupsApi : IReplyAssistantGroupsApiSync, IReplyAssistantGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplyAssistantGroupsApi : IReplyAssistantGroupsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantGroupsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantGroupsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplyAssistantGroupsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReplyAssistantGroupsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup CreateReplyAssistantGroup (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = CreateReplyAssistantGroupWithHttpInfo(name, entryIds, autocomplete, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantGroup > CreateReplyAssistantGroupWithHttpInfo (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'name' when calling ReplyAssistantGroupsApi->CreateReplyAssistantGroup");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "entry_ids[]", entryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (autocomplete != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "autocomplete", autocomplete))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< ReplyAssistantGroup >("/reply_assistant/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> CreateReplyAssistantGroupAsync (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = await CreateReplyAssistantGroupAsyncWithHttpInfo(name, entryIds, autocomplete, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a reply assistant group This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the group.</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup>> CreateReplyAssistantGroupAsyncWithHttpInfo (string name, Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'name' when calling ReplyAssistantGroupsApi->CreateReplyAssistantGroup");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "entry_ids[]", entryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (autocomplete != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "autocomplete", autocomplete))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReplyAssistantGroup>("/reply_assistant/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup DeleteReplyAssistantGroup (string replyAssistantGroupId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = DeleteReplyAssistantGroupWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantGroup > DeleteReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->DeleteReplyAssistantGroup");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantGroupId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantGroupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< ReplyAssistantGroup >("/reply_assistant/groups/{replyAssistantGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> DeleteReplyAssistantGroupAsync (string replyAssistantGroupId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = await DeleteReplyAssistantGroupAsyncWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a reply assistant group This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup>> DeleteReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->DeleteReplyAssistantGroup");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (replyAssistantGroupId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantGroupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ReplyAssistantGroup>("/reply_assistant/groups/{replyAssistantGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantGroupsResponse</returns>
        public GetAllReplyAssistantGroupsResponse GetAllReplyAssistantGroups (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllReplyAssistantGroupsResponse> localVarResponse = GetAllReplyAssistantGroupsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantGroupsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllReplyAssistantGroupsResponse > GetAllReplyAssistantGroupsWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllReplyAssistantGroupsResponse >("/reply_assistant/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReplyAssistantGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantGroupsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllReplyAssistantGroupsResponse> GetAllReplyAssistantGroupsAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllReplyAssistantGroupsResponse> localVarResponse = await GetAllReplyAssistantGroupsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant groups This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllReplyAssistantGroupsResponse>> GetAllReplyAssistantGroupsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllReplyAssistantGroupsResponse>("/reply_assistant/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReplyAssistantGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup GetReplyAssistantGroup (string replyAssistantGroupId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = GetReplyAssistantGroupWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantGroup > GetReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->GetReplyAssistantGroup");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantGroupId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantGroupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< ReplyAssistantGroup >("/reply_assistant/groups/{replyAssistantGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> GetReplyAssistantGroupAsync (string replyAssistantGroupId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = await GetReplyAssistantGroupAsyncWithHttpInfo(replyAssistantGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a reply assistant group from its id This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup>> GetReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId)
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->GetReplyAssistantGroup");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (replyAssistantGroupId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantGroupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ReplyAssistantGroup>("/reply_assistant/groups/{replyAssistantGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ReplyAssistantGroup</returns>
        public ReplyAssistantGroup UpdateReplyAssistantGroup (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = UpdateReplyAssistantGroupWithHttpInfo(replyAssistantGroupId, name, entryIds, autocomplete, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantGroup</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantGroup > UpdateReplyAssistantGroupWithHttpInfo (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->UpdateReplyAssistantGroup");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantGroupId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantGroupId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "entry_ids[]", entryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (autocomplete != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "autocomplete", autocomplete))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< ReplyAssistantGroup >("/reply_assistant/groups/{replyAssistantGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ReplyAssistantGroup</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantGroup> UpdateReplyAssistantGroupAsync (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup> localVarResponse = await UpdateReplyAssistantGroupAsyncWithHttpInfo(replyAssistantGroupId, name, entryIds, autocomplete, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a reply assistant group This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantGroupId"></param>
        /// <param name="name">The name of the group. (optional)</param>
        /// <param name="entryIds">List of the reply assistant entries in this group. (optional)</param>
        /// <param name="autocomplete">Used for autocompletion in chat. (optional)</param>
        /// <param name="position">Used to determine the order of the groups in the interface, in ascending order. (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantGroup)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantGroup>> UpdateReplyAssistantGroupAsyncWithHttpInfo (string replyAssistantGroupId, string name = default(string), Collection<string> entryIds = default(Collection<string>), bool? autocomplete = default(bool?), int? position = default(int?))
        {
            // verify the required parameter 'replyAssistantGroupId' is set
            if (replyAssistantGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantGroupId' when calling ReplyAssistantGroupsApi->UpdateReplyAssistantGroup");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (replyAssistantGroupId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantGroupId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "entry_ids[]", entryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (autocomplete != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "autocomplete", autocomplete))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplyAssistantGroup>("/reply_assistant/groups/{replyAssistantGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReplyAssistantGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
