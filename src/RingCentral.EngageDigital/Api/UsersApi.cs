/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a user
        /// </summary>
        /// <remarks>
        /// This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>User</returns>
        User CreateUser (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));

        /// <summary>
        /// Creating a user
        /// </summary>
        /// <remarks>
        /// This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));
        /// <summary>
        /// Deleting a user
        /// </summary>
        /// <remarks>
        /// This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        User DeleteUser (string userId);

        /// <summary>
        /// Deleting a user
        /// </summary>
        /// <remarks>
        /// This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> DeleteUserWithHttpInfo (string userId);
        /// <summary>
        /// Getting all users
        /// </summary>
        /// <remarks>
        /// This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllUsersResponse</returns>
        GetAllUsersResponse GetAllUsers (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all users
        /// </summary>
        /// <remarks>
        /// This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllUsersResponse</returns>
        ApiResponse<GetAllUsersResponse> GetAllUsersWithHttpInfo (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a user from its id
        /// </summary>
        /// <remarks>
        /// This method renders a user from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        User GetUser (string userId);

        /// <summary>
        /// Getting a user from its id
        /// </summary>
        /// <remarks>
        /// This method renders a user from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (string userId);
        /// <summary>
        /// Inviting a user
        /// </summary>
        /// <remarks>
        /// This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>User</returns>
        User InviteUser (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));

        /// <summary>
        /// Inviting a user
        /// </summary>
        /// <remarks>
        /// This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> InviteUserWithHttpInfo (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));
        /// <summary>
        /// Updating a user
        /// </summary>
        /// <remarks>
        /// This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>User</returns>
        User UpdateUser (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));

        /// <summary>
        /// Updating a user
        /// </summary>
        /// <remarks>
        /// This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a user
        /// </summary>
        /// <remarks>
        /// This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));

        /// <summary>
        /// Creating a user
        /// </summary>
        /// <remarks>
        /// This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserAsyncWithHttpInfo (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));
        /// <summary>
        /// Deleting a user
        /// </summary>
        /// <remarks>
        /// This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> DeleteUserAsync (string userId);

        /// <summary>
        /// Deleting a user
        /// </summary>
        /// <remarks>
        /// This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> DeleteUserAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Getting all users
        /// </summary>
        /// <remarks>
        /// This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllUsersResponse</returns>
        System.Threading.Tasks.Task<GetAllUsersResponse> GetAllUsersAsync (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all users
        /// </summary>
        /// <remarks>
        /// This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllUsersResponse>> GetAllUsersAsyncWithHttpInfo (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a user from its id
        /// </summary>
        /// <remarks>
        /// This method renders a user from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (string userId);

        /// <summary>
        /// Getting a user from its id
        /// </summary>
        /// <remarks>
        /// This method renders a user from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Inviting a user
        /// </summary>
        /// <remarks>
        /// This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> InviteUserAsync (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));

        /// <summary>
        /// Inviting a user
        /// </summary>
        /// <remarks>
        /// This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> InviteUserAsyncWithHttpInfo (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));
        /// <summary>
        /// Updating a user
        /// </summary>
        /// <remarks>
        /// This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));

        /// <summary>
        /// Updating a user
        /// </summary>
        /// <remarks>
        /// This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a user This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>User</returns>
        public User CreateUser (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(email, firstname, lastname, password, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a user This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< User > CreateUserWithHttpInfo (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'email' when calling UsersApi->CreateUser");

            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'firstname' when calling UsersApi->CreateUser");

            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'lastname' when calling UsersApi->CreateUser");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'password' when calling UsersApi->CreateUser");

            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->CreateUser");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (enabled != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_ids[]", identityIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (nickname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "nickname", nickname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (password != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "password", password))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids[]", teamIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (spokenLanguages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "spoken_languages[]", spokenLanguages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< User >("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a user This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = await CreateUserAsyncWithHttpInfo(email, firstname, lastname, password, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a user This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="password">User plain password (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<User>> CreateUserAsyncWithHttpInfo (string email, string firstname, string lastname, string password, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'email' when calling UsersApi->CreateUser");

            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'firstname' when calling UsersApi->CreateUser");

            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'lastname' when calling UsersApi->CreateUser");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'password' when calling UsersApi->CreateUser");

            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->CreateUser");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (enabled != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_ids[]", identityIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (nickname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "nickname", nickname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (password != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "password", password))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids[]", teamIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (spokenLanguages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "spoken_languages[]", spokenLanguages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a user This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        public User DeleteUser (string userId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = DeleteUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a user This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< User > DeleteUserWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteUser");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                localVarRequestOptions.PathParameters.Add("userId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< User >("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a user This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> DeleteUserAsync (string userId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = await DeleteUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a user This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<User>> DeleteUserAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteUser");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (userId != null)
                localVarRequestOptions.PathParameters.Add("userId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<User>("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all users This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllUsersResponse</returns>
        public GetAllUsersResponse GetAllUsers (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllUsersResponse> localVarResponse = GetAllUsersWithHttpInfo(email, categoryId, identityId, externalId, roleId, teamId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all users This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllUsersResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllUsersResponse > GetAllUsersWithHttpInfo (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (categoryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "identity_id", identityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllUsersResponse >("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all users This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllUsersResponse</returns>
        public async System.Threading.Tasks.Task<GetAllUsersResponse> GetAllUsersAsync (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllUsersResponse> localVarResponse = await GetAllUsersAsyncWithHttpInfo(email, categoryId, identityId, externalId, roleId, teamId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all users This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">To filter users on given email. (optional)</param>
        /// <param name="categoryId">To filter users on given category id. (optional)</param>
        /// <param name="identityId">To filter users on given identity id. (optional)</param>
        /// <param name="externalId">To filter users on given external id. (optional)</param>
        /// <param name="roleId">To filter users on given role id. (optional)</param>
        /// <param name="teamId">To filter users on given team id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllUsersResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllUsersResponse>> GetAllUsersAsyncWithHttpInfo (string email = default(string), string categoryId = default(string), string identityId = default(string), string externalId = default(string), string roleId = default(string), string teamId = default(string), int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (categoryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "category_id", categoryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "identity_id", identityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllUsersResponse>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a user from its id This method renders a user from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        public User GetUser (string userId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a user from its id This method renders a user from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< User > GetUserWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUser");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                localVarRequestOptions.PathParameters.Add("userId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< User >("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a user from its id This method renders a user from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (string userId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a user from its id This method renders a user from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<User>> GetUserAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUser");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (userId != null)
                localVarRequestOptions.PathParameters.Add("userId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Inviting a user This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>User</returns>
        public User InviteUser (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = InviteUserWithHttpInfo(email, firstname, lastname, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inviting a user This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< User > InviteUserWithHttpInfo (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'email' when calling UsersApi->InviteUser");

            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'firstname' when calling UsersApi->InviteUser");

            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'lastname' when calling UsersApi->InviteUser");

            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->InviteUser");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (enabled != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_ids", identityIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (nickname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "nickname", nickname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids", teamIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (spokenLanguages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "spoken_languages", spokenLanguages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< User >("/users/invite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Inviting a user This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> InviteUserAsync (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = await InviteUserAsyncWithHttpInfo(email, firstname, lastname, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inviting a user This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User email (mandatory).</param>
        /// <param name="firstname">User firstname (mandatory).</param>
        /// <param name="lastname">User lastname (mandatory).</param>
        /// <param name="roleId">User role id (mandatory).</param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<User>> InviteUserAsyncWithHttpInfo (string email, string firstname, string lastname, string roleId, Collection<string> categoryIds = default(Collection<string>), bool? enabled = default(bool?), string externalId = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string locale = default(string), string nickname = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'email' when calling UsersApi->InviteUser");

            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'firstname' when calling UsersApi->InviteUser");

            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'lastname' when calling UsersApi->InviteUser");

            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->InviteUser");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (enabled != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_ids", identityIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (nickname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "nickname", nickname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids", teamIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (spokenLanguages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "spoken_languages", spokenLanguages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/users/invite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a user This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>User</returns>
        public User UpdateUser (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(userId, categoryIds, email, enabled, externalId, firstname, gender, identityIds, lastname, locale, nickname, password, roleId, teamIds, timezone, spokenLanguages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a user This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< User > UpdateUserWithHttpInfo (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UpdateUser");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                localVarRequestOptions.PathParameters.Add("userId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (enabled != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_ids[]", identityIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (nickname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "nickname", nickname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (password != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "password", password))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids[]", teamIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (spokenLanguages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "spoken_languages[]", spokenLanguages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< User >("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a user This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<User> localVarResponse = await UpdateUserAsyncWithHttpInfo(userId, categoryIds, email, enabled, externalId, firstname, gender, identityIds, lastname, locale, nickname, password, roleId, teamIds, timezone, spokenLanguages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a user This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="categoryIds">User list of category ids (multiple). (optional)</param>
        /// <param name="email">User email. (optional)</param>
        /// <param name="enabled">Whether the user is enabled or not (boolean). (optional)</param>
        /// <param name="externalId">User external id, used for SSO. (optional)</param>
        /// <param name="firstname">User firstname. (optional)</param>
        /// <param name="gender">User gender (\&quot;man\&quot; or \&quot;woman\&quot;). (optional)</param>
        /// <param name="identityIds">User list of identity ids (multiple). (optional)</param>
        /// <param name="lastname">User lastname. (optional)</param>
        /// <param name="locale">Language for the user interface. (optional)</param>
        /// <param name="nickname">User nickname. (optional)</param>
        /// <param name="password">User plain password. (optional)</param>
        /// <param name="roleId">User role id. (optional)</param>
        /// <param name="teamIds">User list of team ids (multiple). (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String), default is empty for domain timezone. (optional)</param>
        /// <param name="spokenLanguages">List of locales corresponding to the languages spoken by the user (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<User>> UpdateUserAsyncWithHttpInfo (string userId, Collection<string> categoryIds = default(Collection<string>), string email = default(string), bool? enabled = default(bool?), string externalId = default(string), string firstname = default(string), string gender = default(string), Collection<string> identityIds = default(Collection<string>), string lastname = default(string), string locale = default(string), string nickname = default(string), string password = default(string), string roleId = default(string), Collection<string> teamIds = default(Collection<string>), string timezone = default(string), Collection<string> spokenLanguages = default(Collection<string>))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UpdateUser");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (userId != null)
                localVarRequestOptions.PathParameters.Add("userId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (enabled != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (externalId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_ids[]", identityIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (nickname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "nickname", nickname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (password != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "password", password))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (roleId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "role_id", roleId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids[]", teamIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (spokenLanguages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "spoken_languages[]", spokenLanguages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
