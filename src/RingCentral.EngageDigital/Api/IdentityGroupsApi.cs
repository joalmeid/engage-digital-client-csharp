/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IIdentityGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllIdentityGroupsResponse</returns>
        GetAllIdentityGroupsResponse GetAllIdentityGroups (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllIdentityGroupsResponse</returns>
        ApiResponse<GetAllIdentityGroupsResponse> GetAllIdentityGroupsWithHttpInfo (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>IdentityGroup</returns>
        IdentityGroup GetIdentityGroup (string identityGroupId);

        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        ApiResponse<IdentityGroup> GetIdentityGroupWithHttpInfo (string identityGroupId);
        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>IdentityGroup</returns>
        IdentityGroup UpdateIdentityGroup (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null);

        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        ApiResponse<IdentityGroup> UpdateIdentityGroupWithHttpInfo (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllIdentityGroupsResponse</returns>
        System.Threading.Tasks.Task<GetAllIdentityGroupsResponse> GetAllIdentityGroupsAsync (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllIdentityGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllIdentityGroupsResponse>> GetAllIdentityGroupsAsyncWithHttpInfo (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of IdentityGroup</returns>
        System.Threading.Tasks.Task<IdentityGroup> GetIdentityGroupAsync (string identityGroupId);

        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityGroup>> GetIdentityGroupAsyncWithHttpInfo (string identityGroupId);
        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of IdentityGroup</returns>
        System.Threading.Tasks.Task<IdentityGroup> UpdateIdentityGroupAsync (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null);

        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityGroup>> UpdateIdentityGroupAsyncWithHttpInfo (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class IdentityGroupsApi : IIdentityGroupsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityGroupsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public IdentityGroupsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentityGroupsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllIdentityGroupsResponse</returns>
        public GetAllIdentityGroupsResponse GetAllIdentityGroups (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllIdentityGroupsResponse> localVarResponse = GetAllIdentityGroupsWithHttpInfo(firstname, lastname, email, uuid, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllIdentityGroupsResponse</returns>
        public ApiResponse< GetAllIdentityGroupsResponse > GetAllIdentityGroupsWithHttpInfo (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./identity_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstname", firstname)); // query parameter
            if (lastname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastname", lastname)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIdentityGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllIdentityGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllIdentityGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllIdentityGroupsResponse)));
        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllIdentityGroupsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllIdentityGroupsResponse> GetAllIdentityGroupsAsync (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllIdentityGroupsResponse> localVarResponse = await GetAllIdentityGroupsAsyncWithHttpInfo(firstname, lastname, email, uuid, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllIdentityGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllIdentityGroupsResponse>> GetAllIdentityGroupsAsyncWithHttpInfo (string firstname = null, string lastname = null, string email = null, string uuid = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./identity_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstname", firstname)); // query parameter
            if (lastname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastname", lastname)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIdentityGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllIdentityGroupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllIdentityGroupsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllIdentityGroupsResponse)));
        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>IdentityGroup</returns>
        public IdentityGroup GetIdentityGroup (string identityGroupId)
        {
             ApiResponse<IdentityGroup> localVarResponse = GetIdentityGroupWithHttpInfo(identityGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        public ApiResponse< IdentityGroup > GetIdentityGroupWithHttpInfo (string identityGroupId)
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->GetIdentityGroup");

            var localVarPath = "./identity_groups/{identityGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityGroupId != null) localVarPathParams.Add("identityGroupId", this.Configuration.ApiClient.ParameterToString(identityGroupId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityGroup)));
        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of IdentityGroup</returns>
        public async System.Threading.Tasks.Task<IdentityGroup> GetIdentityGroupAsync (string identityGroupId)
        {
             ApiResponse<IdentityGroup> localVarResponse = await GetIdentityGroupAsyncWithHttpInfo(identityGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityGroup>> GetIdentityGroupAsyncWithHttpInfo (string identityGroupId)
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->GetIdentityGroup");

            var localVarPath = "./identity_groups/{identityGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityGroupId != null) localVarPathParams.Add("identityGroupId", this.Configuration.ApiClient.ParameterToString(identityGroupId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityGroup)));
        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>IdentityGroup</returns>
        public IdentityGroup UpdateIdentityGroup (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null)
        {
             ApiResponse<IdentityGroup> localVarResponse = UpdateIdentityGroupWithHttpInfo(identityGroupId, company, customFieldValuesCustomFieldKey, emails, firstname, gender, homePhones, lastname, mobilePhones, notes, tagIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        public ApiResponse< IdentityGroup > UpdateIdentityGroupWithHttpInfo (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null)
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->UpdateIdentityGroup");

            var localVarPath = "./identity_groups/{identityGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityGroupId != null) localVarPathParams.Add("identityGroupId", this.Configuration.ApiClient.ParameterToString(identityGroupId)); // path parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (customFieldValuesCustomFieldKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_field_values[custom_field_key]", customFieldValuesCustomFieldKey)); // query parameter
            if (emails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "emails", emails)); // query parameter
            if (firstname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstname", firstname)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter
            if (homePhones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "home_phones", homePhones)); // query parameter
            if (lastname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastname", lastname)); // query parameter
            if (mobilePhones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mobile_phones", mobilePhones)); // query parameter
            if (notes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notes", notes)); // query parameter
            if (tagIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag_ids", tagIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIdentityGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityGroup)));
        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of IdentityGroup</returns>
        public async System.Threading.Tasks.Task<IdentityGroup> UpdateIdentityGroupAsync (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null)
        {
             ApiResponse<IdentityGroup> localVarResponse = await UpdateIdentityGroupAsyncWithHttpInfo(identityGroupId, company, customFieldValuesCustomFieldKey, emails, firstname, gender, homePhones, lastname, mobilePhones, notes, tagIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityGroup>> UpdateIdentityGroupAsyncWithHttpInfo (string identityGroupId, string company = null, string customFieldValuesCustomFieldKey = null, List<string> emails = null, string firstname = null, string gender = null, List<string> homePhones = null, string lastname = null, List<string> mobilePhones = null, string notes = null, List<string> tagIds = null)
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->UpdateIdentityGroup");

            var localVarPath = "./identity_groups/{identityGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityGroupId != null) localVarPathParams.Add("identityGroupId", this.Configuration.ApiClient.ParameterToString(identityGroupId)); // path parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (customFieldValuesCustomFieldKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_field_values[custom_field_key]", customFieldValuesCustomFieldKey)); // query parameter
            if (emails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "emails", emails)); // query parameter
            if (firstname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstname", firstname)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter
            if (homePhones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "home_phones", homePhones)); // query parameter
            if (lastname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastname", lastname)); // query parameter
            if (mobilePhones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "mobile_phones", mobilePhones)); // query parameter
            if (notes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notes", notes)); // query parameter
            if (tagIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag_ids", tagIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIdentityGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityGroup)));
        }

    }
}
