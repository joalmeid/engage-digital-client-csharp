/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllIdentityGroupsResponse</returns>
        GetAllIdentityGroupsResponse GetAllIdentityGroups (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllIdentityGroupsResponse</returns>
        ApiResponse<GetAllIdentityGroupsResponse> GetAllIdentityGroupsWithHttpInfo (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>IdentityGroup</returns>
        IdentityGroup GetIdentityGroup (string identityGroupId);

        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        ApiResponse<IdentityGroup> GetIdentityGroupWithHttpInfo (string identityGroupId);
        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>IdentityGroup</returns>
        IdentityGroup UpdateIdentityGroup (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>));

        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        ApiResponse<IdentityGroup> UpdateIdentityGroupWithHttpInfo (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllIdentityGroupsResponse</returns>
        System.Threading.Tasks.Task<GetAllIdentityGroupsResponse> GetAllIdentityGroupsAsync (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all identity groups
        /// </summary>
        /// <remarks>
        /// This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllIdentityGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllIdentityGroupsResponse>> GetAllIdentityGroupsAsyncWithHttpInfo (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of IdentityGroup</returns>
        System.Threading.Tasks.Task<IdentityGroup> GetIdentityGroupAsync (string identityGroupId);

        /// <summary>
        /// Getting an identity group from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity group from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityGroup>> GetIdentityGroupAsyncWithHttpInfo (string identityGroupId);
        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of IdentityGroup</returns>
        System.Threading.Tasks.Task<IdentityGroup> UpdateIdentityGroupAsync (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>));

        /// <summary>
        /// Updating an identity group
        /// </summary>
        /// <remarks>
        /// This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityGroup>> UpdateIdentityGroupAsyncWithHttpInfo (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityGroupsApi : IIdentityGroupsApiSync, IIdentityGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentityGroupsApi : IIdentityGroupsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityGroupsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityGroupsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentityGroupsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IdentityGroupsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllIdentityGroupsResponse</returns>
        public GetAllIdentityGroupsResponse GetAllIdentityGroups (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllIdentityGroupsResponse> localVarResponse = GetAllIdentityGroupsWithHttpInfo(firstname, lastname, email, uuid, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllIdentityGroupsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllIdentityGroupsResponse > GetAllIdentityGroupsWithHttpInfo (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (uuid != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllIdentityGroupsResponse >("/identity_groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllIdentityGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllIdentityGroupsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllIdentityGroupsResponse> GetAllIdentityGroupsAsync (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllIdentityGroupsResponse> localVarResponse = await GetAllIdentityGroupsAsyncWithHttpInfo(firstname, lastname, email, uuid, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all identity groups This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">To filter groups on given firstname. (optional)</param>
        /// <param name="lastname">To filter groups on given lastname. (optional)</param>
        /// <param name="email">To filter groups that have given email. (optional)</param>
        /// <param name="uuid">To filter groups that have given uuid. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllIdentityGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllIdentityGroupsResponse>> GetAllIdentityGroupsAsyncWithHttpInfo (string firstname = default(string), string lastname = default(string), string email = default(string), string uuid = default(string), string sort = default(string), int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (email != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "email", email))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (uuid != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllIdentityGroupsResponse>("/identity_groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllIdentityGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>IdentityGroup</returns>
        public IdentityGroup GetIdentityGroup (string identityGroupId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<IdentityGroup> localVarResponse = GetIdentityGroupWithHttpInfo(identityGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< IdentityGroup > GetIdentityGroupWithHttpInfo (string identityGroupId)
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->GetIdentityGroup");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (identityGroupId != null)
                localVarRequestOptions.PathParameters.Add("identityGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(identityGroupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< IdentityGroup >("/identity_groups/{identityGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of IdentityGroup</returns>
        public async System.Threading.Tasks.Task<IdentityGroup> GetIdentityGroupAsync (string identityGroupId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<IdentityGroup> localVarResponse = await GetIdentityGroupAsyncWithHttpInfo(identityGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an identity group from its id This method renders an identity group from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<IdentityGroup>> GetIdentityGroupAsyncWithHttpInfo (string identityGroupId)
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->GetIdentityGroup");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (identityGroupId != null)
                localVarRequestOptions.PathParameters.Add("identityGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(identityGroupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IdentityGroup>("/identity_groups/{identityGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>IdentityGroup</returns>
        public IdentityGroup UpdateIdentityGroup (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<IdentityGroup> localVarResponse = UpdateIdentityGroupWithHttpInfo(identityGroupId, company, customFieldValuesCustomFieldKey, emails, firstname, gender, homePhones, lastname, mobilePhones, notes, tagIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>ApiResponse of IdentityGroup</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< IdentityGroup > UpdateIdentityGroupWithHttpInfo (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>))
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->UpdateIdentityGroup");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (identityGroupId != null)
                localVarRequestOptions.PathParameters.Add("identityGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(identityGroupId)); // path parameter
            if (company != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "company", company))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (customFieldValuesCustomFieldKey != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "custom_field_values[custom_field_key]", customFieldValuesCustomFieldKey))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (emails != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "emails", emails))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (homePhones != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "home_phones", homePhones))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (mobilePhones != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "mobile_phones", mobilePhones))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (notes != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "notes", notes))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (tagIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "tag_ids", tagIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< IdentityGroup >("/identity_groups/{identityGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of IdentityGroup</returns>
        public async System.Threading.Tasks.Task<IdentityGroup> UpdateIdentityGroupAsync (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<IdentityGroup> localVarResponse = await UpdateIdentityGroupAsyncWithHttpInfo(identityGroupId, company, customFieldValuesCustomFieldKey, emails, firstname, gender, homePhones, lastname, mobilePhones, notes, tagIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating an identity group This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupId"></param>
        /// <param name="company">Identity company. (optional)</param>
        /// <param name="customFieldValuesCustomFieldKey">Identity custom field with key « custom_field_key ». It (optional)</param>
        /// <param name="emails">Identity emails (multiple). (optional)</param>
        /// <param name="firstname">Identity firstname. (optional)</param>
        /// <param name="gender">Identity’s gender. It can be \&quot;man\&quot;, \&quot;woman\&quot; or empty. (optional)</param>
        /// <param name="homePhones">Identity home phones (mutiple). (optional)</param>
        /// <param name="lastname">Identity lastname. (optional)</param>
        /// <param name="mobilePhones">Identity mobile phones (multiple). (optional)</param>
        /// <param name="notes">Identity notes. (optional)</param>
        /// <param name="tagIds">Identity tag ids (multiple). (optional)</param>
        /// <returns>Task of ApiResponse (IdentityGroup)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<IdentityGroup>> UpdateIdentityGroupAsyncWithHttpInfo (string identityGroupId, string company = default(string), string customFieldValuesCustomFieldKey = default(string), Collection<string> emails = default(Collection<string>), string firstname = default(string), string gender = default(string), Collection<string> homePhones = default(Collection<string>), string lastname = default(string), Collection<string> mobilePhones = default(Collection<string>), string notes = default(string), Collection<string> tagIds = default(Collection<string>))
        {
            // verify the required parameter 'identityGroupId' is set
            if (identityGroupId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'identityGroupId' when calling IdentityGroupsApi->UpdateIdentityGroup");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (identityGroupId != null)
                localVarRequestOptions.PathParameters.Add("identityGroupId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(identityGroupId)); // path parameter
            if (company != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "company", company))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (customFieldValuesCustomFieldKey != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "custom_field_values[custom_field_key]", customFieldValuesCustomFieldKey))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (emails != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "emails", emails))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (firstname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "firstname", firstname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (gender != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "gender", gender))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (homePhones != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "home_phones", homePhones))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (lastname != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "lastname", lastname))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (mobilePhones != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "mobile_phones", mobilePhones))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (notes != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "notes", notes))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (tagIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "tag_ids", tagIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<IdentityGroup>("/identity_groups/{identityGroupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
