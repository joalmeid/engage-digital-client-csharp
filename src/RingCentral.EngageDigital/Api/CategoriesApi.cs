/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ICategoriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        Category CreateCategory (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> CreateCategoryWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Category</returns>
        Category DeleteCategory (string categoryId, string takeOverCategoryId = null);

        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> DeleteCategoryWithHttpInfo (string categoryId, string takeOverCategoryId = null);
        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCategoriesResponse</returns>
        GetAllCategoriesResponse GetAllCategories (string parentId = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCategoriesResponse</returns>
        ApiResponse<GetAllCategoriesResponse> GetAllCategoriesWithHttpInfo (string parentId = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Category</returns>
        Category GetCategory (string categoryId);

        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> GetCategoryWithHttpInfo (string categoryId);
        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        Category UpdateCategory (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> UpdateCategoryWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> CreateCategoryAsync (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> CreateCategoryAsyncWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> DeleteCategoryAsync (string categoryId, string takeOverCategoryId = null);

        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> DeleteCategoryAsyncWithHttpInfo (string categoryId, string takeOverCategoryId = null);
        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCategoriesResponse</returns>
        System.Threading.Tasks.Task<GetAllCategoriesResponse> GetAllCategoriesAsync (string parentId = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllCategoriesResponse>> GetAllCategoriesAsyncWithHttpInfo (string parentId = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> GetCategoryAsync (string categoryId);

        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> GetCategoryAsyncWithHttpInfo (string categoryId);
        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> UpdateCategoryAsync (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> UpdateCategoryAsyncWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CategoriesApi : ICategoriesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CategoriesApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoriesApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        public Category CreateCategory (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             ApiResponse<Category> localVarResponse = CreateCategoryWithHttpInfo(name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > CreateCategoryWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (mandatory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mandatory", mandatory)); // query parameter
            if (multiple != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multiple", multiple)); // query parameter
            if (postQualification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "post_qualification", postQualification)); // query parameter
            if (unselectable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unselectable", unselectable)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> CreateCategoryAsync (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             ApiResponse<Category> localVarResponse = await CreateCategoryAsyncWithHttpInfo(name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> CreateCategoryAsyncWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (mandatory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mandatory", mandatory)); // query parameter
            if (multiple != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multiple", multiple)); // query parameter
            if (postQualification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "post_qualification", postQualification)); // query parameter
            if (unselectable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unselectable", unselectable)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Category</returns>
        public Category DeleteCategory (string categoryId, string takeOverCategoryId = null)
        {
             ApiResponse<Category> localVarResponse = DeleteCategoryWithHttpInfo(categoryId, takeOverCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > DeleteCategoryWithHttpInfo (string categoryId, string takeOverCategoryId = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategory");

            var localVarPath = "./categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (takeOverCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take_over_category_id", takeOverCategoryId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> DeleteCategoryAsync (string categoryId, string takeOverCategoryId = null)
        {
             ApiResponse<Category> localVarResponse = await DeleteCategoryAsyncWithHttpInfo(categoryId, takeOverCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> DeleteCategoryAsyncWithHttpInfo (string categoryId, string takeOverCategoryId = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategory");

            var localVarPath = "./categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (takeOverCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take_over_category_id", takeOverCategoryId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCategoriesResponse</returns>
        public GetAllCategoriesResponse GetAllCategories (string parentId = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllCategoriesResponse> localVarResponse = GetAllCategoriesWithHttpInfo(parentId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCategoriesResponse</returns>
        public ApiResponse< GetAllCategoriesResponse > GetAllCategoriesWithHttpInfo (string parentId = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllCategoriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllCategoriesResponse)));
        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllCategoriesResponse> GetAllCategoriesAsync (string parentId = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllCategoriesResponse> localVarResponse = await GetAllCategoriesAsyncWithHttpInfo(parentId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllCategoriesResponse>> GetAllCategoriesAsyncWithHttpInfo (string parentId = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllCategoriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllCategoriesResponse)));
        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Category</returns>
        public Category GetCategory (string categoryId)
        {
             ApiResponse<Category> localVarResponse = GetCategoryWithHttpInfo(categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > GetCategoryWithHttpInfo (string categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategory");

            var localVarPath = "./categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> GetCategoryAsync (string categoryId)
        {
             ApiResponse<Category> localVarResponse = await GetCategoryAsyncWithHttpInfo(categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> GetCategoryAsyncWithHttpInfo (string categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategory");

            var localVarPath = "./categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        public Category UpdateCategory (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             ApiResponse<Category> localVarResponse = UpdateCategoryWithHttpInfo(categoryId, name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > UpdateCategoryWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategory");

            var localVarPath = "./categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (mandatory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mandatory", mandatory)); // query parameter
            if (multiple != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multiple", multiple)); // query parameter
            if (postQualification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "post_qualification", postQualification)); // query parameter
            if (unselectable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unselectable", unselectable)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> UpdateCategoryAsync (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             ApiResponse<Category> localVarResponse = await UpdateCategoryAsyncWithHttpInfo(categoryId, name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> UpdateCategoryAsyncWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategory");

            var localVarPath = "./categories/{categoryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarPathParams.Add("categoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (mandatory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mandatory", mandatory)); // query parameter
            if (multiple != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multiple", multiple)); // query parameter
            if (postQualification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "post_qualification", postQualification)); // query parameter
            if (unselectable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unselectable", unselectable)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

    }
}
