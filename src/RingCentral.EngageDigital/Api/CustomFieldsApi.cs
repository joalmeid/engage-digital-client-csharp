/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomFieldsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>CustomField</returns>
        CustomField CreateCustomField (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?));

        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> CreateCustomFieldWithHttpInfo (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?));
        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        CustomField DeleteCustomField (string customFieldId);

        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> DeleteCustomFieldWithHttpInfo (string customFieldId);
        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCustomFieldsResponse</returns>
        GetAllCustomFieldsResponse GetAllCustomFields (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCustomFieldsResponse</returns>
        ApiResponse<GetAllCustomFieldsResponse> GetAllCustomFieldsWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        CustomField GetCustomField (string customFieldId);

        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> GetCustomFieldWithHttpInfo (string customFieldId);
        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>CustomField</returns>
        CustomField UpdateCustomField (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?));

        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> UpdateCustomFieldWithHttpInfo (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomFieldsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> CreateCustomFieldAsync (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?));

        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> CreateCustomFieldAsyncWithHttpInfo (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?));
        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> DeleteCustomFieldAsync (string customFieldId);

        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> DeleteCustomFieldAsyncWithHttpInfo (string customFieldId);
        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<GetAllCustomFieldsResponse> GetAllCustomFieldsAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllCustomFieldsResponse>> GetAllCustomFieldsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> GetCustomFieldAsync (string customFieldId);

        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> GetCustomFieldAsyncWithHttpInfo (string customFieldId);
        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> UpdateCustomFieldAsync (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?));

        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> UpdateCustomFieldAsyncWithHttpInfo (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomFieldsApi : ICustomFieldsApiSync, ICustomFieldsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomFieldsApi : ICustomFieldsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomFieldsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomFieldsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomFieldsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomFieldsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>CustomField</returns>
        public CustomField CreateCustomField (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = CreateCustomFieldWithHttpInfo(associatedTypeName, label, key, type, choices, multiple, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>ApiResponse of CustomField</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< CustomField > CreateCustomFieldWithHttpInfo (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?))
        {
            // verify the required parameter 'associatedTypeName' is set
            if (associatedTypeName == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'associatedTypeName' when calling CustomFieldsApi->CreateCustomField");

            // verify the required parameter 'label' is set
            if (label == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'label' when calling CustomFieldsApi->CreateCustomField");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (associatedTypeName != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "associated_type_name", associatedTypeName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (label != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (key != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "key", key))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (choices != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "choices", choices))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (multiple != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "multiple", multiple))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< CustomField >("/custom_fields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> CreateCustomFieldAsync (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = await CreateCustomFieldAsyncWithHttpInfo(associatedTypeName, label, key, type, choices, multiple, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<CustomField>> CreateCustomFieldAsyncWithHttpInfo (string associatedTypeName, string label, string key = default(string), string type = default(string), Collection<string> choices = default(Collection<string>), bool? multiple = default(bool?), int? position = default(int?))
        {
            // verify the required parameter 'associatedTypeName' is set
            if (associatedTypeName == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'associatedTypeName' when calling CustomFieldsApi->CreateCustomField");

            // verify the required parameter 'label' is set
            if (label == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'label' when calling CustomFieldsApi->CreateCustomField");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (associatedTypeName != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "associated_type_name", associatedTypeName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (label != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (key != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "key", key))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (type != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (choices != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "choices", choices))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (multiple != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "multiple", multiple))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomField>("/custom_fields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        public CustomField DeleteCustomField (string customFieldId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = DeleteCustomFieldWithHttpInfo(customFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< CustomField > DeleteCustomFieldWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->DeleteCustomField");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (customFieldId != null)
                localVarRequestOptions.PathParameters.Add("customFieldId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< CustomField >("/custom_fields/{customFieldId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> DeleteCustomFieldAsync (string customFieldId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = await DeleteCustomFieldAsyncWithHttpInfo(customFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<CustomField>> DeleteCustomFieldAsyncWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->DeleteCustomField");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (customFieldId != null)
                localVarRequestOptions.PathParameters.Add("customFieldId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CustomField>("/custom_fields/{customFieldId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCustomFieldsResponse</returns>
        public GetAllCustomFieldsResponse GetAllCustomFields (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllCustomFieldsResponse> localVarResponse = GetAllCustomFieldsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCustomFieldsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllCustomFieldsResponse > GetAllCustomFieldsWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllCustomFieldsResponse >("/custom_fields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllCustomFieldsResponse> GetAllCustomFieldsAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllCustomFieldsResponse> localVarResponse = await GetAllCustomFieldsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllCustomFieldsResponse>> GetAllCustomFieldsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllCustomFieldsResponse>("/custom_fields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        public CustomField GetCustomField (string customFieldId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = GetCustomFieldWithHttpInfo(customFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< CustomField > GetCustomFieldWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->GetCustomField");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (customFieldId != null)
                localVarRequestOptions.PathParameters.Add("customFieldId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< CustomField >("/custom_fields/{customFieldId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> GetCustomFieldAsync (string customFieldId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = await GetCustomFieldAsyncWithHttpInfo(customFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<CustomField>> GetCustomFieldAsyncWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->GetCustomField");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (customFieldId != null)
                localVarRequestOptions.PathParameters.Add("customFieldId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomField>("/custom_fields/{customFieldId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>CustomField</returns>
        public CustomField UpdateCustomField (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = UpdateCustomFieldWithHttpInfo(customFieldId, label, choices, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>ApiResponse of CustomField</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< CustomField > UpdateCustomFieldWithHttpInfo (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->UpdateCustomField");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (customFieldId != null)
                localVarRequestOptions.PathParameters.Add("customFieldId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (label != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (choices != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "choices", choices))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< CustomField >("/custom_fields/{customFieldId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> UpdateCustomFieldAsync (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<CustomField> localVarResponse = await UpdateCustomFieldAsyncWithHttpInfo(customFieldId, label, choices, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<CustomField>> UpdateCustomFieldAsyncWithHttpInfo (string customFieldId, string label = default(string), Collection<string> choices = default(Collection<string>), int? position = default(int?))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->UpdateCustomField");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (customFieldId != null)
                localVarRequestOptions.PathParameters.Add("customFieldId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (label != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (choices != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "choices", choices))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (position != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomField>("/custom_fields/{customFieldId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
