/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ICustomFieldsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>CustomField</returns>
        CustomField CreateCustomField (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null);

        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> CreateCustomFieldWithHttpInfo (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null);
        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        CustomField DeleteCustomField (string customFieldId);

        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> DeleteCustomFieldWithHttpInfo (string customFieldId);
        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCustomFieldsResponse</returns>
        GetAllCustomFieldsResponse GetAllCustomFields (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCustomFieldsResponse</returns>
        ApiResponse<GetAllCustomFieldsResponse> GetAllCustomFieldsWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        CustomField GetCustomField (string customFieldId);

        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> GetCustomFieldWithHttpInfo (string customFieldId);
        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>CustomField</returns>
        CustomField UpdateCustomField (string customFieldId, string label = null, List<string> choices = null, int? position = null);

        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>ApiResponse of CustomField</returns>
        ApiResponse<CustomField> UpdateCustomFieldWithHttpInfo (string customFieldId, string label = null, List<string> choices = null, int? position = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> CreateCustomFieldAsync (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null);

        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> CreateCustomFieldAsyncWithHttpInfo (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null);
        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> DeleteCustomFieldAsync (string customFieldId);

        /// <summary>
        /// Deleting a custom field
        /// </summary>
        /// <remarks>
        /// This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> DeleteCustomFieldAsyncWithHttpInfo (string customFieldId);
        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<GetAllCustomFieldsResponse> GetAllCustomFieldsAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all custom fields
        /// </summary>
        /// <remarks>
        /// This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllCustomFieldsResponse>> GetAllCustomFieldsAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> GetCustomFieldAsync (string customFieldId);

        /// <summary>
        /// Getting a custom field from its id
        /// </summary>
        /// <remarks>
        /// This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> GetCustomFieldAsyncWithHttpInfo (string customFieldId);
        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of CustomField</returns>
        System.Threading.Tasks.Task<CustomField> UpdateCustomFieldAsync (string customFieldId, string label = null, List<string> choices = null, int? position = null);

        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomField>> UpdateCustomFieldAsyncWithHttpInfo (string customFieldId, string label = null, List<string> choices = null, int? position = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CustomFieldsApi : ICustomFieldsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomFieldsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CustomFieldsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomFieldsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>CustomField</returns>
        public CustomField CreateCustomField (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null)
        {
             ApiResponse<CustomField> localVarResponse = CreateCustomFieldWithHttpInfo(associatedTypeName, label, key, type, choices, multiple, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>ApiResponse of CustomField</returns>
        public ApiResponse< CustomField > CreateCustomFieldWithHttpInfo (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null)
        {
            // verify the required parameter 'associatedTypeName' is set
            if (associatedTypeName == null)
                throw new ApiException(400, "Missing required parameter 'associatedTypeName' when calling CustomFieldsApi->CreateCustomField");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling CustomFieldsApi->CreateCustomField");

            var localVarPath = "./custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (associatedTypeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "associated_type_name", associatedTypeName)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (choices != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "choices", choices)); // query parameter
            if (multiple != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multiple", multiple)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> CreateCustomFieldAsync (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null)
        {
             ApiResponse<CustomField> localVarResponse = await CreateCustomFieldAsyncWithHttpInfo(associatedTypeName, label, key, type, choices, multiple, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a custom field This method creates a custom field. In case of success it renders the custom field, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associatedTypeName">The associated type of custom field. It can be IdentityGroup or Intervention.</param>
        /// <param name="label">The label of the custom field.</param>
        /// <param name="key">The key of the custom field (example: customer_id). This is used to determine how it is stored on identity groups. (optional)</param>
        /// <param name="type">The type of the custom field. It can be string, boolean, text, integer, float, single_choice, (optional)</param>
        /// <param name="choices">A list of choices to be for single_choice, or multiple_choice types. This must be given (optional)</param>
        /// <param name="multiple">true or false, this as no effect on single_choice, multiple_choice or boolean types (optional)</param>
        /// <param name="position">an integer that indicates custom field’s position between others (default: -1). (optional)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomField>> CreateCustomFieldAsyncWithHttpInfo (string associatedTypeName, string label, string key = null, string type = null, List<string> choices = null, bool? multiple = null, int? position = null)
        {
            // verify the required parameter 'associatedTypeName' is set
            if (associatedTypeName == null)
                throw new ApiException(400, "Missing required parameter 'associatedTypeName' when calling CustomFieldsApi->CreateCustomField");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling CustomFieldsApi->CreateCustomField");

            var localVarPath = "./custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (associatedTypeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "associated_type_name", associatedTypeName)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (choices != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "choices", choices)); // query parameter
            if (multiple != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multiple", multiple)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        public CustomField DeleteCustomField (string customFieldId)
        {
             ApiResponse<CustomField> localVarResponse = DeleteCustomFieldWithHttpInfo(customFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        public ApiResponse< CustomField > DeleteCustomFieldWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->DeleteCustomField");

            var localVarPath = "./custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> DeleteCustomFieldAsync (string customFieldId)
        {
             ApiResponse<CustomField> localVarResponse = await DeleteCustomFieldAsyncWithHttpInfo(customFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a custom field This method destroys an existing custom field. It renders custom field itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy custom fields..
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomField>> DeleteCustomFieldAsyncWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->DeleteCustomField");

            var localVarPath = "./custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCustomFieldsResponse</returns>
        public GetAllCustomFieldsResponse GetAllCustomFields (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllCustomFieldsResponse> localVarResponse = GetAllCustomFieldsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCustomFieldsResponse</returns>
        public ApiResponse< GetAllCustomFieldsResponse > GetAllCustomFieldsWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllCustomFieldsResponse)));
        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllCustomFieldsResponse> GetAllCustomFieldsAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllCustomFieldsResponse> localVarResponse = await GetAllCustomFieldsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all custom fields This method renders custom fields ordered by position (ascending).  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllCustomFieldsResponse>> GetAllCustomFieldsAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllCustomFieldsResponse)));
        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>CustomField</returns>
        public CustomField GetCustomField (string customFieldId)
        {
             ApiResponse<CustomField> localVarResponse = GetCustomFieldWithHttpInfo(customFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>ApiResponse of CustomField</returns>
        public ApiResponse< CustomField > GetCustomFieldWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->GetCustomField");

            var localVarPath = "./custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> GetCustomFieldAsync (string customFieldId)
        {
             ApiResponse<CustomField> localVarResponse = await GetCustomFieldAsyncWithHttpInfo(customFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a custom field from its id This method renders a custom field from given id.  Authorization​: only users that can see custom fields in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomField>> GetCustomFieldAsyncWithHttpInfo (string customFieldId)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->GetCustomField");

            var localVarPath = "./custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>CustomField</returns>
        public CustomField UpdateCustomField (string customFieldId, string label = null, List<string> choices = null, int? position = null)
        {
             ApiResponse<CustomField> localVarResponse = UpdateCustomFieldWithHttpInfo(customFieldId, label, choices, position);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>ApiResponse of CustomField</returns>
        public ApiResponse< CustomField > UpdateCustomFieldWithHttpInfo (string customFieldId, string label = null, List<string> choices = null, int? position = null)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->UpdateCustomField");

            var localVarPath = "./custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (choices != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "choices", choices)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of CustomField</returns>
        public async System.Threading.Tasks.Task<CustomField> UpdateCustomFieldAsync (string customFieldId, string label = null, List<string> choices = null, int? position = null)
        {
             ApiResponse<CustomField> localVarResponse = await UpdateCustomFieldAsyncWithHttpInfo(customFieldId, label, choices, position);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a custom field This method updates an existing custom field from given attributes and renders it in case of success.  Authorization​: only users that are able to update custom fields.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId"></param>
        /// <param name="label">Custom field’s label. (optional)</param>
        /// <param name="choices"> (optional)</param>
        /// <param name="position">Custom field’s position. (optional)</param>
        /// <returns>Task of ApiResponse (CustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomField>> UpdateCustomFieldAsyncWithHttpInfo (string customFieldId, string label = null, List<string> choices = null, int? position = null)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling CustomFieldsApi->UpdateCustomField");

            var localVarPath = "./custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customFieldId != null) localVarPathParams.Add("customFieldId", this.Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (choices != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "choices", choices)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomField)));
        }

    }
}
