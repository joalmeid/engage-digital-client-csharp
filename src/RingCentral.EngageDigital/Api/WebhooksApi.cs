/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Webhook</returns>
        Webhook CreateWebhook (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);

        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> CreateWebhookWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);
        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        Webhook DeleteWebhook (string webhookId, string accessToken);

        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> DeleteWebhookWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllWebhooksResponse</returns>
        GetAllWebhooksResponse GetAllWebhooks (string accessToken, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllWebhooksResponse</returns>
        ApiResponse<GetAllWebhooksResponse> GetAllWebhooksWithHttpInfo (string accessToken, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        Webhook GetWebhook (string webhookId, string accessToken);

        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Webhook</returns>
        Webhook UpdateWebhook (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);

        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> UpdateWebhookWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> CreateWebhookAsync (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);

        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> CreateWebhookAsyncWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);
        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> DeleteWebhookAsync (string webhookId, string accessToken);

        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> DeleteWebhookAsyncWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllWebhooksResponse</returns>
        System.Threading.Tasks.Task<GetAllWebhooksResponse> GetAllWebhooksAsync (string accessToken, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllWebhooksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllWebhooksResponse>> GetAllWebhooksAsyncWithHttpInfo (string accessToken, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookAsync (string webhookId, string accessToken);

        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> UpdateWebhookAsync (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);

        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> UpdateWebhookAsyncWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WebhooksApi : IWebhooksApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// </summary>
        /// <returns></returns>
        public WebhooksApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Webhook</returns>
        public Webhook CreateWebhook (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
             ApiResponse<Webhook> localVarResponse = CreateWebhookWithHttpInfo(accessToken, label, url, registeredEvents, active, stagingUse, verifyToken, secret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > CreateWebhookWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->CreateWebhook");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling WebhooksApi->CreateWebhook");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling WebhooksApi->CreateWebhook");
            // verify the required parameter 'registeredEvents' is set
            if (registeredEvents == null)
                throw new ApiException(400, "Missing required parameter 'registeredEvents' when calling WebhooksApi->CreateWebhook");

            var localVarPath = "./webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (stagingUse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "staging_use", stagingUse)); // query parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (verifyToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verify_token", verifyToken)); // query parameter
            if (secret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "secret", secret)); // query parameter
            if (registeredEvents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "registered_events[]", registeredEvents)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> CreateWebhookAsync (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
             ApiResponse<Webhook> localVarResponse = await CreateWebhookAsyncWithHttpInfo(accessToken, label, url, registeredEvents, active, stagingUse, verifyToken, secret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> CreateWebhookAsyncWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->CreateWebhook");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling WebhooksApi->CreateWebhook");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling WebhooksApi->CreateWebhook");
            // verify the required parameter 'registeredEvents' is set
            if (registeredEvents == null)
                throw new ApiException(400, "Missing required parameter 'registeredEvents' when calling WebhooksApi->CreateWebhook");

            var localVarPath = "./webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (stagingUse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "staging_use", stagingUse)); // query parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (verifyToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verify_token", verifyToken)); // query parameter
            if (secret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "secret", secret)); // query parameter
            if (registeredEvents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "registered_events[]", registeredEvents)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        public Webhook DeleteWebhook (string webhookId, string accessToken)
        {
             ApiResponse<Webhook> localVarResponse = DeleteWebhookWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > DeleteWebhookWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhook");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "./webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> DeleteWebhookAsync (string webhookId, string accessToken)
        {
             ApiResponse<Webhook> localVarResponse = await DeleteWebhookAsyncWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> DeleteWebhookAsyncWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhook");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->DeleteWebhook");

            var localVarPath = "./webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllWebhooksResponse</returns>
        public GetAllWebhooksResponse GetAllWebhooks (string accessToken, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllWebhooksResponse> localVarResponse = GetAllWebhooksWithHttpInfo(accessToken, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllWebhooksResponse</returns>
        public ApiResponse< GetAllWebhooksResponse > GetAllWebhooksWithHttpInfo (string accessToken, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetAllWebhooks");

            var localVarPath = "./webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllWebhooksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllWebhooksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllWebhooksResponse)));
        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllWebhooksResponse</returns>
        public async System.Threading.Tasks.Task<GetAllWebhooksResponse> GetAllWebhooksAsync (string accessToken, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllWebhooksResponse> localVarResponse = await GetAllWebhooksAsyncWithHttpInfo(accessToken, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllWebhooksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllWebhooksResponse>> GetAllWebhooksAsyncWithHttpInfo (string accessToken, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetAllWebhooks");

            var localVarPath = "./webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllWebhooksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllWebhooksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllWebhooksResponse)));
        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook (string webhookId, string accessToken)
        {
             ApiResponse<Webhook> localVarResponse = GetWebhookWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > GetWebhookWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhook");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetWebhook");

            var localVarPath = "./webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync (string webhookId, string accessToken)
        {
             ApiResponse<Webhook> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhook");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetWebhook");

            var localVarPath = "./webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Webhook</returns>
        public Webhook UpdateWebhook (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
             ApiResponse<Webhook> localVarResponse = UpdateWebhookWithHttpInfo(webhookId, accessToken, active, label, stagingUse, url, verifyToken, secret, registeredEvents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > UpdateWebhookWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "./webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (stagingUse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "staging_use", stagingUse)); // query parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (verifyToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verify_token", verifyToken)); // query parameter
            if (secret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "secret", secret)); // query parameter
            if (registeredEvents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "registered_events[]", registeredEvents)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> UpdateWebhookAsync (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
             ApiResponse<Webhook> localVarResponse = await UpdateWebhookAsyncWithHttpInfo(webhookId, accessToken, active, label, stagingUse, url, verifyToken, secret, registeredEvents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> UpdateWebhookAsyncWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhook");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->UpdateWebhook");

            var localVarPath = "./webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (accessToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", accessToken)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (stagingUse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "staging_use", stagingUse)); // query parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "url", url)); // query parameter
            if (verifyToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verify_token", verifyToken)); // query parameter
            if (secret != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "secret", secret)); // query parameter
            if (registeredEvents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "registered_events[]", registeredEvents)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

    }
}
