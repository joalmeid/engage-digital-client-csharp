/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllSourcesResponse</returns>
        GetAllSourcesResponse GetAllSources (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllSourcesResponse</returns>
        ApiResponse<GetAllSourcesResponse> GetAllSourcesWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Source</returns>
        Source GetSource (string sourceId);

        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>ApiResponse of Source</returns>
        ApiResponse<Source> GetSourceWithHttpInfo (string sourceId);
        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Source</returns>
        Source UpdateSource (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?));

        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>ApiResponse of Source</returns>
        ApiResponse<Source> UpdateSourceWithHttpInfo (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllSourcesResponse</returns>
        System.Threading.Tasks.Task<GetAllSourcesResponse> GetAllSourcesAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSourcesResponse>> GetAllSourcesAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of Source</returns>
        System.Threading.Tasks.Task<Source> GetSourceAsync (string sourceId);

        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of ApiResponse (Source)</returns>
        System.Threading.Tasks.Task<ApiResponse<Source>> GetSourceAsyncWithHttpInfo (string sourceId);
        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of Source</returns>
        System.Threading.Tasks.Task<Source> UpdateSourceAsync (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?));

        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of ApiResponse (Source)</returns>
        System.Threading.Tasks.Task<ApiResponse<Source>> UpdateSourceAsyncWithHttpInfo (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourcesApi : ISourcesApiSync, ISourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SourcesApi : ISourcesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourcesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourcesApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SourcesApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SourcesApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllSourcesResponse</returns>
        public GetAllSourcesResponse GetAllSources (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllSourcesResponse> localVarResponse = GetAllSourcesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllSourcesResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllSourcesResponse > GetAllSourcesWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllSourcesResponse >("/content_sources", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllSourcesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllSourcesResponse> GetAllSourcesAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllSourcesResponse> localVarResponse = await GetAllSourcesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSourcesResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllSourcesResponse>> GetAllSourcesAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllSourcesResponse>("/content_sources", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Source</returns>
        public Source GetSource (string sourceId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Source> localVarResponse = GetSourceWithHttpInfo(sourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>ApiResponse of Source</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Source > GetSourceWithHttpInfo (string sourceId)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->GetSource");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sourceId != null)
                localVarRequestOptions.PathParameters.Add("sourceId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(sourceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Source >("/content_sources/{sourceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of Source</returns>
        public async System.Threading.Tasks.Task<Source> GetSourceAsync (string sourceId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Source> localVarResponse = await GetSourceAsyncWithHttpInfo(sourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of ApiResponse (Source)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Source>> GetSourceAsyncWithHttpInfo (string sourceId)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->GetSource");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (sourceId != null)
                localVarRequestOptions.PathParameters.Add("sourceId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(sourceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Source>("/content_sources/{sourceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Source</returns>
        public Source UpdateSource (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Source> localVarResponse = UpdateSourceWithHttpInfo(sourceId, name, active, channelId, color, slaResponse, slaExpiredStrategy, interventionMessagesBoost, transferredTasksBoost, hiddenFromStats, defaultCategoryIds, userThreadDefaultCategoryIds, defaultContentLanguage, autoDetectContentLanguage, contentArchiving, contentArchivingPeriod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>ApiResponse of Source</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Source > UpdateSourceWithHttpInfo (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSource");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sourceId != null)
                localVarRequestOptions.PathParameters.Add("sourceId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (active != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "active", active))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (color != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "color", color))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (slaResponse != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sla_response", slaResponse))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (slaExpiredStrategy != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sla_expired_strategy", slaExpiredStrategy))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (interventionMessagesBoost != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "intervention_messages_boost", interventionMessagesBoost))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (transferredTasksBoost != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "transferred_tasks_boost", transferredTasksBoost))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (hiddenFromStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "hidden_from_stats", hiddenFromStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (defaultCategoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "default_category_ids[]", defaultCategoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userThreadDefaultCategoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "user_thread_default_category_ids[]", userThreadDefaultCategoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (defaultContentLanguage != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "default_content_language", defaultContentLanguage))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (autoDetectContentLanguage != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "auto_detect_content_language", autoDetectContentLanguage))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (contentArchiving != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "content_archiving", contentArchiving))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (contentArchivingPeriod != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "content_archiving_period", contentArchivingPeriod))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< Source >("/content_sources/{sourceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of Source</returns>
        public async System.Threading.Tasks.Task<Source> UpdateSourceAsync (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Source> localVarResponse = await UpdateSourceAsyncWithHttpInfo(sourceId, name, active, channelId, color, slaResponse, slaExpiredStrategy, interventionMessagesBoost, transferredTasksBoost, hiddenFromStats, defaultCategoryIds, userThreadDefaultCategoryIds, defaultContentLanguage, autoDetectContentLanguage, contentArchiving, contentArchivingPeriod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of ApiResponse (Source)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Source>> UpdateSourceAsyncWithHttpInfo (string sourceId, string name = default(string), bool? active = default(bool?), string channelId = default(string), int? color = default(int?), int? slaResponse = default(int?), string slaExpiredStrategy = default(string), int? interventionMessagesBoost = default(int?), int? transferredTasksBoost = default(int?), bool? hiddenFromStats = default(bool?), Collection<string> defaultCategoryIds = default(Collection<string>), Collection<string> userThreadDefaultCategoryIds = default(Collection<string>), string defaultContentLanguage = default(string), bool? autoDetectContentLanguage = default(bool?), bool? contentArchiving = default(bool?), int? contentArchivingPeriod = default(int?))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSource");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (sourceId != null)
                localVarRequestOptions.PathParameters.Add("sourceId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (name != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (active != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "active", active))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (color != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "color", color))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (slaResponse != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sla_response", slaResponse))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (slaExpiredStrategy != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sla_expired_strategy", slaExpiredStrategy))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (interventionMessagesBoost != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "intervention_messages_boost", interventionMessagesBoost))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (transferredTasksBoost != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "transferred_tasks_boost", transferredTasksBoost))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (hiddenFromStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "hidden_from_stats", hiddenFromStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (defaultCategoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "default_category_ids[]", defaultCategoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userThreadDefaultCategoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "user_thread_default_category_ids[]", userThreadDefaultCategoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (defaultContentLanguage != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "default_content_language", defaultContentLanguage))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (autoDetectContentLanguage != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "auto_detect_content_language", autoDetectContentLanguage))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (contentArchiving != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "content_archiving", contentArchiving))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (contentArchivingPeriod != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "content_archiving_period", contentArchivingPeriod))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Source>("/content_sources/{sourceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
