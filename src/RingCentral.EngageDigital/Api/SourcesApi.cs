/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ISourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllSourcesResponse</returns>
        GetAllSourcesResponse GetAllSources (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllSourcesResponse</returns>
        ApiResponse<GetAllSourcesResponse> GetAllSourcesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Source</returns>
        Source GetSource (string sourceId);

        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>ApiResponse of Source</returns>
        ApiResponse<Source> GetSourceWithHttpInfo (string sourceId);
        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Source</returns>
        Source UpdateSource (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null);

        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>ApiResponse of Source</returns>
        ApiResponse<Source> UpdateSourceWithHttpInfo (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllSourcesResponse</returns>
        System.Threading.Tasks.Task<GetAllSourcesResponse> GetAllSourcesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all sources
        /// </summary>
        /// <remarks>
        /// This method renders sources ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSourcesResponse>> GetAllSourcesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of Source</returns>
        System.Threading.Tasks.Task<Source> GetSourceAsync (string sourceId);

        /// <summary>
        /// Getting a source from its id
        /// </summary>
        /// <remarks>
        /// This method renders a source from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of ApiResponse (Source)</returns>
        System.Threading.Tasks.Task<ApiResponse<Source>> GetSourceAsyncWithHttpInfo (string sourceId);
        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of Source</returns>
        System.Threading.Tasks.Task<Source> UpdateSourceAsync (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null);

        /// <summary>
        /// Updating a source
        /// </summary>
        /// <remarks>
        /// This method updates an existing source from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of ApiResponse (Source)</returns>
        System.Threading.Tasks.Task<ApiResponse<Source>> UpdateSourceAsyncWithHttpInfo (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class SourcesApi : ISourcesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourcesApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class
        /// </summary>
        /// <returns></returns>
        public SourcesApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SourcesApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllSourcesResponse</returns>
        public GetAllSourcesResponse GetAllSources (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllSourcesResponse> localVarResponse = GetAllSourcesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllSourcesResponse</returns>
        public ApiResponse< GetAllSourcesResponse > GetAllSourcesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./content_sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllSourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSourcesResponse)));
        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllSourcesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllSourcesResponse> GetAllSourcesAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllSourcesResponse> localVarResponse = await GetAllSourcesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all sources This method renders sources ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSourcesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllSourcesResponse>> GetAllSourcesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./content_sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSourcesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllSourcesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSourcesResponse)));
        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Source</returns>
        public Source GetSource (string sourceId)
        {
             ApiResponse<Source> localVarResponse = GetSourceWithHttpInfo(sourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>ApiResponse of Source</returns>
        public ApiResponse< Source > GetSourceWithHttpInfo (string sourceId)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->GetSource");

            var localVarPath = "./content_sources/{sourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Source>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Source) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Source)));
        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of Source</returns>
        public async System.Threading.Tasks.Task<Source> GetSourceAsync (string sourceId)
        {
             ApiResponse<Source> localVarResponse = await GetSourceAsyncWithHttpInfo(sourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a source from its id This method renders a source from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <returns>Task of ApiResponse (Source)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Source>> GetSourceAsyncWithHttpInfo (string sourceId)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->GetSource");

            var localVarPath = "./content_sources/{sourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Source>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Source) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Source)));
        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Source</returns>
        public Source UpdateSource (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null)
        {
             ApiResponse<Source> localVarResponse = UpdateSourceWithHttpInfo(sourceId, name, active, channelId, color, slaResponse, slaExpiredStrategy, interventionMessagesBoost, transferredTasksBoost, hiddenFromStats, defaultCategoryIds, userThreadDefaultCategoryIds, defaultContentLanguage, autoDetectContentLanguage, contentArchiving, contentArchivingPeriod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>ApiResponse of Source</returns>
        public ApiResponse< Source > UpdateSourceWithHttpInfo (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSource");

            var localVarPath = "./content_sources/{sourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_id", channelId)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (slaResponse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sla_response", slaResponse)); // query parameter
            if (slaExpiredStrategy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sla_expired_strategy", slaExpiredStrategy)); // query parameter
            if (interventionMessagesBoost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "intervention_messages_boost", interventionMessagesBoost)); // query parameter
            if (transferredTasksBoost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferred_tasks_boost", transferredTasksBoost)); // query parameter
            if (hiddenFromStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden_from_stats", hiddenFromStats)); // query parameter
            if (defaultCategoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "default_category_ids[]", defaultCategoryIds)); // query parameter
            if (userThreadDefaultCategoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_thread_default_category_ids[]", userThreadDefaultCategoryIds)); // query parameter
            if (defaultContentLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "default_content_language", defaultContentLanguage)); // query parameter
            if (autoDetectContentLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_detect_content_language", autoDetectContentLanguage)); // query parameter
            if (contentArchiving != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_archiving", contentArchiving)); // query parameter
            if (contentArchivingPeriod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_archiving_period", contentArchivingPeriod)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Source>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Source) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Source)));
        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of Source</returns>
        public async System.Threading.Tasks.Task<Source> UpdateSourceAsync (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null)
        {
             ApiResponse<Source> localVarResponse = await UpdateSourceAsyncWithHttpInfo(sourceId, name, active, channelId, color, slaResponse, slaExpiredStrategy, interventionMessagesBoost, transferredTasksBoost, hiddenFromStats, defaultCategoryIds, userThreadDefaultCategoryIds, defaultContentLanguage, autoDetectContentLanguage, contentArchiving, contentArchivingPeriod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a source This method updates an existing source from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="name">Source name (optional)</param>
        /// <param name="active">Activate/deactivate the source (Boolean) (optional)</param>
        /// <param name="channelId">Channel (optional)</param>
        /// <param name="color">Color of the icon (see S​ ource colors​) (Integer) (optional)</param>
        /// <param name="slaResponse">Response time (seconds) (optional)</param>
        /// <param name="slaExpiredStrategy">SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;) (optional)</param>
        /// <param name="interventionMessagesBoost">Priority boost of messages with intervention (Integer) (optional)</param>
        /// <param name="transferredTasksBoost">Priority boost of transferred tasks (Integer) (optional)</param>
        /// <param name="hiddenFromStats">Hide from statistics (Boolean) (optional)</param>
        /// <param name="defaultCategoryIds">Default categories (optional)</param>
        /// <param name="userThreadDefaultCategoryIds">Default categories (agent messages) (optional)</param>
        /// <param name="defaultContentLanguage">Default content language (optional)</param>
        /// <param name="autoDetectContentLanguage">Auto-detect content language (Boolean) (optional)</param>
        /// <param name="contentArchiving">Automatic archiving of old contents (Boolean) (optional)</param>
        /// <param name="contentArchivingPeriod">Archive contents older than (seconds) (optional)</param>
        /// <returns>Task of ApiResponse (Source)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Source>> UpdateSourceAsyncWithHttpInfo (string sourceId, string name = null, bool? active = null, string channelId = null, int? color = null, int? slaResponse = null, string slaExpiredStrategy = null, int? interventionMessagesBoost = null, int? transferredTasksBoost = null, bool? hiddenFromStats = null, List<string> defaultCategoryIds = null, List<string> userThreadDefaultCategoryIds = null, string defaultContentLanguage = null, bool? autoDetectContentLanguage = null, bool? contentArchiving = null, int? contentArchivingPeriod = null)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSource");

            var localVarPath = "./content_sources/{sourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceId != null) localVarPathParams.Add("sourceId", this.Configuration.ApiClient.ParameterToString(sourceId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_id", channelId)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (slaResponse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sla_response", slaResponse)); // query parameter
            if (slaExpiredStrategy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sla_expired_strategy", slaExpiredStrategy)); // query parameter
            if (interventionMessagesBoost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "intervention_messages_boost", interventionMessagesBoost)); // query parameter
            if (transferredTasksBoost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferred_tasks_boost", transferredTasksBoost)); // query parameter
            if (hiddenFromStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden_from_stats", hiddenFromStats)); // query parameter
            if (defaultCategoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "default_category_ids[]", defaultCategoryIds)); // query parameter
            if (userThreadDefaultCategoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_thread_default_category_ids[]", userThreadDefaultCategoryIds)); // query parameter
            if (defaultContentLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "default_content_language", defaultContentLanguage)); // query parameter
            if (autoDetectContentLanguage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auto_detect_content_language", autoDetectContentLanguage)); // query parameter
            if (contentArchiving != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_archiving", contentArchiving)); // query parameter
            if (contentArchivingPeriod != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_archiving_period", contentArchivingPeriod)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Source>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Source) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Source)));
        }

    }
}
