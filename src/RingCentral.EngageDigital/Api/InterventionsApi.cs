/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IInterventionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        Intervention CancelIntervention (string interventionId);

        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> CancelInterventionWithHttpInfo (string interventionId);
        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Intervention</returns>
        Intervention CategorizeIntervention (string interventionId, List<string> categoryIds);

        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> CategorizeInterventionWithHttpInfo (string interventionId, List<string> categoryIds);
        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        Intervention CloseIntervention (string interventionId);

        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> CloseInterventionWithHttpInfo (string interventionId);
        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>GetAllInterventionsResponse</returns>
        GetAllInterventionsResponse CreateIntervention (string contentId);

        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        ApiResponse<GetAllInterventionsResponse> CreateInterventionWithHttpInfo (string contentId);
        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllInterventionsResponse</returns>
        GetAllInterventionsResponse GetAllInterventions (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        ApiResponse<GetAllInterventionsResponse> GetAllInterventionsWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        Intervention GetIntervention (string interventionId);

        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> GetInterventionWithHttpInfo (string interventionId);
        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Intervention</returns>
        Intervention ReassignIntervention (string interventionId, string userId);

        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> ReassignInterventionWithHttpInfo (string interventionId, string userId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> CancelInterventionAsync (string interventionId);

        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> CancelInterventionAsyncWithHttpInfo (string interventionId);
        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> CategorizeInterventionAsync (string interventionId, List<string> categoryIds);

        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> CategorizeInterventionAsyncWithHttpInfo (string interventionId, List<string> categoryIds);
        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> CloseInterventionAsync (string interventionId);

        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> CloseInterventionAsyncWithHttpInfo (string interventionId);
        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        System.Threading.Tasks.Task<GetAllInterventionsResponse> CreateInterventionAsync (string contentId);

        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInterventionsResponse>> CreateInterventionAsyncWithHttpInfo (string contentId);
        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        System.Threading.Tasks.Task<GetAllInterventionsResponse> GetAllInterventionsAsync (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInterventionsResponse>> GetAllInterventionsAsyncWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> GetInterventionAsync (string interventionId);

        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> GetInterventionAsyncWithHttpInfo (string interventionId);
        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> ReassignInterventionAsync (string interventionId, string userId);

        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> ReassignInterventionAsyncWithHttpInfo (string interventionId, string userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InterventionsApi : IInterventionsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InterventionsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public InterventionsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InterventionsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        public Intervention CancelIntervention (string interventionId)
        {
             ApiResponse<Intervention> localVarResponse = CancelInterventionWithHttpInfo(interventionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public ApiResponse< Intervention > CancelInterventionWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CancelIntervention");

            var localVarPath = "./interventions/{interventionId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> CancelInterventionAsync (string interventionId)
        {
             ApiResponse<Intervention> localVarResponse = await CancelInterventionAsyncWithHttpInfo(interventionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Intervention>> CancelInterventionAsyncWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CancelIntervention");

            var localVarPath = "./interventions/{interventionId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Intervention</returns>
        public Intervention CategorizeIntervention (string interventionId, List<string> categoryIds)
        {
             ApiResponse<Intervention> localVarResponse = CategorizeInterventionWithHttpInfo(interventionId, categoryIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public ApiResponse< Intervention > CategorizeInterventionWithHttpInfo (string interventionId, List<string> categoryIds)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CategorizeIntervention");
            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new ApiException(400, "Missing required parameter 'categoryIds' when calling InterventionsApi->CategorizeIntervention");

            var localVarPath = "./interventions/{interventionId}/update_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids[]", categoryIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategorizeIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> CategorizeInterventionAsync (string interventionId, List<string> categoryIds)
        {
             ApiResponse<Intervention> localVarResponse = await CategorizeInterventionAsyncWithHttpInfo(interventionId, categoryIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Intervention>> CategorizeInterventionAsyncWithHttpInfo (string interventionId, List<string> categoryIds)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CategorizeIntervention");
            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new ApiException(400, "Missing required parameter 'categoryIds' when calling InterventionsApi->CategorizeIntervention");

            var localVarPath = "./interventions/{interventionId}/update_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids[]", categoryIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategorizeIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        public Intervention CloseIntervention (string interventionId)
        {
             ApiResponse<Intervention> localVarResponse = CloseInterventionWithHttpInfo(interventionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public ApiResponse< Intervention > CloseInterventionWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CloseIntervention");

            var localVarPath = "./interventions/{interventionId}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> CloseInterventionAsync (string interventionId)
        {
             ApiResponse<Intervention> localVarResponse = await CloseInterventionAsyncWithHttpInfo(interventionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Intervention>> CloseInterventionAsyncWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CloseIntervention");

            var localVarPath = "./interventions/{interventionId}/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>GetAllInterventionsResponse</returns>
        public GetAllInterventionsResponse CreateIntervention (string contentId)
        {
             ApiResponse<GetAllInterventionsResponse> localVarResponse = CreateInterventionWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        public ApiResponse< GetAllInterventionsResponse > CreateInterventionWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling InterventionsApi->CreateIntervention");

            var localVarPath = "./interventions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_id", contentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInterventionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllInterventionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInterventionsResponse)));
        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInterventionsResponse> CreateInterventionAsync (string contentId)
        {
             ApiResponse<GetAllInterventionsResponse> localVarResponse = await CreateInterventionAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllInterventionsResponse>> CreateInterventionAsyncWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling InterventionsApi->CreateIntervention");

            var localVarPath = "./interventions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_id", contentId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInterventionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllInterventionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInterventionsResponse)));
        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllInterventionsResponse</returns>
        public GetAllInterventionsResponse GetAllInterventions (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllInterventionsResponse> localVarResponse = GetAllInterventionsWithHttpInfo(threadId, userId, identityGroupId, identityId, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        public ApiResponse< GetAllInterventionsResponse > GetAllInterventionsWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./interventions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thread_id", threadId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (identityGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity_group_id", identityGroupId)); // query parameter
            if (identityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "identity_id", identityId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInterventions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInterventionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllInterventionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInterventionsResponse)));
        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInterventionsResponse> GetAllInterventionsAsync (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllInterventionsResponse> localVarResponse = await GetAllInterventionsAsyncWithHttpInfo(threadId, userId, identityGroupId, identityId, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllInterventionsResponse>> GetAllInterventionsAsyncWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./interventions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thread_id", threadId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (identityGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity_group_id", identityGroupId)); // query parameter
            if (identityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "identity_id", identityId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInterventions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInterventionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllInterventionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInterventionsResponse)));
        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        public Intervention GetIntervention (string interventionId)
        {
             ApiResponse<Intervention> localVarResponse = GetInterventionWithHttpInfo(interventionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public ApiResponse< Intervention > GetInterventionWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->GetIntervention");

            var localVarPath = "./interventions/{interventionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> GetInterventionAsync (string interventionId)
        {
             ApiResponse<Intervention> localVarResponse = await GetInterventionAsyncWithHttpInfo(interventionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Intervention>> GetInterventionAsyncWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->GetIntervention");

            var localVarPath = "./interventions/{interventionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Intervention</returns>
        public Intervention ReassignIntervention (string interventionId, string userId)
        {
             ApiResponse<Intervention> localVarResponse = ReassignInterventionWithHttpInfo(interventionId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public ApiResponse< Intervention > ReassignInterventionWithHttpInfo (string interventionId, string userId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->ReassignIntervention");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InterventionsApi->ReassignIntervention");

            var localVarPath = "./interventions/{interventionId}/reassign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReassignIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> ReassignInterventionAsync (string interventionId, string userId)
        {
             ApiResponse<Intervention> localVarResponse = await ReassignInterventionAsyncWithHttpInfo(interventionId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Intervention>> ReassignInterventionAsyncWithHttpInfo (string interventionId, string userId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->ReassignIntervention");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InterventionsApi->ReassignIntervention");

            var localVarPath = "./interventions/{interventionId}/reassign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interventionId != null) localVarPathParams.Add("interventionId", this.Configuration.ApiClient.ParameterToString(interventionId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReassignIntervention", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Intervention>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Intervention) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Intervention)));
        }

    }
}
