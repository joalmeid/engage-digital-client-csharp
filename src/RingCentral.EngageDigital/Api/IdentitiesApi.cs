/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all identities
        /// </summary>
        /// <remarks>
        /// This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllIdentitiesResponse</returns>
        GetAllIdentitiesResponse GetAllIdentities (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all identities
        /// </summary>
        /// <remarks>
        /// This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllIdentitiesResponse</returns>
        ApiResponse<GetAllIdentitiesResponse> GetAllIdentitiesWithHttpInfo (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting an identity from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>Identity</returns>
        Identity GetIdentity (string identityId);

        /// <summary>
        /// Getting an identity from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>ApiResponse of Identity</returns>
        ApiResponse<Identity> GetIdentityWithHttpInfo (string identityId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all identities
        /// </summary>
        /// <remarks>
        /// This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllIdentitiesResponse</returns>
        System.Threading.Tasks.Task<GetAllIdentitiesResponse> GetAllIdentitiesAsync (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all identities
        /// </summary>
        /// <remarks>
        /// This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllIdentitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllIdentitiesResponse>> GetAllIdentitiesAsyncWithHttpInfo (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting an identity from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>Task of Identity</returns>
        System.Threading.Tasks.Task<Identity> GetIdentityAsync (string identityId);

        /// <summary>
        /// Getting an identity from its id
        /// </summary>
        /// <remarks>
        /// This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Identity>> GetIdentityAsyncWithHttpInfo (string identityId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApi : IIdentitiesApiSync, IIdentitiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentitiesApi : IIdentitiesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentitiesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentitiesApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentitiesApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IdentitiesApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all identities This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllIdentitiesResponse</returns>
        public GetAllIdentitiesResponse GetAllIdentities (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllIdentitiesResponse> localVarResponse = GetAllIdentitiesWithHttpInfo(communityId, identityGroupId, userId, sort, foreignId, uuid, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all identities This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllIdentitiesResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllIdentitiesResponse > GetAllIdentitiesWithHttpInfo (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (communityId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "community_id", communityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityGroupId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "identity_group_id", identityGroupId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (foreignId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "foreign_id", foreignId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (uuid != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllIdentitiesResponse >("/identities", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllIdentities", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all identities This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllIdentitiesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllIdentitiesResponse> GetAllIdentitiesAsync (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllIdentitiesResponse> localVarResponse = await GetAllIdentitiesAsyncWithHttpInfo(communityId, identityGroupId, userId, sort, foreignId, uuid, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all identities This method renders identities ordered by creation date (descending). Only identities in sources where token’s user has “read” permission are returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="communityId">To filter identities on given community id. (optional)</param>
        /// <param name="identityGroupId">To filter on given group id. (optional)</param>
        /// <param name="userId">To filter identities on given user id. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the identities. The value can be “created_at” or (optional)</param>
        /// <param name="foreignId">To filter identities on given user id (optional)</param>
        /// <param name="uuid">To filter identities on given uuid (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllIdentitiesResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllIdentitiesResponse>> GetAllIdentitiesAsyncWithHttpInfo (string communityId = default(string), string identityGroupId = default(string), string userId = default(string), string sort = default(string), string foreignId = default(string), string uuid = default(string), int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (communityId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "community_id", communityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (identityGroupId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "identity_group_id", identityGroupId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (foreignId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "foreign_id", foreignId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (uuid != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllIdentitiesResponse>("/identities", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllIdentities", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting an identity from its id This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>Identity</returns>
        public Identity GetIdentity (string identityId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Identity> localVarResponse = GetIdentityWithHttpInfo(identityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an identity from its id This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>ApiResponse of Identity</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Identity > GetIdentityWithHttpInfo (string identityId)
        {
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'identityId' when calling IdentitiesApi->GetIdentity");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (identityId != null)
                localVarRequestOptions.PathParameters.Add("identityId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(identityId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Identity >("/identities/{identityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting an identity from its id This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>Task of Identity</returns>
        public async System.Threading.Tasks.Task<Identity> GetIdentityAsync (string identityId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Identity> localVarResponse = await GetIdentityAsyncWithHttpInfo(identityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an identity from its id This method renders an identity from given id. If token’s user does not have “read” on identity’s source community a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityId"></param>
        /// <returns>Task of ApiResponse (Identity)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Identity>> GetIdentityAsyncWithHttpInfo (string identityId)
        {
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'identityId' when calling IdentitiesApi->GetIdentity");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (identityId != null)
                localVarRequestOptions.PathParameters.Add("identityId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(identityId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Identity>("/identities/{identityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
