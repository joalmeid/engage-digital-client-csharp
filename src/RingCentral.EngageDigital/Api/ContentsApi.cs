/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IContentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Content</returns>
        Content CategorizeContent (string contentId, List<string> categoryIds);

        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> CategorizeContentWithHttpInfo (string contentId, List<string> categoryIds);
        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Content</returns>
        Content CreateContent (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null);

        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> CreateContentWithHttpInfo (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null);
        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllContentsResponse</returns>
        GetAllContentsResponse GetAllContents (string q = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllContentsResponse</returns>
        ApiResponse<GetAllContentsResponse> GetAllContentsWithHttpInfo (string q = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        Content GetContent (string contentId);

        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> GetContentWithHttpInfo (string contentId);
        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        Content IgnoreContent (string contentId);

        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> IgnoreContentWithHttpInfo (string contentId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> CategorizeContentAsync (string contentId, List<string> categoryIds);

        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> CategorizeContentAsyncWithHttpInfo (string contentId, List<string> categoryIds);
        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> CreateContentAsync (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null);

        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> CreateContentAsyncWithHttpInfo (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null);
        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllContentsResponse</returns>
        System.Threading.Tasks.Task<GetAllContentsResponse> GetAllContentsAsync (string q = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllContentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllContentsResponse>> GetAllContentsAsyncWithHttpInfo (string q = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> GetContentAsync (string contentId);

        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> GetContentAsyncWithHttpInfo (string contentId);
        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> IgnoreContentAsync (string contentId);

        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> IgnoreContentAsyncWithHttpInfo (string contentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ContentsApi : IContentsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContentsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Content</returns>
        public Content CategorizeContent (string contentId, List<string> categoryIds)
        {
             ApiResponse<Content> localVarResponse = CategorizeContentWithHttpInfo(contentId, categoryIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>ApiResponse of Content</returns>
        public ApiResponse< Content > CategorizeContentWithHttpInfo (string contentId, List<string> categoryIds)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->CategorizeContent");
            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new ApiException(400, "Missing required parameter 'categoryIds' when calling ContentsApi->CategorizeContent");

            var localVarPath = "./contents/{contentId}/update_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids[]", categoryIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategorizeContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> CategorizeContentAsync (string contentId, List<string> categoryIds)
        {
             ApiResponse<Content> localVarResponse = await CategorizeContentAsyncWithHttpInfo(contentId, categoryIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Content>> CategorizeContentAsyncWithHttpInfo (string contentId, List<string> categoryIds)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->CategorizeContent");
            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new ApiException(400, "Missing required parameter 'categoryIds' when calling ContentsApi->CategorizeContent");

            var localVarPath = "./contents/{contentId}/update_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids[]", categoryIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategorizeContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Content</returns>
        public Content CreateContent (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null)
        {
             ApiResponse<Content> localVarResponse = CreateContentWithHttpInfo(body, authorId, inReplyToId, _private, sourceId, attachmentIds, title, to, cc, bcc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>ApiResponse of Content</returns>
        public ApiResponse< Content > CreateContentWithHttpInfo (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContentsApi->CreateContent");

            var localVarPath = "./contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_id", authorId)); // query parameter
            if (body != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "body", body)); // query parameter
            if (inReplyToId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "in_reply_to_id", inReplyToId)); // query parameter
            if (_private != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "private", _private)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_id", sourceId)); // query parameter
            if (attachmentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "attachment_ids[]", attachmentIds)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "to[]", to)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "cc[]", cc)); // query parameter
            if (bcc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "bcc[]", bcc)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> CreateContentAsync (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null)
        {
             ApiResponse<Content> localVarResponse = await CreateContentAsyncWithHttpInfo(body, authorId, inReplyToId, _private, sourceId, attachmentIds, title, to, cc, bcc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Content>> CreateContentAsyncWithHttpInfo (string body, string authorId = null, string inReplyToId = null, int? _private = null, string sourceId = null, List<string> attachmentIds = null, string title = null, List<string> to = null, List<string> cc = null, List<string> bcc = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContentsApi->CreateContent");

            var localVarPath = "./contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_id", authorId)); // query parameter
            if (body != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "body", body)); // query parameter
            if (inReplyToId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "in_reply_to_id", inReplyToId)); // query parameter
            if (_private != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "private", _private)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_id", sourceId)); // query parameter
            if (attachmentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "attachment_ids[]", attachmentIds)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "to[]", to)); // query parameter
            if (cc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "cc[]", cc)); // query parameter
            if (bcc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "bcc[]", bcc)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllContentsResponse</returns>
        public GetAllContentsResponse GetAllContents (string q = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllContentsResponse> localVarResponse = GetAllContentsWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllContentsResponse</returns>
        public ApiResponse< GetAllContentsResponse > GetAllContentsWithHttpInfo (string q = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllContentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllContentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllContentsResponse)));
        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllContentsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllContentsResponse> GetAllContentsAsync (string q = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllContentsResponse> localVarResponse = await GetAllContentsAsyncWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllContentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllContentsResponse>> GetAllContentsAsyncWithHttpInfo (string q = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllContentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllContentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllContentsResponse)));
        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        public Content GetContent (string contentId)
        {
             ApiResponse<Content> localVarResponse = GetContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        public ApiResponse< Content > GetContentWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->GetContent");

            var localVarPath = "./contents/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> GetContentAsync (string contentId)
        {
             ApiResponse<Content> localVarResponse = await GetContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Content>> GetContentAsyncWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->GetContent");

            var localVarPath = "./contents/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        public Content IgnoreContent (string contentId)
        {
             ApiResponse<Content> localVarResponse = IgnoreContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        public ApiResponse< Content > IgnoreContentWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->IgnoreContent");

            var localVarPath = "./contents/{contentId}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IgnoreContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> IgnoreContentAsync (string contentId)
        {
             ApiResponse<Content> localVarResponse = await IgnoreContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Content>> IgnoreContentAsyncWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->IgnoreContent");

            var localVarPath = "./contents/{contentId}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IgnoreContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Content>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Content) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Content)));
        }

    }
}
