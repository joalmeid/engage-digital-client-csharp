/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Content</returns>
        Content CategorizeContent (string contentId, Collection<string> categoryIds);

        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> CategorizeContentWithHttpInfo (string contentId, Collection<string> categoryIds);
        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Content</returns>
        Content CreateContent (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>));

        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> CreateContentWithHttpInfo (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>));
        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllContentsResponse</returns>
        GetAllContentsResponse GetAllContents (string q = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllContentsResponse</returns>
        ApiResponse<GetAllContentsResponse> GetAllContentsWithHttpInfo (string q = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        Content GetContent (string contentId);

        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> GetContentWithHttpInfo (string contentId);
        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        Content IgnoreContent (string contentId);

        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        ApiResponse<Content> IgnoreContentWithHttpInfo (string contentId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> CategorizeContentAsync (string contentId, Collection<string> categoryIds);

        /// <summary>
        /// Categorizing a content
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> CategorizeContentAsyncWithHttpInfo (string contentId, Collection<string> categoryIds);
        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> CreateContentAsync (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>));

        /// <summary>
        /// Creating a content
        /// </summary>
        /// <remarks>
        /// This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> CreateContentAsyncWithHttpInfo (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>));
        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllContentsResponse</returns>
        System.Threading.Tasks.Task<GetAllContentsResponse> GetAllContentsAsync (string q = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Contents
        /// </summary>
        /// <remarks>
        /// This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllContentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllContentsResponse>> GetAllContentsAsyncWithHttpInfo (string q = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> GetContentAsync (string contentId);

        /// <summary>
        /// Getting a content from its id
        /// </summary>
        /// <remarks>
        /// This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> GetContentAsyncWithHttpInfo (string contentId);
        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        System.Threading.Tasks.Task<Content> IgnoreContentAsync (string contentId);

        /// <summary>
        /// Ignoring a content
        /// </summary>
        /// <remarks>
        /// Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        System.Threading.Tasks.Task<ApiResponse<Content>> IgnoreContentAsyncWithHttpInfo (string contentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentsApi : IContentsApiSync, IContentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentsApi : IContentsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContentsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Content</returns>
        public Content CategorizeContent (string contentId, Collection<string> categoryIds)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = CategorizeContentWithHttpInfo(contentId, categoryIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>ApiResponse of Content</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Content > CategorizeContentWithHttpInfo (string contentId, Collection<string> categoryIds)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->CategorizeContent");

            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'categoryIds' when calling ContentsApi->CategorizeContent");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentId != null)
                localVarRequestOptions.PathParameters.Add("contentId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(contentId)); // path parameter
            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< Content >("/contents/{contentId}/update_categories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategorizeContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> CategorizeContentAsync (string contentId, Collection<string> categoryIds)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = await CategorizeContentAsyncWithHttpInfo(contentId, categoryIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Categorizing a content This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="categoryIds">An array containing the new categories to set on the content.</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Content>> CategorizeContentAsyncWithHttpInfo (string contentId, Collection<string> categoryIds)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->CategorizeContent");

            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'categoryIds' when calling ContentsApi->CategorizeContent");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (contentId != null)
                localVarRequestOptions.PathParameters.Add("contentId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(contentId)); // path parameter
            if (categoryIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Content>("/contents/{contentId}/update_categories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategorizeContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Content</returns>
        public Content CreateContent (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = CreateContentWithHttpInfo(body, authorId, inReplyToId, _private, sourceId, attachmentIds, title, to, cc, bcc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>ApiResponse of Content</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Content > CreateContentWithHttpInfo (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'body' when calling ContentsApi->CreateContent");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (authorId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "author_id", authorId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (body != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (inReplyToId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "in_reply_to_id", inReplyToId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (_private != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "private", _private))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sourceId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "source_id", sourceId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (attachmentIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "attachment_ids[]", attachmentIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (title != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "title", title))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (to != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "to[]", to))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (cc != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "cc[]", cc))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (bcc != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "bcc[]", bcc))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< Content >("/contents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> CreateContentAsync (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = await CreateContentAsyncWithHttpInfo(body, authorId, inReplyToId, _private, sourceId, attachmentIds, title, to, cc, bcc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a content This method allows you to create an new content. It can be a reply to another content or a content that initiate discussion. It use token’s user as content user if he is authorized. Content will be created in Dimelo Digital and pushed asynchronously to the source.  Replying to a customer content is usually possible (unless the source/conversation is read only).  Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The content’s body. This parameter is mandatory.</param>
        /// <param name="authorId">The identity id of content. This parameter is not mandatory, by default it use the token’s user first identity on source. (optional)</param>
        /// <param name="inReplyToId">The content’s id you want to reply to. If omitted, a new discussion will be created. If source does not support to initiate discussion this parameter is mandatory. (optional)</param>
        /// <param name="_private">Created contents are public by default, set this parameter to \&quot;1\&quot; in order to create a private reply. It is NOT supported on every source. (optional)</param>
        /// <param name="sourceId">The source to create content to. If you specify &#x60;in_reply_to_id&#x60; parameter, source will be determined from it. Otherwise, this parameter is mandatory. (optional)</param>
        /// <param name="attachmentIds">An array containing the attachments’ ids that need to be attached to this content. (optional)</param>
        /// <param name="title">For an email source. The subject of the email. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="to">For an email or SMS source. For an email, an array containing the email addresses used in the “To” section of the email. This parameter is mandatory when initiating a discussion. For a SMS, the number the SMS will be sent to. It must start with 00 or +, example: +33634231224 or 0033634231224. This parameter is mandatory when initiating a discussion. (optional)</param>
        /// <param name="cc">For an email source. An array containing the email addresses used in the “Cc” section of the email. (optional)</param>
        /// <param name="bcc">For an email source. An array containing the email addresses used in the “Bcc” section of the email. (optional)</param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Content>> CreateContentAsyncWithHttpInfo (string body, string authorId = default(string), string inReplyToId = default(string), int? _private = default(int?), string sourceId = default(string), Collection<string> attachmentIds = default(Collection<string>), string title = default(string), Collection<string> to = default(Collection<string>), Collection<string> cc = default(Collection<string>), Collection<string> bcc = default(Collection<string>))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'body' when calling ContentsApi->CreateContent");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (authorId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "author_id", authorId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (body != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (inReplyToId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "in_reply_to_id", inReplyToId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (_private != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "private", _private))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sourceId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "source_id", sourceId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (attachmentIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "attachment_ids[]", attachmentIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (title != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "title", title))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (to != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "to[]", to))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (cc != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "cc[]", cc))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (bcc != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "bcc[]", bcc))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Content>("/contents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllContentsResponse</returns>
        public GetAllContentsResponse GetAllContents (string q = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllContentsResponse> localVarResponse = GetAllContentsWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllContentsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllContentsResponse > GetAllContentsWithHttpInfo (string q = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllContentsResponse >("/contents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllContentsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllContentsResponse> GetAllContentsAsync (string q = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllContentsResponse> localVarResponse = await GetAllContentsAsyncWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Contents This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter contents on given query. Query works exactly like threads query but only have those keywords: intervention,identity, identity_group, source, status_in, thread or text. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;intervention:\&quot;7f946431b6eebffafae642cc\&quot;%20source:\&quot;d19c81948c137d86dac77216\&quot; Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllContentsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllContentsResponse>> GetAllContentsAsyncWithHttpInfo (string q = default(string), int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllContentsResponse>("/contents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        public Content GetContent (string contentId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = GetContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Content > GetContentWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->GetContent");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentId != null)
                localVarRequestOptions.PathParameters.Add("contentId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Content >("/contents/{contentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> GetContentAsync (string contentId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = await GetContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a content from its id This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Content>> GetContentAsyncWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->GetContent");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (contentId != null)
                localVarRequestOptions.PathParameters.Add("contentId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(contentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Content>("/contents/{contentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Content</returns>
        public Content IgnoreContent (string contentId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = IgnoreContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of Content</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Content > IgnoreContentWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->IgnoreContent");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentId != null)
                localVarRequestOptions.PathParameters.Add("contentId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put< Content >("/contents/{contentId}/ignore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of Content</returns>
        public async System.Threading.Tasks.Task<Content> IgnoreContentAsync (string contentId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Content> localVarResponse = await IgnoreContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ignoring a content Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (Content)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Content>> IgnoreContentAsyncWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'contentId' when calling ContentsApi->IgnoreContent");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (contentId != null)
                localVarRequestOptions.PathParameters.Add("contentId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(contentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Content>("/contents/{contentId}/ignore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
