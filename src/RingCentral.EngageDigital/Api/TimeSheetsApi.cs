/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ITimeSheetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a time sheet
        /// </summary>
        /// <remarks>
        /// This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>TimeSheet</returns>
        TimeSheet CreateTimeSheet (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);

        /// <summary>
        /// Creating a time sheet
        /// </summary>
        /// <remarks>
        /// This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>ApiResponse of TimeSheet</returns>
        ApiResponse<TimeSheet> CreateTimeSheetWithHttpInfo (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);
        /// <summary>
        /// Deleting a time sheet
        /// </summary>
        /// <remarks>
        /// This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>TimeSheet</returns>
        TimeSheet DeleteTimeSheet (string timeSheetId);

        /// <summary>
        /// Deleting a time sheet
        /// </summary>
        /// <remarks>
        /// This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>ApiResponse of TimeSheet</returns>
        ApiResponse<TimeSheet> DeleteTimeSheetWithHttpInfo (string timeSheetId);
        /// <summary>
        /// Getting all time sheets
        /// </summary>
        /// <remarks>
        /// This method renders time sheets ordered by active and label.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTimeSheetsResponse</returns>
        GetAllTimeSheetsResponse GetAllTimeSheets (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all time sheets
        /// </summary>
        /// <remarks>
        /// This method renders time sheets ordered by active and label.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTimeSheetsResponse</returns>
        ApiResponse<GetAllTimeSheetsResponse> GetAllTimeSheetsWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a time sheet from its id
        /// </summary>
        /// <remarks>
        /// This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>TimeSheet</returns>
        TimeSheet GetTimeSheet (string timeSheetId);

        /// <summary>
        /// Getting a time sheet from its id
        /// </summary>
        /// <remarks>
        /// This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>ApiResponse of TimeSheet</returns>
        ApiResponse<TimeSheet> GetTimeSheetWithHttpInfo (string timeSheetId);
        /// <summary>
        /// Updating a time sheet
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>TimeSheet</returns>
        TimeSheet UpdateTimeSheet (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);

        /// <summary>
        /// Updating a time sheet
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>ApiResponse of TimeSheet</returns>
        ApiResponse<TimeSheet> UpdateTimeSheetWithHttpInfo (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a time sheet
        /// </summary>
        /// <remarks>
        /// This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of TimeSheet</returns>
        System.Threading.Tasks.Task<TimeSheet> CreateTimeSheetAsync (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);

        /// <summary>
        /// Creating a time sheet
        /// </summary>
        /// <remarks>
        /// This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSheet>> CreateTimeSheetAsyncWithHttpInfo (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);
        /// <summary>
        /// Deleting a time sheet
        /// </summary>
        /// <remarks>
        /// This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of TimeSheet</returns>
        System.Threading.Tasks.Task<TimeSheet> DeleteTimeSheetAsync (string timeSheetId);

        /// <summary>
        /// Deleting a time sheet
        /// </summary>
        /// <remarks>
        /// This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSheet>> DeleteTimeSheetAsyncWithHttpInfo (string timeSheetId);
        /// <summary>
        /// Getting all time sheets
        /// </summary>
        /// <remarks>
        /// This method renders time sheets ordered by active and label.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTimeSheetsResponse</returns>
        System.Threading.Tasks.Task<GetAllTimeSheetsResponse> GetAllTimeSheetsAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all time sheets
        /// </summary>
        /// <remarks>
        /// This method renders time sheets ordered by active and label.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTimeSheetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTimeSheetsResponse>> GetAllTimeSheetsAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a time sheet from its id
        /// </summary>
        /// <remarks>
        /// This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of TimeSheet</returns>
        System.Threading.Tasks.Task<TimeSheet> GetTimeSheetAsync (string timeSheetId);

        /// <summary>
        /// Getting a time sheet from its id
        /// </summary>
        /// <remarks>
        /// This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSheet>> GetTimeSheetAsyncWithHttpInfo (string timeSheetId);
        /// <summary>
        /// Updating a time sheet
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of TimeSheet</returns>
        System.Threading.Tasks.Task<TimeSheet> UpdateTimeSheetAsync (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);

        /// <summary>
        /// Updating a time sheet
        /// </summary>
        /// <remarks>
        /// This method updates an existing team from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSheet>> UpdateTimeSheetAsyncWithHttpInfo (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class TimeSheetsApi : ITimeSheetsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSheetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeSheetsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSheetsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TimeSheetsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSheetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimeSheetsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a time sheet This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>TimeSheet</returns>
        public TimeSheet CreateTimeSheet (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
             ApiResponse<TimeSheet> localVarResponse = CreateTimeSheetWithHttpInfo(label, active, sourceIds, holidaysRegion, holidays, mondayHours, tuesdayHours, wednesdayHours, thursdayHours, fridayHours, saturdayHours, sundayHours);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a time sheet This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>ApiResponse of TimeSheet</returns>
        public ApiResponse< TimeSheet > CreateTimeSheetWithHttpInfo (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling TimeSheetsApi->CreateTimeSheet");

            var localVarPath = "./time_sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids", sourceIds)); // query parameter
            if (holidaysRegion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holidays_region", holidaysRegion)); // query parameter
            if (holidays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holidays", holidays)); // query parameter
            if (mondayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monday_hours", mondayHours)); // query parameter
            if (tuesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tuesday_hours", tuesdayHours)); // query parameter
            if (wednesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wednesday_hours", wednesdayHours)); // query parameter
            if (thursdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thursday_hours", thursdayHours)); // query parameter
            if (fridayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "friday_hours", fridayHours)); // query parameter
            if (saturdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "saturday_hours", saturdayHours)); // query parameter
            if (sundayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sunday_hours", sundayHours)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Creating a time sheet This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of TimeSheet</returns>
        public async System.Threading.Tasks.Task<TimeSheet> CreateTimeSheetAsync (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
             ApiResponse<TimeSheet> localVarResponse = await CreateTimeSheetAsyncWithHttpInfo(label, active, sourceIds, holidaysRegion, holidays, mondayHours, tuesdayHours, wednesdayHours, thursdayHours, fridayHours, saturdayHours, sundayHours);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a time sheet This method creates a time sheet. In case of success it renders the time sheet, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can create time sheet.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The label of the time sheet.</param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidaysRegion">A string containing the first two letters of your country (example: \&quot;fr\&quot;/\&quot;en\&quot;/\&quot;es\&quot;), useful to bootstrap default holidays following to a country. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeSheet>> CreateTimeSheetAsyncWithHttpInfo (string label, bool? active = null, List<string> sourceIds = null, string holidaysRegion = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling TimeSheetsApi->CreateTimeSheet");

            var localVarPath = "./time_sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids", sourceIds)); // query parameter
            if (holidaysRegion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holidays_region", holidaysRegion)); // query parameter
            if (holidays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holidays", holidays)); // query parameter
            if (mondayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monday_hours", mondayHours)); // query parameter
            if (tuesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tuesday_hours", tuesdayHours)); // query parameter
            if (wednesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wednesday_hours", wednesdayHours)); // query parameter
            if (thursdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thursday_hours", thursdayHours)); // query parameter
            if (fridayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "friday_hours", fridayHours)); // query parameter
            if (saturdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "saturday_hours", saturdayHours)); // query parameter
            if (sundayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sunday_hours", sundayHours)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Deleting a time sheet This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>TimeSheet</returns>
        public TimeSheet DeleteTimeSheet (string timeSheetId)
        {
             ApiResponse<TimeSheet> localVarResponse = DeleteTimeSheetWithHttpInfo(timeSheetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a time sheet This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>ApiResponse of TimeSheet</returns>
        public ApiResponse< TimeSheet > DeleteTimeSheetWithHttpInfo (string timeSheetId)
        {
            // verify the required parameter 'timeSheetId' is set
            if (timeSheetId == null)
                throw new ApiException(400, "Missing required parameter 'timeSheetId' when calling TimeSheetsApi->DeleteTimeSheet");

            var localVarPath = "./time_sheets/{timeSheetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeSheetId != null) localVarPathParams.Add("timeSheetId", this.Configuration.ApiClient.ParameterToString(timeSheetId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Deleting a time sheet This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of TimeSheet</returns>
        public async System.Threading.Tasks.Task<TimeSheet> DeleteTimeSheetAsync (string timeSheetId)
        {
             ApiResponse<TimeSheet> localVarResponse = await DeleteTimeSheetAsyncWithHttpInfo(timeSheetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a time sheet This method destroys an existing time sheet. It renders time sheet itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeSheet>> DeleteTimeSheetAsyncWithHttpInfo (string timeSheetId)
        {
            // verify the required parameter 'timeSheetId' is set
            if (timeSheetId == null)
                throw new ApiException(400, "Missing required parameter 'timeSheetId' when calling TimeSheetsApi->DeleteTimeSheet");

            var localVarPath = "./time_sheets/{timeSheetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeSheetId != null) localVarPathParams.Add("timeSheetId", this.Configuration.ApiClient.ParameterToString(timeSheetId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Getting all time sheets This method renders time sheets ordered by active and label.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTimeSheetsResponse</returns>
        public GetAllTimeSheetsResponse GetAllTimeSheets (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllTimeSheetsResponse> localVarResponse = GetAllTimeSheetsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all time sheets This method renders time sheets ordered by active and label.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTimeSheetsResponse</returns>
        public ApiResponse< GetAllTimeSheetsResponse > GetAllTimeSheetsWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./time_sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTimeSheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTimeSheetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllTimeSheetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTimeSheetsResponse)));
        }

        /// <summary>
        /// Getting all time sheets This method renders time sheets ordered by active and label.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTimeSheetsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTimeSheetsResponse> GetAllTimeSheetsAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllTimeSheetsResponse> localVarResponse = await GetAllTimeSheetsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all time sheets This method renders time sheets ordered by active and label.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTimeSheetsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllTimeSheetsResponse>> GetAllTimeSheetsAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./time_sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTimeSheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTimeSheetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllTimeSheetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTimeSheetsResponse)));
        }

        /// <summary>
        /// Getting a time sheet from its id This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>TimeSheet</returns>
        public TimeSheet GetTimeSheet (string timeSheetId)
        {
             ApiResponse<TimeSheet> localVarResponse = GetTimeSheetWithHttpInfo(timeSheetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a time sheet from its id This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>ApiResponse of TimeSheet</returns>
        public ApiResponse< TimeSheet > GetTimeSheetWithHttpInfo (string timeSheetId)
        {
            // verify the required parameter 'timeSheetId' is set
            if (timeSheetId == null)
                throw new ApiException(400, "Missing required parameter 'timeSheetId' when calling TimeSheetsApi->GetTimeSheet");

            var localVarPath = "./time_sheets/{timeSheetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeSheetId != null) localVarPathParams.Add("timeSheetId", this.Configuration.ApiClient.ParameterToString(timeSheetId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Getting a time sheet from its id This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of TimeSheet</returns>
        public async System.Threading.Tasks.Task<TimeSheet> GetTimeSheetAsync (string timeSheetId)
        {
             ApiResponse<TimeSheet> localVarResponse = await GetTimeSheetAsyncWithHttpInfo(timeSheetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a time sheet from its id This method renders a time sheet from given id.  Authorization​: only users that can see time sheets in administration section.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeSheet>> GetTimeSheetAsyncWithHttpInfo (string timeSheetId)
        {
            // verify the required parameter 'timeSheetId' is set
            if (timeSheetId == null)
                throw new ApiException(400, "Missing required parameter 'timeSheetId' when calling TimeSheetsApi->GetTimeSheet");

            var localVarPath = "./time_sheets/{timeSheetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeSheetId != null) localVarPathParams.Add("timeSheetId", this.Configuration.ApiClient.ParameterToString(timeSheetId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Updating a time sheet This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>TimeSheet</returns>
        public TimeSheet UpdateTimeSheet (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
             ApiResponse<TimeSheet> localVarResponse = UpdateTimeSheetWithHttpInfo(timeSheetId, active, label, sourceIds, holidays, mondayHours, tuesdayHours, wednesdayHours, thursdayHours, fridayHours, saturdayHours, sundayHours);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a time sheet This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>ApiResponse of TimeSheet</returns>
        public ApiResponse< TimeSheet > UpdateTimeSheetWithHttpInfo (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
            // verify the required parameter 'timeSheetId' is set
            if (timeSheetId == null)
                throw new ApiException(400, "Missing required parameter 'timeSheetId' when calling TimeSheetsApi->UpdateTimeSheet");

            var localVarPath = "./time_sheets/{timeSheetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeSheetId != null) localVarPathParams.Add("timeSheetId", this.Configuration.ApiClient.ParameterToString(timeSheetId)); // path parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter
            if (holidays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holidays", holidays)); // query parameter
            if (mondayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monday_hours", mondayHours)); // query parameter
            if (tuesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tuesday_hours", tuesdayHours)); // query parameter
            if (wednesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wednesday_hours", wednesdayHours)); // query parameter
            if (thursdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thursday_hours", thursdayHours)); // query parameter
            if (fridayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "friday_hours", fridayHours)); // query parameter
            if (saturdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "saturday_hours", saturdayHours)); // query parameter
            if (sundayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sunday_hours", sundayHours)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

        /// <summary>
        /// Updating a time sheet This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of TimeSheet</returns>
        public async System.Threading.Tasks.Task<TimeSheet> UpdateTimeSheetAsync (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
             ApiResponse<TimeSheet> localVarResponse = await UpdateTimeSheetAsyncWithHttpInfo(timeSheetId, active, label, sourceIds, holidays, mondayHours, tuesdayHours, wednesdayHours, thursdayHours, fridayHours, saturdayHours, sundayHours);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a time sheet This method updates an existing team from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSheetId"></param>
        /// <param name="active">true or false, this field is used to enable/disable a time sheet. (optional)</param>
        /// <param name="label">The label of the time sheet. (optional)</param>
        /// <param name="sourceIds">An array containing id of each source using your time sheet. (optional)</param>
        /// <param name="holidays">An array containing one or more hash of holidays, a holiday must contain a name (string) and a date (string), the date must be in a valid format, a valid format is a format corresponding to your domain’s locale). (optional)</param>
        /// <param name="mondayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. For example: “a-b,c-d”: “a” is the beginning of the first interval of the day, “b” is the ending of the first interval of the day, “c” is the beginning of the second interval of the day, “d” is the ending of the second interval of the day (optional)</param>
        /// <param name="tuesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="wednesdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="thursdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="fridayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="saturdayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <param name="sundayHours">this field define the time intervals of the day (in secs). An empty string means that there are no business hours on this day. See &#x60;monday_hours&#x60; for the format. (optional)</param>
        /// <returns>Task of ApiResponse (TimeSheet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeSheet>> UpdateTimeSheetAsyncWithHttpInfo (string timeSheetId, bool? active = null, string label = null, List<string> sourceIds = null, string holidays = null, string mondayHours = null, string tuesdayHours = null, string wednesdayHours = null, string thursdayHours = null, string fridayHours = null, string saturdayHours = null, string sundayHours = null)
        {
            // verify the required parameter 'timeSheetId' is set
            if (timeSheetId == null)
                throw new ApiException(400, "Missing required parameter 'timeSheetId' when calling TimeSheetsApi->UpdateTimeSheet");

            var localVarPath = "./time_sheets/{timeSheetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeSheetId != null) localVarPathParams.Add("timeSheetId", this.Configuration.ApiClient.ParameterToString(timeSheetId)); // path parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter
            if (holidays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "holidays", holidays)); // query parameter
            if (mondayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monday_hours", mondayHours)); // query parameter
            if (tuesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tuesday_hours", tuesdayHours)); // query parameter
            if (wednesdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wednesday_hours", wednesdayHours)); // query parameter
            if (thursdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thursday_hours", thursdayHours)); // query parameter
            if (fridayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "friday_hours", fridayHours)); // query parameter
            if (saturdayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "saturday_hours", saturdayHours)); // query parameter
            if (sundayHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sunday_hours", sundayHours)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimeSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeSheet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TimeSheet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeSheet)));
        }

    }
}
