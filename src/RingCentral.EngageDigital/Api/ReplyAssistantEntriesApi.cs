/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IReplyAssistantEntriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry CreateReplyAssistantEntry (string label);

        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> CreateReplyAssistantEntryWithHttpInfo (string label);
        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry DeleteReplyAssistantEntry (string replyAssistantEntryId);

        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> DeleteReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantEntriesResponse</returns>
        GetAllReplyAssistantEntriesResponse GetAllReplyAssistantEntries (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantEntriesResponse</returns>
        ApiResponse<GetAllReplyAssistantEntriesResponse> GetAllReplyAssistantEntriesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry GetReplyAssistantEntry (string replyAssistantEntryId);

        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> GetReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry UpdateReplyAssistantEntry (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> UpdateReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> CreateReplyAssistantEntryAsync (string label);

        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> CreateReplyAssistantEntryAsyncWithHttpInfo (string label);
        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> DeleteReplyAssistantEntryAsync (string replyAssistantEntryId);

        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> DeleteReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantEntriesResponse</returns>
        System.Threading.Tasks.Task<GetAllReplyAssistantEntriesResponse> GetAllReplyAssistantEntriesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantEntriesResponse>> GetAllReplyAssistantEntriesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> GetReplyAssistantEntryAsync (string replyAssistantEntryId);

        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> GetReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> UpdateReplyAssistantEntryAsync (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> UpdateReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class ReplyAssistantEntriesApi : IReplyAssistantEntriesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantEntriesApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantEntriesApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplyAssistantEntriesApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry CreateReplyAssistantEntry (string label)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = CreateReplyAssistantEntryWithHttpInfo(label);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public ApiResponse< ReplyAssistantEntry > CreateReplyAssistantEntryWithHttpInfo (string label)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling ReplyAssistantEntriesApi->CreateReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> CreateReplyAssistantEntryAsync (string label)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = await CreateReplyAssistantEntryAsyncWithHttpInfo(label);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> CreateReplyAssistantEntryAsyncWithHttpInfo (string label)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling ReplyAssistantEntriesApi->CreateReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry DeleteReplyAssistantEntry (string replyAssistantEntryId)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = DeleteReplyAssistantEntryWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public ApiResponse< ReplyAssistantEntry > DeleteReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->DeleteReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries/{replyAssistantEntryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantEntryId != null) localVarPathParams.Add("replyAssistantEntryId", this.Configuration.ApiClient.ParameterToString(replyAssistantEntryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> DeleteReplyAssistantEntryAsync (string replyAssistantEntryId)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = await DeleteReplyAssistantEntryAsyncWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> DeleteReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->DeleteReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries/{replyAssistantEntryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantEntryId != null) localVarPathParams.Add("replyAssistantEntryId", this.Configuration.ApiClient.ParameterToString(replyAssistantEntryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantEntriesResponse</returns>
        public GetAllReplyAssistantEntriesResponse GetAllReplyAssistantEntries (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllReplyAssistantEntriesResponse> localVarResponse = GetAllReplyAssistantEntriesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantEntriesResponse</returns>
        public ApiResponse< GetAllReplyAssistantEntriesResponse > GetAllReplyAssistantEntriesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./reply_assistant/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReplyAssistantEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllReplyAssistantEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllReplyAssistantEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllReplyAssistantEntriesResponse)));
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantEntriesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllReplyAssistantEntriesResponse> GetAllReplyAssistantEntriesAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllReplyAssistantEntriesResponse> localVarResponse = await GetAllReplyAssistantEntriesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantEntriesResponse>> GetAllReplyAssistantEntriesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./reply_assistant/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReplyAssistantEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllReplyAssistantEntriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllReplyAssistantEntriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllReplyAssistantEntriesResponse)));
        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry GetReplyAssistantEntry (string replyAssistantEntryId)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = GetReplyAssistantEntryWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public ApiResponse< ReplyAssistantEntry > GetReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->GetReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries/{replyAssistantEntryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantEntryId != null) localVarPathParams.Add("replyAssistantEntryId", this.Configuration.ApiClient.ParameterToString(replyAssistantEntryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> GetReplyAssistantEntryAsync (string replyAssistantEntryId)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = await GetReplyAssistantEntryAsyncWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> GetReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->GetReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries/{replyAssistantEntryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantEntryId != null) localVarPathParams.Add("replyAssistantEntryId", this.Configuration.ApiClient.ParameterToString(replyAssistantEntryId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry UpdateReplyAssistantEntry (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = UpdateReplyAssistantEntryWithHttpInfo(replyAssistantEntryId, label, foreignId, categoryIds, shortcuts, entryGroupId, sourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public ApiResponse< ReplyAssistantEntry > UpdateReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->UpdateReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries/{replyAssistantEntryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantEntryId != null) localVarPathParams.Add("replyAssistantEntryId", this.Configuration.ApiClient.ParameterToString(replyAssistantEntryId)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (foreignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foreign_id", foreignId)); // query parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids[]", categoryIds)); // query parameter
            if (shortcuts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "shortcuts[]", shortcuts)); // query parameter
            if (entryGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entry_group_id", entryGroupId)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> UpdateReplyAssistantEntryAsync (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
             ApiResponse<ReplyAssistantEntry> localVarResponse = await UpdateReplyAssistantEntryAsyncWithHttpInfo(replyAssistantEntryId, label, foreignId, categoryIds, shortcuts, entryGroupId, sourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> UpdateReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->UpdateReplyAssistantEntry");

            var localVarPath = "./reply_assistant/entries/{replyAssistantEntryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantEntryId != null) localVarPathParams.Add("replyAssistantEntryId", this.Configuration.ApiClient.ParameterToString(replyAssistantEntryId)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (foreignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "foreign_id", foreignId)); // query parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids[]", categoryIds)); // query parameter
            if (shortcuts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "shortcuts[]", shortcuts)); // query parameter
            if (entryGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entry_group_id", entryGroupId)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplyAssistantEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantEntry)));
        }

    }
}
