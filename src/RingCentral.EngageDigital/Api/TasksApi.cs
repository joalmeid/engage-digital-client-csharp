/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTasksResponse</returns>
        GetAllTasksResponse GetAllTasks (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTasksResponse</returns>
        ApiResponse<GetAllTasksResponse> GetAllTasksWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task</returns>
        Task GetTask (string taskId);

        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task</returns>
        Task MoveTask (string taskId, string queue);

        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> MoveTaskWithHttpInfo (string taskId, string queue);
        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task</returns>
        Task TransferTask (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);

        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> TransferTaskWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTasksResponse</returns>
        System.Threading.Tasks.Task<GetAllTasksResponse> GetAllTasksAsync (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTasksResponse>> GetAllTasksAsyncWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskAsync (string taskId);

        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> MoveTaskAsync (string taskId, string queue);

        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> MoveTaskAsyncWithHttpInfo (string taskId, string queue);
        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> TransferTaskAsync (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);

        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> TransferTaskAsyncWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class TasksApi : ITasksApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// </summary>
        /// <returns></returns>
        public TasksApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTasksResponse</returns>
        public GetAllTasksResponse GetAllTasks (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllTasksResponse> localVarResponse = GetAllTasksWithHttpInfo(queue, channelId, step, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTasksResponse</returns>
        public ApiResponse< GetAllTasksResponse > GetAllTasksWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queue", queue)); // query parameter
            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_id", channelId)); // query parameter
            if (step != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "step", step)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTasksResponse)));
        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTasksResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTasksResponse> GetAllTasksAsync (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllTasksResponse> localVarResponse = await GetAllTasksAsyncWithHttpInfo(queue, channelId, step, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTasksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllTasksResponse>> GetAllTasksAsyncWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "./tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (queue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queue", queue)); // query parameter
            if (channelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_id", channelId)); // query parameter
            if (step != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "step", step)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTasksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllTasksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTasksResponse)));
        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task</returns>
        public Task GetTask (string taskId)
        {
             ApiResponse<Task> localVarResponse = GetTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > GetTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTask");

            var localVarPath = "./tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskAsync (string taskId)
        {
             ApiResponse<Task> localVarResponse = await GetTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTask");

            var localVarPath = "./tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task</returns>
        public Task MoveTask (string taskId, string queue)
        {
             ApiResponse<Task> localVarResponse = MoveTaskWithHttpInfo(taskId, queue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > MoveTaskWithHttpInfo (string taskId, string queue)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->MoveTask");
            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new ApiException(400, "Missing required parameter 'queue' when calling TasksApi->MoveTask");

            var localVarPath = "./tasks/{taskId}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (queue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queue", queue)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> MoveTaskAsync (string taskId, string queue)
        {
             ApiResponse<Task> localVarResponse = await MoveTaskAsyncWithHttpInfo(taskId, queue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> MoveTaskAsyncWithHttpInfo (string taskId, string queue)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->MoveTask");
            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new ApiException(400, "Missing required parameter 'queue' when calling TasksApi->MoveTask");

            var localVarPath = "./tasks/{taskId}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (queue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "queue", queue)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task</returns>
        public Task TransferTask (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
             ApiResponse<Task> localVarResponse = TransferTaskWithHttpInfo(taskId, agentIds, bypass, categoryIds, language, teamIds, comment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > TransferTaskWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->TransferTask");

            var localVarPath = "./tasks/{taskId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (agentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "agent_ids", agentIds)); // query parameter
            if (bypass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bypass", bypass)); // query parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids", categoryIds)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids", teamIds)); // query parameter
            if (comment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "comment", comment)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> TransferTaskAsync (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
             ApiResponse<Task> localVarResponse = await TransferTaskAsyncWithHttpInfo(taskId, agentIds, bypass, categoryIds, language, teamIds, comment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> TransferTaskAsyncWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->TransferTask");

            var localVarPath = "./tasks/{taskId}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (agentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "agent_ids", agentIds)); // query parameter
            if (bypass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bypass", bypass)); // query parameter
            if (categoryIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "category_ids", categoryIds)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (teamIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_ids", teamIds)); // query parameter
            if (comment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "comment", comment)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

    }
}
