/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantVersionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion CreateReplyAssistantVersion (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));

        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> CreateReplyAssistantVersionWithHttpInfo (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));
        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion DeleteReplyAssistantVersion (string replyAssistantVersionId);

        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> DeleteReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantVersionsResponse</returns>
        GetAllReplyAssistantVersionsResponse GetAllReplyAssistantVersions (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantVersionsResponse</returns>
        ApiResponse<GetAllReplyAssistantVersionsResponse> GetAllReplyAssistantVersionsWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion GetReplyAssistantVersion (string replyAssistantVersionId);

        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> GetReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion UpdateReplyAssistantVersion (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));

        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> UpdateReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantVersionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> CreateReplyAssistantVersionAsync (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));

        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> CreateReplyAssistantVersionAsyncWithHttpInfo (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));
        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> DeleteReplyAssistantVersionAsync (string replyAssistantVersionId);

        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> DeleteReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantVersionsResponse</returns>
        System.Threading.Tasks.Task<GetAllReplyAssistantVersionsResponse> GetAllReplyAssistantVersionsAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantVersionsResponse>> GetAllReplyAssistantVersionsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> GetReplyAssistantVersionAsync (string replyAssistantVersionId);

        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> GetReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> UpdateReplyAssistantVersionAsync (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));

        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> UpdateReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantVersionsApi : IReplyAssistantVersionsApiSync, IReplyAssistantVersionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplyAssistantVersionsApi : IReplyAssistantVersionsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantVersionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantVersionsApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplyAssistantVersionsApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReplyAssistantVersionsApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion CreateReplyAssistantVersion (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = CreateReplyAssistantVersionWithHttpInfo(body, entryId, sourceIds, format, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantVersion > CreateReplyAssistantVersionWithHttpInfo (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'body' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");

            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'entryId' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (body != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "entry_id", entryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids", sourceIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (format != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "format", format))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (language != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "language", language))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< ReplyAssistantVersion >("/reply_assistant/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> CreateReplyAssistantVersionAsync (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = await CreateReplyAssistantVersionAsyncWithHttpInfo(body, entryId, sourceIds, format, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion>> CreateReplyAssistantVersionAsyncWithHttpInfo (string body, string entryId, Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'body' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");

            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'entryId' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (body != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "entry_id", entryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids", sourceIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (format != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "format", format))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (language != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "language", language))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReplyAssistantVersion>("/reply_assistant/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion DeleteReplyAssistantVersion (string replyAssistantVersionId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = DeleteReplyAssistantVersionWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantVersion > DeleteReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->DeleteReplyAssistantVersion");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantVersionId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantVersionId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantVersionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< ReplyAssistantVersion >("/reply_assistant/versions/{replyAssistantVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> DeleteReplyAssistantVersionAsync (string replyAssistantVersionId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = await DeleteReplyAssistantVersionAsyncWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion>> DeleteReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->DeleteReplyAssistantVersion");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (replyAssistantVersionId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantVersionId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantVersionId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ReplyAssistantVersion>("/reply_assistant/versions/{replyAssistantVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantVersionsResponse</returns>
        public GetAllReplyAssistantVersionsResponse GetAllReplyAssistantVersions (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllReplyAssistantVersionsResponse> localVarResponse = GetAllReplyAssistantVersionsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantVersionsResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllReplyAssistantVersionsResponse > GetAllReplyAssistantVersionsWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllReplyAssistantVersionsResponse >("/reply_assistant/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReplyAssistantVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantVersionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllReplyAssistantVersionsResponse> GetAllReplyAssistantVersionsAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllReplyAssistantVersionsResponse> localVarResponse = await GetAllReplyAssistantVersionsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllReplyAssistantVersionsResponse>> GetAllReplyAssistantVersionsAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllReplyAssistantVersionsResponse>("/reply_assistant/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReplyAssistantVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion GetReplyAssistantVersion (string replyAssistantVersionId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = GetReplyAssistantVersionWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantVersion > GetReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->GetReplyAssistantVersion");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantVersionId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantVersionId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantVersionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< ReplyAssistantVersion >("/reply_assistant/versions/{replyAssistantVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> GetReplyAssistantVersionAsync (string replyAssistantVersionId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = await GetReplyAssistantVersionAsyncWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion>> GetReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->GetReplyAssistantVersion");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (replyAssistantVersionId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantVersionId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantVersionId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ReplyAssistantVersion>("/reply_assistant/versions/{replyAssistantVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion UpdateReplyAssistantVersion (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = UpdateReplyAssistantVersionWithHttpInfo(replyAssistantVersionId, body, entryId, sourceIds, format, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< ReplyAssistantVersion > UpdateReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->UpdateReplyAssistantVersion");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantVersionId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantVersionId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantVersionId)); // path parameter
            if (body != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "entry_id", entryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (format != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "format", format))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (language != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "language", language))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< ReplyAssistantVersion >("/reply_assistant/versions/{replyAssistantVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> UpdateReplyAssistantVersionAsync (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
             RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion> localVarResponse = await UpdateReplyAssistantVersionAsyncWithHttpInfo(replyAssistantVersionId, body, entryId, sourceIds, format, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<ReplyAssistantVersion>> UpdateReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId, string body = default(string), string entryId = default(string), Collection<string> sourceIds = default(Collection<string>), string format = default(string), string language = default(string))
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->UpdateReplyAssistantVersion");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (replyAssistantVersionId != null)
                localVarRequestOptions.PathParameters.Add("replyAssistantVersionId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(replyAssistantVersionId)); // path parameter
            if (body != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entryId != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "entry_id", entryId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (format != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "format", format))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (language != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "language", language))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplyAssistantVersion>("/reply_assistant/versions/{replyAssistantVersionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReplyAssistantVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
