/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IReplyAssistantVersionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion CreateReplyAssistantVersion (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null);

        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> CreateReplyAssistantVersionWithHttpInfo (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null);
        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion DeleteReplyAssistantVersion (string replyAssistantVersionId);

        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> DeleteReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantVersionsResponse</returns>
        GetAllReplyAssistantVersionsResponse GetAllReplyAssistantVersions (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantVersionsResponse</returns>
        ApiResponse<GetAllReplyAssistantVersionsResponse> GetAllReplyAssistantVersionsWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion GetReplyAssistantVersion (string replyAssistantVersionId);

        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> GetReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        ReplyAssistantVersion UpdateReplyAssistantVersion (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null);

        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        ApiResponse<ReplyAssistantVersion> UpdateReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> CreateReplyAssistantVersionAsync (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null);

        /// <summary>
        /// Creating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> CreateReplyAssistantVersionAsyncWithHttpInfo (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null);
        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> DeleteReplyAssistantVersionAsync (string replyAssistantVersionId);

        /// <summary>
        /// Deleting a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> DeleteReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantVersionsResponse</returns>
        System.Threading.Tasks.Task<GetAllReplyAssistantVersionsResponse> GetAllReplyAssistantVersionsAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions
        /// </summary>
        /// <remarks>
        /// This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantVersionsResponse>> GetAllReplyAssistantVersionsAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> GetReplyAssistantVersionAsync (string replyAssistantVersionId);

        /// <summary>
        /// Getting a reply assistant version from its id
        /// </summary>
        /// <remarks>
        /// This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> GetReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId);
        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        System.Threading.Tasks.Task<ReplyAssistantVersion> UpdateReplyAssistantVersionAsync (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null);

        /// <summary>
        /// Updating a reply assistant version
        /// </summary>
        /// <remarks>
        /// This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> UpdateReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class ReplyAssistantVersionsApi : IReplyAssistantVersionsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantVersionsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantVersionsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantVersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplyAssistantVersionsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion CreateReplyAssistantVersion (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = CreateReplyAssistantVersionWithHttpInfo(body, entryId, sourceIds, format, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public ApiResponse< ReplyAssistantVersion > CreateReplyAssistantVersionWithHttpInfo (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "body", body)); // query parameter
            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entry_id", entryId)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids", sourceIds)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> CreateReplyAssistantVersionAsync (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = await CreateReplyAssistantVersionAsyncWithHttpInfo(body, entryId, sourceIds, format, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a reply assistant version This method creates a reply assistant version. In case of success it renders the version, otherwise, it renders an error (422 HTTP code, 404 if the entry_id is invalid).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body of the version</param>
        /// <param name="entryId">Reply assistant entry id (mandatory)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> CreateReplyAssistantVersionAsyncWithHttpInfo (string body, string entryId, List<string> sourceIds = null, string format = null, string language = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling ReplyAssistantVersionsApi->CreateReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "body", body)); // query parameter
            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entry_id", entryId)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids", sourceIds)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion DeleteReplyAssistantVersion (string replyAssistantVersionId)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = DeleteReplyAssistantVersionWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public ApiResponse< ReplyAssistantVersion > DeleteReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->DeleteReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions/{replyAssistantVersionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantVersionId != null) localVarPathParams.Add("replyAssistantVersionId", this.Configuration.ApiClient.ParameterToString(replyAssistantVersionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> DeleteReplyAssistantVersionAsync (string replyAssistantVersionId)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = await DeleteReplyAssistantVersionAsyncWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a reply assistant version This method destroys an existing version. It renders the version itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> DeleteReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->DeleteReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions/{replyAssistantVersionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantVersionId != null) localVarPathParams.Add("replyAssistantVersionId", this.Configuration.ApiClient.ParameterToString(replyAssistantVersionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantVersionsResponse</returns>
        public GetAllReplyAssistantVersionsResponse GetAllReplyAssistantVersions (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllReplyAssistantVersionsResponse> localVarResponse = GetAllReplyAssistantVersionsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantVersionsResponse</returns>
        public ApiResponse< GetAllReplyAssistantVersionsResponse > GetAllReplyAssistantVersionsWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./reply_assistant/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReplyAssistantVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllReplyAssistantVersionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllReplyAssistantVersionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllReplyAssistantVersionsResponse)));
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantVersionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllReplyAssistantVersionsResponse> GetAllReplyAssistantVersionsAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllReplyAssistantVersionsResponse> localVarResponse = await GetAllReplyAssistantVersionsAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant versions This method renders all reply assistant versions ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantVersionsResponse>> GetAllReplyAssistantVersionsAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./reply_assistant/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReplyAssistantVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllReplyAssistantVersionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllReplyAssistantVersionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllReplyAssistantVersionsResponse)));
        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion GetReplyAssistantVersion (string replyAssistantVersionId)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = GetReplyAssistantVersionWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public ApiResponse< ReplyAssistantVersion > GetReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->GetReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions/{replyAssistantVersionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantVersionId != null) localVarPathParams.Add("replyAssistantVersionId", this.Configuration.ApiClient.ParameterToString(replyAssistantVersionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> GetReplyAssistantVersionAsync (string replyAssistantVersionId)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = await GetReplyAssistantVersionAsyncWithHttpInfo(replyAssistantVersionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a reply assistant version from its id This method renders a version from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> GetReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->GetReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions/{replyAssistantVersionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantVersionId != null) localVarPathParams.Add("replyAssistantVersionId", this.Configuration.ApiClient.ParameterToString(replyAssistantVersionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ReplyAssistantVersion</returns>
        public ReplyAssistantVersion UpdateReplyAssistantVersion (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = UpdateReplyAssistantVersionWithHttpInfo(replyAssistantVersionId, body, entryId, sourceIds, format, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantVersion</returns>
        public ApiResponse< ReplyAssistantVersion > UpdateReplyAssistantVersionWithHttpInfo (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->UpdateReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions/{replyAssistantVersionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantVersionId != null) localVarPathParams.Add("replyAssistantVersionId", this.Configuration.ApiClient.ParameterToString(replyAssistantVersionId)); // path parameter
            if (body != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "body", body)); // query parameter
            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entry_id", entryId)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ReplyAssistantVersion</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantVersion> UpdateReplyAssistantVersionAsync (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null)
        {
             ApiResponse<ReplyAssistantVersion> localVarResponse = await UpdateReplyAssistantVersionAsyncWithHttpInfo(replyAssistantVersionId, body, entryId, sourceIds, format, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a reply assistant version This method updates an existing version from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantVersionId"></param>
        /// <param name="body">Body of the version (optional)</param>
        /// <param name="entryId">Reply assistant entry id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <param name="format">Either “text” or “html” (optional)</param>
        /// <param name="language">Language (ex: “fr”) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplyAssistantVersion>> UpdateReplyAssistantVersionAsyncWithHttpInfo (string replyAssistantVersionId, string body = null, string entryId = null, List<string> sourceIds = null, string format = null, string language = null)
        {
            // verify the required parameter 'replyAssistantVersionId' is set
            if (replyAssistantVersionId == null)
                throw new ApiException(400, "Missing required parameter 'replyAssistantVersionId' when calling ReplyAssistantVersionsApi->UpdateReplyAssistantVersion");

            var localVarPath = "./reply_assistant/versions/{replyAssistantVersionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (replyAssistantVersionId != null) localVarPathParams.Add("replyAssistantVersionId", this.Configuration.ApiClient.ParameterToString(replyAssistantVersionId)); // path parameter
            if (body != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "body", body)); // query parameter
            if (entryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entry_id", entryId)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source_ids[]", sourceIds)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReplyAssistantVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplyAssistantVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplyAssistantVersion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplyAssistantVersion)));
        }

    }
}
