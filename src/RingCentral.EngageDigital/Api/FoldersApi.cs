/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IFoldersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        Folder CreateFolder (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> CreateFolderWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        Folder DeleteFolder (string folderId);

        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> DeleteFolderWithHttpInfo (string folderId);
        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllFoldersResponse</returns>
        GetAllFoldersResponse GetAllFolders (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllFoldersResponse</returns>
        ApiResponse<GetAllFoldersResponse> GetAllFoldersWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        Folder GetFolder (string folderId);

        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> GetFolderWithHttpInfo (string folderId);
        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        Folder UpdateFolder (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> UpdateFolderWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> DeleteFolderAsync (string folderId);

        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllFoldersResponse</returns>
        System.Threading.Tasks.Task<GetAllFoldersResponse> GetAllFoldersAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllFoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllFoldersResponse>> GetAllFoldersAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> GetFolderAsync (string folderId);

        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> GetFolderAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> UpdateFolderAsync (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class FoldersApi : IFoldersApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// </summary>
        /// <returns></returns>
        public FoldersApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        public Folder CreateFolder (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             ApiResponse<Folder> localVarResponse = CreateFolderWithHttpInfo(label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > CreateFolderWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {

            var localVarPath = "./folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (renderThreadsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render_threads_count", renderThreadsCount)); // query parameter
            if (roleRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "role_restriction[only][]", roleRestrictionOnly)); // query parameter
            if (teamRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_restriction[only][]", teamRestrictionOnly)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             ApiResponse<Folder> localVarResponse = await CreateFolderAsyncWithHttpInfo(label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {

            var localVarPath = "./folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (renderThreadsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render_threads_count", renderThreadsCount)); // query parameter
            if (roleRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "role_restriction[only][]", roleRestrictionOnly)); // query parameter
            if (teamRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_restriction[only][]", teamRestrictionOnly)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        public Folder DeleteFolder (string folderId)
        {
             ApiResponse<Folder> localVarResponse = DeleteFolderWithHttpInfo(folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > DeleteFolderWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->DeleteFolder");

            var localVarPath = "./folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> DeleteFolderAsync (string folderId)
        {
             ApiResponse<Folder> localVarResponse = await DeleteFolderAsyncWithHttpInfo(folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->DeleteFolder");

            var localVarPath = "./folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllFoldersResponse</returns>
        public GetAllFoldersResponse GetAllFolders (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllFoldersResponse> localVarResponse = GetAllFoldersWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllFoldersResponse</returns>
        public ApiResponse< GetAllFoldersResponse > GetAllFoldersWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllFoldersResponse)));
        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllFoldersResponse</returns>
        public async System.Threading.Tasks.Task<GetAllFoldersResponse> GetAllFoldersAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllFoldersResponse> localVarResponse = await GetAllFoldersAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllFoldersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllFoldersResponse>> GetAllFoldersAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllFoldersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllFoldersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllFoldersResponse)));
        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        public Folder GetFolder (string folderId)
        {
             ApiResponse<Folder> localVarResponse = GetFolderWithHttpInfo(folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > GetFolderWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->GetFolder");

            var localVarPath = "./folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> GetFolderAsync (string folderId)
        {
             ApiResponse<Folder> localVarResponse = await GetFolderAsyncWithHttpInfo(folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> GetFolderAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->GetFolder");

            var localVarPath = "./folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        public Folder UpdateFolder (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             ApiResponse<Folder> localVarResponse = UpdateFolderWithHttpInfo(folderId, label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        public ApiResponse< Folder > UpdateFolderWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->UpdateFolder");

            var localVarPath = "./folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (renderThreadsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render_threads_count", renderThreadsCount)); // query parameter
            if (roleRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "role_restriction[only][]", roleRestrictionOnly)); // query parameter
            if (teamRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_restriction[only][]", teamRestrictionOnly)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> UpdateFolderAsync (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             ApiResponse<Folder> localVarResponse = await UpdateFolderAsyncWithHttpInfo(folderId, label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->UpdateFolder");

            var localVarPath = "./folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (renderThreadsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render_threads_count", renderThreadsCount)); // query parameter
            if (roleRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "role_restriction[only][]", roleRestrictionOnly)); // query parameter
            if (teamRestrictionOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "team_restriction[only][]", teamRestrictionOnly)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Folder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folder)));
        }

    }
}
