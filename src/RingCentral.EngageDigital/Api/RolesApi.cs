/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface IRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        Role CreateRole (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> CreateRoleWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllRolesResponse</returns>
        GetAllRolesResponse GetAllRoles (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllRolesResponse</returns>
        ApiResponse<GetAllRolesResponse> GetAllRolesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        Role GetRole (string roleId);

        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (string roleId);
        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        Role UpdateRole (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> UpdateRoleWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateRoleAsync (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllRolesResponse</returns>
        System.Threading.Tasks.Task<GetAllRolesResponse> GetAllRolesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllRolesResponse>> GetAllRolesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (string roleId);

        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal partial class RolesApi : IRolesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RolesApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        public Role CreateRole (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             ApiResponse<Role> localVarResponse = CreateRoleWithHttpInfo(label, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > CreateRoleWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling RolesApi->CreateRole");

            var localVarPath = "./roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (accessHelpCenter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_help_center", accessHelpCenter)); // query parameter
            if (accessPreviousMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_previous_messages", accessPreviousMessages)); // query parameter
            if (accessPullMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_pull_mode", accessPullMode)); // query parameter
            if (adminStampAnswer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "admin_stamp_answer", adminStampAnswer)); // query parameter
            if (approveContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approve_content", approveContent)); // query parameter
            if (assignIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assign_intervention", assignIntervention)); // query parameter
            if (authorBlockContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_block_content", authorBlockContent)); // query parameter
            if (closeContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close_content_thread", closeContentThread)); // query parameter
            if (createAndDestroyExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_and_destroy_extension", createAndDestroyExtension)); // query parameter
            if (createCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_community", createCommunity)); // query parameter
            if (createContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_content_source", createContentSource)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_user", createUser)); // query parameter
            if (delayExportContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay_export_content", delayExportContent)); // query parameter
            if (deleteContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_content_thread", deleteContentThread)); // query parameter
            if (impersonateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonate_user", impersonateUser)); // query parameter
            if (inviteUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_user", inviteUser)); // query parameter
            if (manageApiAccessTokens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_api_access_tokens", manageApiAccessTokens)); // query parameter
            if (manageAppSdkApplications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_app_sdk_applications", manageAppSdkApplications)); // query parameter
            if (manageAutomaticExportsTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks)); // query parameter
            if (manageCategories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_categories", manageCategories)); // query parameter
            if (manageChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_chat", manageChat)); // query parameter
            if (manageCustomFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_fields", manageCustomFields)); // query parameter
            if (manageCustomNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_notifications", manageCustomNotifications)); // query parameter
            if (manageEmailsTemplates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_emails_templates", manageEmailsTemplates)); // query parameter
            if (manageFolders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_folders", manageFolders)); // query parameter
            if (manageIce != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_ice", manageIce)); // query parameter
            if (manageIdentities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_identities", manageIdentities)); // query parameter
            if (manageOwnNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_own_notifications", manageOwnNotifications)); // query parameter
            if (manageReplyAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_reply_assistant", manageReplyAssistant)); // query parameter
            if (manageRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_roles", manageRoles)); // query parameter
            if (manageRulesEngineRules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_rules_engine_rules", manageRulesEngineRules)); // query parameter
            if (manageSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_surveys", manageSurveys)); // query parameter
            if (manageTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_tags", manageTags)); // query parameter
            if (manageTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_teams", manageTeams)); // query parameter
            if (manageTopologies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_topologies", manageTopologies)); // query parameter
            if (manageUsersOfMyTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_users_of_my_teams", manageUsersOfMyTeams)); // query parameter
            if (monitorTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_tasks", monitorTasks)); // query parameter
            if (monitorTeamTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_team_tasks", monitorTeamTasks)); // query parameter
            if (muteContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mute_content", muteContent)); // query parameter
            if (openContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "open_content_thread", openContentThread)); // query parameter
            if (publishContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publish_content", publishContent)); // query parameter
            if (readCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_community", readCommunity)); // query parameter
            if (readContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_content_source", readContentSource)); // query parameter
            if (readEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_event", readEvent)); // query parameter
            if (readExport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_export", readExport)); // query parameter
            if (readIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_identity", readIdentity)); // query parameter
            if (readOwnStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_own_stats", readOwnStats)); // query parameter
            if (readPresence != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_presence", readPresence)); // query parameter
            if (readStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_stats", readStats)); // query parameter
            if (readSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_surveys", readSurveys)); // query parameter
            if (readUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_user", readUser)); // query parameter
            if (receiveTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receive_tasks", receiveTasks)); // query parameter
            if (replyWithAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reply_with_assistant", replyWithAssistant)); // query parameter
            if (searchContents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_contents", searchContents)); // query parameter
            if (searchEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_event", searchEvent)); // query parameter
            if (updateCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_community", updateCommunity)); // query parameter
            if (updateContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_content_source", updateContentSource)); // query parameter
            if (updateExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_extension", updateExtension)); // query parameter
            if (updateIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_identity", updateIdentity)); // query parameter
            if (updateIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_intervention", updateIntervention)); // query parameter
            if (updateOwnIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_own_intervention", updateOwnIntervention)); // query parameter
            if (updateSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_settings", updateSettings)); // query parameter
            if (updateTimeSheet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_time_sheet", updateTimeSheet)); // query parameter
            if (updateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_user", updateUser)); // query parameter
            if (useEmoji != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_emoji", useEmoji)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateRoleAsync (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             ApiResponse<Role> localVarResponse = await CreateRoleAsyncWithHttpInfo(label, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling RolesApi->CreateRole");

            var localVarPath = "./roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (accessHelpCenter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_help_center", accessHelpCenter)); // query parameter
            if (accessPreviousMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_previous_messages", accessPreviousMessages)); // query parameter
            if (accessPullMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_pull_mode", accessPullMode)); // query parameter
            if (adminStampAnswer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "admin_stamp_answer", adminStampAnswer)); // query parameter
            if (approveContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approve_content", approveContent)); // query parameter
            if (assignIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assign_intervention", assignIntervention)); // query parameter
            if (authorBlockContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_block_content", authorBlockContent)); // query parameter
            if (closeContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close_content_thread", closeContentThread)); // query parameter
            if (createAndDestroyExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_and_destroy_extension", createAndDestroyExtension)); // query parameter
            if (createCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_community", createCommunity)); // query parameter
            if (createContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_content_source", createContentSource)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_user", createUser)); // query parameter
            if (delayExportContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay_export_content", delayExportContent)); // query parameter
            if (deleteContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_content_thread", deleteContentThread)); // query parameter
            if (impersonateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonate_user", impersonateUser)); // query parameter
            if (inviteUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_user", inviteUser)); // query parameter
            if (manageApiAccessTokens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_api_access_tokens", manageApiAccessTokens)); // query parameter
            if (manageAppSdkApplications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_app_sdk_applications", manageAppSdkApplications)); // query parameter
            if (manageAutomaticExportsTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks)); // query parameter
            if (manageCategories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_categories", manageCategories)); // query parameter
            if (manageChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_chat", manageChat)); // query parameter
            if (manageCustomFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_fields", manageCustomFields)); // query parameter
            if (manageCustomNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_notifications", manageCustomNotifications)); // query parameter
            if (manageEmailsTemplates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_emails_templates", manageEmailsTemplates)); // query parameter
            if (manageFolders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_folders", manageFolders)); // query parameter
            if (manageIce != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_ice", manageIce)); // query parameter
            if (manageIdentities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_identities", manageIdentities)); // query parameter
            if (manageOwnNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_own_notifications", manageOwnNotifications)); // query parameter
            if (manageReplyAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_reply_assistant", manageReplyAssistant)); // query parameter
            if (manageRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_roles", manageRoles)); // query parameter
            if (manageRulesEngineRules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_rules_engine_rules", manageRulesEngineRules)); // query parameter
            if (manageSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_surveys", manageSurveys)); // query parameter
            if (manageTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_tags", manageTags)); // query parameter
            if (manageTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_teams", manageTeams)); // query parameter
            if (manageTopologies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_topologies", manageTopologies)); // query parameter
            if (manageUsersOfMyTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_users_of_my_teams", manageUsersOfMyTeams)); // query parameter
            if (monitorTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_tasks", monitorTasks)); // query parameter
            if (monitorTeamTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_team_tasks", monitorTeamTasks)); // query parameter
            if (muteContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mute_content", muteContent)); // query parameter
            if (openContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "open_content_thread", openContentThread)); // query parameter
            if (publishContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publish_content", publishContent)); // query parameter
            if (readCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_community", readCommunity)); // query parameter
            if (readContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_content_source", readContentSource)); // query parameter
            if (readEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_event", readEvent)); // query parameter
            if (readExport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_export", readExport)); // query parameter
            if (readIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_identity", readIdentity)); // query parameter
            if (readOwnStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_own_stats", readOwnStats)); // query parameter
            if (readPresence != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_presence", readPresence)); // query parameter
            if (readStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_stats", readStats)); // query parameter
            if (readSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_surveys", readSurveys)); // query parameter
            if (readUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_user", readUser)); // query parameter
            if (receiveTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receive_tasks", receiveTasks)); // query parameter
            if (replyWithAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reply_with_assistant", replyWithAssistant)); // query parameter
            if (searchContents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_contents", searchContents)); // query parameter
            if (searchEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_event", searchEvent)); // query parameter
            if (updateCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_community", updateCommunity)); // query parameter
            if (updateContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_content_source", updateContentSource)); // query parameter
            if (updateExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_extension", updateExtension)); // query parameter
            if (updateIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_identity", updateIdentity)); // query parameter
            if (updateIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_intervention", updateIntervention)); // query parameter
            if (updateOwnIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_own_intervention", updateOwnIntervention)); // query parameter
            if (updateSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_settings", updateSettings)); // query parameter
            if (updateTimeSheet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_time_sheet", updateTimeSheet)); // query parameter
            if (updateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_user", updateUser)); // query parameter
            if (useEmoji != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_emoji", useEmoji)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllRolesResponse</returns>
        public GetAllRolesResponse GetAllRoles (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllRolesResponse> localVarResponse = GetAllRolesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllRolesResponse</returns>
        public ApiResponse< GetAllRolesResponse > GetAllRolesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllRolesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllRolesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllRolesResponse)));
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllRolesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllRolesResponse> GetAllRolesAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<GetAllRolesResponse> localVarResponse = await GetAllRolesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllRolesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllRolesResponse>> GetAllRolesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllRolesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetAllRolesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllRolesResponse)));
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        public Role GetRole (string roleId)
        {
             ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > GetRoleWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");

            var localVarPath = "./roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (string roleId)
        {
             ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");

            var localVarPath = "./roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        public Role UpdateRole (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             ApiResponse<Role> localVarResponse = UpdateRoleWithHttpInfo(roleId, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > UpdateRoleWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");

            var localVarPath = "./roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accessHelpCenter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_help_center", accessHelpCenter)); // query parameter
            if (accessPreviousMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_previous_messages", accessPreviousMessages)); // query parameter
            if (accessPullMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_pull_mode", accessPullMode)); // query parameter
            if (adminStampAnswer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "admin_stamp_answer", adminStampAnswer)); // query parameter
            if (approveContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approve_content", approveContent)); // query parameter
            if (assignIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assign_intervention", assignIntervention)); // query parameter
            if (authorBlockContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_block_content", authorBlockContent)); // query parameter
            if (closeContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close_content_thread", closeContentThread)); // query parameter
            if (createAndDestroyExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_and_destroy_extension", createAndDestroyExtension)); // query parameter
            if (createCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_community", createCommunity)); // query parameter
            if (createContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_content_source", createContentSource)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_user", createUser)); // query parameter
            if (delayExportContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay_export_content", delayExportContent)); // query parameter
            if (deleteContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_content_thread", deleteContentThread)); // query parameter
            if (impersonateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonate_user", impersonateUser)); // query parameter
            if (inviteUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_user", inviteUser)); // query parameter
            if (manageApiAccessTokens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_api_access_tokens", manageApiAccessTokens)); // query parameter
            if (manageAppSdkApplications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_app_sdk_applications", manageAppSdkApplications)); // query parameter
            if (manageAutomaticExportsTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks)); // query parameter
            if (manageCategories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_categories", manageCategories)); // query parameter
            if (manageChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_chat", manageChat)); // query parameter
            if (manageCustomFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_fields", manageCustomFields)); // query parameter
            if (manageCustomNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_notifications", manageCustomNotifications)); // query parameter
            if (manageEmailsTemplates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_emails_templates", manageEmailsTemplates)); // query parameter
            if (manageFolders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_folders", manageFolders)); // query parameter
            if (manageIce != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_ice", manageIce)); // query parameter
            if (manageIdentities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_identities", manageIdentities)); // query parameter
            if (manageOwnNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_own_notifications", manageOwnNotifications)); // query parameter
            if (manageReplyAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_reply_assistant", manageReplyAssistant)); // query parameter
            if (manageRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_roles", manageRoles)); // query parameter
            if (manageRulesEngineRules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_rules_engine_rules", manageRulesEngineRules)); // query parameter
            if (manageSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_surveys", manageSurveys)); // query parameter
            if (manageTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_tags", manageTags)); // query parameter
            if (manageTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_teams", manageTeams)); // query parameter
            if (manageTopologies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_topologies", manageTopologies)); // query parameter
            if (manageUsersOfMyTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_users_of_my_teams", manageUsersOfMyTeams)); // query parameter
            if (monitorTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_tasks", monitorTasks)); // query parameter
            if (monitorTeamTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_team_tasks", monitorTeamTasks)); // query parameter
            if (muteContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mute_content", muteContent)); // query parameter
            if (openContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "open_content_thread", openContentThread)); // query parameter
            if (publishContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publish_content", publishContent)); // query parameter
            if (readCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_community", readCommunity)); // query parameter
            if (readContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_content_source", readContentSource)); // query parameter
            if (readEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_event", readEvent)); // query parameter
            if (readExport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_export", readExport)); // query parameter
            if (readIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_identity", readIdentity)); // query parameter
            if (readOwnStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_own_stats", readOwnStats)); // query parameter
            if (readPresence != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_presence", readPresence)); // query parameter
            if (readStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_stats", readStats)); // query parameter
            if (readSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_surveys", readSurveys)); // query parameter
            if (readUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_user", readUser)); // query parameter
            if (receiveTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receive_tasks", receiveTasks)); // query parameter
            if (replyWithAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reply_with_assistant", replyWithAssistant)); // query parameter
            if (searchContents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_contents", searchContents)); // query parameter
            if (searchEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_event", searchEvent)); // query parameter
            if (updateCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_community", updateCommunity)); // query parameter
            if (updateContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_content_source", updateContentSource)); // query parameter
            if (updateExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_extension", updateExtension)); // query parameter
            if (updateIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_identity", updateIdentity)); // query parameter
            if (updateIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_intervention", updateIntervention)); // query parameter
            if (updateOwnIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_own_intervention", updateOwnIntervention)); // query parameter
            if (updateSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_settings", updateSettings)); // query parameter
            if (updateTimeSheet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_time_sheet", updateTimeSheet)); // query parameter
            if (updateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_user", updateUser)); // query parameter
            if (useEmoji != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_emoji", useEmoji)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> UpdateRoleAsync (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             ApiResponse<Role> localVarResponse = await UpdateRoleAsyncWithHttpInfo(roleId, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");

            var localVarPath = "./roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (accessHelpCenter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_help_center", accessHelpCenter)); // query parameter
            if (accessPreviousMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_previous_messages", accessPreviousMessages)); // query parameter
            if (accessPullMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_pull_mode", accessPullMode)); // query parameter
            if (adminStampAnswer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "admin_stamp_answer", adminStampAnswer)); // query parameter
            if (approveContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approve_content", approveContent)); // query parameter
            if (assignIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assign_intervention", assignIntervention)); // query parameter
            if (authorBlockContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author_block_content", authorBlockContent)); // query parameter
            if (closeContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close_content_thread", closeContentThread)); // query parameter
            if (createAndDestroyExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_and_destroy_extension", createAndDestroyExtension)); // query parameter
            if (createCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_community", createCommunity)); // query parameter
            if (createContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_content_source", createContentSource)); // query parameter
            if (createUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "create_user", createUser)); // query parameter
            if (delayExportContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delay_export_content", delayExportContent)); // query parameter
            if (deleteContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_content_thread", deleteContentThread)); // query parameter
            if (impersonateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "impersonate_user", impersonateUser)); // query parameter
            if (inviteUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "invite_user", inviteUser)); // query parameter
            if (manageApiAccessTokens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_api_access_tokens", manageApiAccessTokens)); // query parameter
            if (manageAppSdkApplications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_app_sdk_applications", manageAppSdkApplications)); // query parameter
            if (manageAutomaticExportsTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks)); // query parameter
            if (manageCategories != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_categories", manageCategories)); // query parameter
            if (manageChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_chat", manageChat)); // query parameter
            if (manageCustomFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_fields", manageCustomFields)); // query parameter
            if (manageCustomNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_custom_notifications", manageCustomNotifications)); // query parameter
            if (manageEmailsTemplates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_emails_templates", manageEmailsTemplates)); // query parameter
            if (manageFolders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_folders", manageFolders)); // query parameter
            if (manageIce != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_ice", manageIce)); // query parameter
            if (manageIdentities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_identities", manageIdentities)); // query parameter
            if (manageOwnNotifications != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_own_notifications", manageOwnNotifications)); // query parameter
            if (manageReplyAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_reply_assistant", manageReplyAssistant)); // query parameter
            if (manageRoles != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_roles", manageRoles)); // query parameter
            if (manageRulesEngineRules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_rules_engine_rules", manageRulesEngineRules)); // query parameter
            if (manageSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_surveys", manageSurveys)); // query parameter
            if (manageTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_tags", manageTags)); // query parameter
            if (manageTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_teams", manageTeams)); // query parameter
            if (manageTopologies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_topologies", manageTopologies)); // query parameter
            if (manageUsersOfMyTeams != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manage_users_of_my_teams", manageUsersOfMyTeams)); // query parameter
            if (monitorTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_tasks", monitorTasks)); // query parameter
            if (monitorTeamTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "monitor_team_tasks", monitorTeamTasks)); // query parameter
            if (muteContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mute_content", muteContent)); // query parameter
            if (openContentThread != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "open_content_thread", openContentThread)); // query parameter
            if (publishContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publish_content", publishContent)); // query parameter
            if (readCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_community", readCommunity)); // query parameter
            if (readContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_content_source", readContentSource)); // query parameter
            if (readEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_event", readEvent)); // query parameter
            if (readExport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_export", readExport)); // query parameter
            if (readIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_identity", readIdentity)); // query parameter
            if (readOwnStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_own_stats", readOwnStats)); // query parameter
            if (readPresence != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_presence", readPresence)); // query parameter
            if (readStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_stats", readStats)); // query parameter
            if (readSurveys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_surveys", readSurveys)); // query parameter
            if (readUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "read_user", readUser)); // query parameter
            if (receiveTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receive_tasks", receiveTasks)); // query parameter
            if (replyWithAssistant != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reply_with_assistant", replyWithAssistant)); // query parameter
            if (searchContents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_contents", searchContents)); // query parameter
            if (searchEvent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_event", searchEvent)); // query parameter
            if (updateCommunity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_community", updateCommunity)); // query parameter
            if (updateContentSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_content_source", updateContentSource)); // query parameter
            if (updateExtension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_extension", updateExtension)); // query parameter
            if (updateIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_identity", updateIdentity)); // query parameter
            if (updateIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_intervention", updateIntervention)); // query parameter
            if (updateOwnIntervention != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_own_intervention", updateOwnIntervention)); // query parameter
            if (updateSettings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_settings", updateSettings)); // query parameter
            if (updateTimeSheet != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_time_sheet", updateTimeSheet)); // query parameter
            if (updateUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "update_user", updateUser)); // query parameter
            if (useEmoji != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_emoji", useEmoji)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

    }
}
