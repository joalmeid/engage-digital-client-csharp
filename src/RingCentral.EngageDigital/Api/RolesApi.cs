/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        Role CreateRole (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));

        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> CreateRoleWithHttpInfo (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));
        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllRolesResponse</returns>
        GetAllRolesResponse GetAllRoles (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllRolesResponse</returns>
        ApiResponse<GetAllRolesResponse> GetAllRolesWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        Role GetRole (string roleId);

        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (string roleId);
        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        Role UpdateRole (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));

        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> UpdateRoleWithHttpInfo (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateRoleAsync (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));

        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));
        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllRolesResponse</returns>
        System.Threading.Tasks.Task<GetAllRolesResponse> GetAllRolesAsync (int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllRolesResponse>> GetAllRolesAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (string roleId);

        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));

        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(RingCentral.EngageDigital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RingCentral.EngageDigital.Client.Configuration.MergeConfigurations(
                RingCentral.EngageDigital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RingCentral.EngageDigital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(RingCentral.EngageDigital.Client.ISynchronousClient client,RingCentral.EngageDigital.Client.IAsynchronousClient asyncClient, RingCentral.EngageDigital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RingCentral.EngageDigital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        public Role CreateRole (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Role> localVarResponse = CreateRoleWithHttpInfo(label, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Role > CreateRoleWithHttpInfo (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'label' when calling RolesApi->CreateRole");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (label != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessHelpCenter != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< Role >("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateRoleAsync (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Role> localVarResponse = await CreateRoleAsyncWithHttpInfo(label, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (string label, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'label' when calling RolesApi->CreateRole");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (label != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessHelpCenter != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Role>("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllRolesResponse</returns>
        public GetAllRolesResponse GetAllRoles (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllRolesResponse> localVarResponse = GetAllRolesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllRolesResponse</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< GetAllRolesResponse > GetAllRolesWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {
            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< GetAllRolesResponse >("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllRolesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllRolesResponse> GetAllRolesAsync (int? offset = default(int?), int? limit = default(int?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<GetAllRolesResponse> localVarResponse = await GetAllRolesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllRolesResponse)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<GetAllRolesResponse>> GetAllRolesAsyncWithHttpInfo (int? offset = default(int?), int? limit = default(int?))
        {

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllRolesResponse>("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        public Role GetRole (string roleId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Role > GetRoleWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleId != null)
                localVarRequestOptions.PathParameters.Add("roleId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Role >("/roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (string roleId)
        {
             RingCentral.EngageDigital.Client.ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (roleId != null)
                localVarRequestOptions.PathParameters.Add("roleId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Role>("/roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        public Role UpdateRole (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Role> localVarResponse = UpdateRoleWithHttpInfo(roleId, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public RingCentral.EngageDigital.Client.ApiResponse< Role > UpdateRoleWithHttpInfo (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");

            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = RingCentral.EngageDigital.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleId != null)
                localVarRequestOptions.PathParameters.Add("roleId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            if (accessHelpCenter != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put< Role >("/roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> UpdateRoleAsync (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
             RingCentral.EngageDigital.Client.ApiResponse<Role> localVarResponse = await UpdateRoleAsyncWithHttpInfo(roleId, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<RingCentral.EngageDigital.Client.ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string roleId, bool? accessHelpCenter = default(bool?), bool? accessPreviousMessages = default(bool?), bool? accessPullMode = default(bool?), bool? adminStampAnswer = default(bool?), bool? approveContent = default(bool?), bool? assignIntervention = default(bool?), bool? authorBlockContent = default(bool?), bool? closeContentThread = default(bool?), bool? createAndDestroyExtension = default(bool?), bool? createCommunity = default(bool?), bool? createContentSource = default(bool?), bool? createUser = default(bool?), bool? delayExportContent = default(bool?), bool? deleteContentThread = default(bool?), bool? impersonateUser = default(bool?), bool? inviteUser = default(bool?), bool? manageApiAccessTokens = default(bool?), bool? manageAppSdkApplications = default(bool?), bool? manageAutomaticExportsTasks = default(bool?), bool? manageCategories = default(bool?), bool? manageChat = default(bool?), bool? manageCustomFields = default(bool?), bool? manageCustomNotifications = default(bool?), bool? manageEmailsTemplates = default(bool?), bool? manageFolders = default(bool?), bool? manageIce = default(bool?), bool? manageIdentities = default(bool?), bool? manageOwnNotifications = default(bool?), bool? manageReplyAssistant = default(bool?), bool? manageRoles = default(bool?), bool? manageRulesEngineRules = default(bool?), bool? manageSurveys = default(bool?), bool? manageTags = default(bool?), bool? manageTeams = default(bool?), bool? manageTopologies = default(bool?), bool? manageUsersOfMyTeams = default(bool?), bool? monitorTasks = default(bool?), bool? monitorTeamTasks = default(bool?), bool? muteContent = default(bool?), bool? openContentThread = default(bool?), bool? publishContent = default(bool?), bool? readCommunity = default(bool?), bool? readContentSource = default(bool?), bool? readEvent = default(bool?), bool? readExport = default(bool?), bool? readIdentity = default(bool?), bool? readOwnStats = default(bool?), bool? readPresence = default(bool?), bool? readStats = default(bool?), bool? readSurveys = default(bool?), bool? readUser = default(bool?), bool? receiveTasks = default(bool?), bool? replyWithAssistant = default(bool?), bool? searchContents = default(bool?), bool? searchEvent = default(bool?), bool? updateCommunity = default(bool?), bool? updateContentSource = default(bool?), bool? updateExtension = default(bool?), bool? updateIdentity = default(bool?), bool? updateIntervention = default(bool?), bool? updateOwnIntervention = default(bool?), bool? updateSettings = default(bool?), bool? updateTimeSheet = default(bool?), bool? updateUser = default(bool?), bool? useEmoji = default(bool?))
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new RingCentral.EngageDigital.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");


            RingCentral.EngageDigital.Client.RequestOptions localVarRequestOptions = new RingCentral.EngageDigital.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (roleId != null)
                localVarRequestOptions.PathParameters.Add("roleId", RingCentral.EngageDigital.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            if (accessHelpCenter != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var _kvp in RingCentral.EngageDigital.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Role>("/roles/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
