/* 
 * Engage Digital API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using RingCentral.EngageDigital.Client;
using RingCentral.EngageDigital.Model;

namespace RingCentral.EngageDigital.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        internal interface ISettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        Settings GetAllSettings ();

        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> GetAllSettingsWithHttpInfo ();
        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Settings</returns>
        Settings UpdateSettings (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);

        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> UpdateSettingsWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> GetAllSettingsAsync ();

        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> GetAllSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> UpdateSettingsAsync (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);

        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> UpdateSettingsAsyncWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SettingsApi : ISettingsApi
    {
        private RingCentral.EngageDigital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = new RingCentral.EngageDigital.Client.Configuration { BasePath = basePath };

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SettingsApi()
        {
            this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(RingCentral.EngageDigital.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = RingCentral.EngageDigital.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = RingCentral.EngageDigital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RingCentral.EngageDigital.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RingCentral.EngageDigital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        public Settings GetAllSettings ()
        {
             ApiResponse<Settings> localVarResponse = GetAllSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        public ApiResponse< Settings > GetAllSettingsWithHttpInfo ()
        {

            var localVarPath = "./settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Settings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Settings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Settings)));
        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> GetAllSettingsAsync ()
        {
             ApiResponse<Settings> localVarResponse = await GetAllSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Settings>> GetAllSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Settings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Settings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Settings)));
        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Settings</returns>
        public Settings UpdateSettings (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {
             ApiResponse<Settings> localVarResponse = UpdateSettingsWithHttpInfo(activityPresenceThreshold, activityTracking, beginningOfWeek, categoryTagging, contentLanguages, dashboard, denyIframeIntegration, disablePasswordAutocomplete, expirePasswordAfter, expirePasswordEnabled, exportInSeconds, foldUselessContents, fteDuration, identityMerge, interventionDeferRates, interventionDeferThreshold, interventionRates, locale, multiLang, name, passwordArchivableEnabled, passwordArchivableSize, passwordMinLength, passwordNonWord, passwordNumbers, passwordRecoveryDisabled, pushEnabled, replyAsAnyIdentity, rtlSupport, selfApprovalRequired, sessionTimeout, spellchecking, style, thirdPartyServicesDisabled, timezone, trackJs, type, urgentTaskThreshold, useSystemFont);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>ApiResponse of Settings</returns>
        public ApiResponse< Settings > UpdateSettingsWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {

            var localVarPath = "./settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityPresenceThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_presence_threshold", activityPresenceThreshold)); // query parameter
            if (activityTracking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_tracking", activityTracking)); // query parameter
            if (beginningOfWeek != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beginning_of_week", beginningOfWeek)); // query parameter
            if (categoryTagging != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_tagging", categoryTagging)); // query parameter
            if (contentLanguages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_languages", contentLanguages)); // query parameter
            if (dashboard != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboard", dashboard)); // query parameter
            if (denyIframeIntegration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deny_iframe_integration", denyIframeIntegration)); // query parameter
            if (disablePasswordAutocomplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disable_password_autocomplete", disablePasswordAutocomplete)); // query parameter
            if (expirePasswordAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expire_password_after", expirePasswordAfter)); // query parameter
            if (expirePasswordEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expire_password_enabled", expirePasswordEnabled)); // query parameter
            if (exportInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "export_in_seconds", exportInSeconds)); // query parameter
            if (foldUselessContents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fold_useless_contents", foldUselessContents)); // query parameter
            if (fteDuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fte_duration", fteDuration)); // query parameter
            if (identityMerge != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity_merge", identityMerge)); // query parameter
            if (interventionDeferRates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "intervention_defer_rates[]", interventionDeferRates)); // query parameter
            if (interventionDeferThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "intervention_defer_threshold", interventionDeferThreshold)); // query parameter
            if (interventionRates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "intervention_rates", interventionRates)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter
            if (multiLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multi_lang", multiLang)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (passwordArchivableEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_archivable_enabled", passwordArchivableEnabled)); // query parameter
            if (passwordArchivableSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_archivable_size", passwordArchivableSize)); // query parameter
            if (passwordMinLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_min_length", passwordMinLength)); // query parameter
            if (passwordNonWord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_non_word", passwordNonWord)); // query parameter
            if (passwordNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_numbers", passwordNumbers)); // query parameter
            if (passwordRecoveryDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_recovery_disabled", passwordRecoveryDisabled)); // query parameter
            if (pushEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "push_enabled", pushEnabled)); // query parameter
            if (replyAsAnyIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reply_as_any_identity", replyAsAnyIdentity)); // query parameter
            if (rtlSupport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rtl_support", rtlSupport)); // query parameter
            if (selfApprovalRequired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "self_approval_required", selfApprovalRequired)); // query parameter
            if (sessionTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session_timeout", sessionTimeout)); // query parameter
            if (spellchecking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spellchecking", spellchecking)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (thirdPartyServicesDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "third_party_services_disabled", thirdPartyServicesDisabled)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (trackJs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "track_js", trackJs)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (urgentTaskThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "urgent_task_threshold", urgentTaskThreshold)); // query parameter
            if (useSystemFont != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_system_font", useSystemFont)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Settings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Settings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Settings)));
        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> UpdateSettingsAsync (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {
             ApiResponse<Settings> localVarResponse = await UpdateSettingsAsyncWithHttpInfo(activityPresenceThreshold, activityTracking, beginningOfWeek, categoryTagging, contentLanguages, dashboard, denyIframeIntegration, disablePasswordAutocomplete, expirePasswordAfter, expirePasswordEnabled, exportInSeconds, foldUselessContents, fteDuration, identityMerge, interventionDeferRates, interventionDeferThreshold, interventionRates, locale, multiLang, name, passwordArchivableEnabled, passwordArchivableSize, passwordMinLength, passwordNonWord, passwordNumbers, passwordRecoveryDisabled, pushEnabled, replyAsAnyIdentity, rtlSupport, selfApprovalRequired, sessionTimeout, spellchecking, style, thirdPartyServicesDisabled, timezone, trackJs, type, urgentTaskThreshold, useSystemFont);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="RingCentral.EngageDigital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Settings>> UpdateSettingsAsyncWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int?> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int?> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {

            var localVarPath = "./settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activityPresenceThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_presence_threshold", activityPresenceThreshold)); // query parameter
            if (activityTracking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_tracking", activityTracking)); // query parameter
            if (beginningOfWeek != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beginning_of_week", beginningOfWeek)); // query parameter
            if (categoryTagging != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_tagging", categoryTagging)); // query parameter
            if (contentLanguages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_languages", contentLanguages)); // query parameter
            if (dashboard != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dashboard", dashboard)); // query parameter
            if (denyIframeIntegration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deny_iframe_integration", denyIframeIntegration)); // query parameter
            if (disablePasswordAutocomplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disable_password_autocomplete", disablePasswordAutocomplete)); // query parameter
            if (expirePasswordAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expire_password_after", expirePasswordAfter)); // query parameter
            if (expirePasswordEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expire_password_enabled", expirePasswordEnabled)); // query parameter
            if (exportInSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "export_in_seconds", exportInSeconds)); // query parameter
            if (foldUselessContents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fold_useless_contents", foldUselessContents)); // query parameter
            if (fteDuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fte_duration", fteDuration)); // query parameter
            if (identityMerge != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity_merge", identityMerge)); // query parameter
            if (interventionDeferRates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "intervention_defer_rates[]", interventionDeferRates)); // query parameter
            if (interventionDeferThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "intervention_defer_threshold", interventionDeferThreshold)); // query parameter
            if (interventionRates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "intervention_rates", interventionRates)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter
            if (multiLang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multi_lang", multiLang)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (passwordArchivableEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_archivable_enabled", passwordArchivableEnabled)); // query parameter
            if (passwordArchivableSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_archivable_size", passwordArchivableSize)); // query parameter
            if (passwordMinLength != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_min_length", passwordMinLength)); // query parameter
            if (passwordNonWord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_non_word", passwordNonWord)); // query parameter
            if (passwordNumbers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_numbers", passwordNumbers)); // query parameter
            if (passwordRecoveryDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password_recovery_disabled", passwordRecoveryDisabled)); // query parameter
            if (pushEnabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "push_enabled", pushEnabled)); // query parameter
            if (replyAsAnyIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reply_as_any_identity", replyAsAnyIdentity)); // query parameter
            if (rtlSupport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rtl_support", rtlSupport)); // query parameter
            if (selfApprovalRequired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "self_approval_required", selfApprovalRequired)); // query parameter
            if (sessionTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session_timeout", sessionTimeout)); // query parameter
            if (spellchecking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spellchecking", spellchecking)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (thirdPartyServicesDisabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "third_party_services_disabled", thirdPartyServicesDisabled)); // query parameter
            if (timezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timezone", timezone)); // query parameter
            if (trackJs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "track_js", trackJs)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (urgentTaskThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "urgent_task_threshold", urgentTaskThreshold)); // query parameter
            if (useSystemFont != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_system_font", useSystemFont)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Settings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Settings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Settings)));
        }

    }
}
