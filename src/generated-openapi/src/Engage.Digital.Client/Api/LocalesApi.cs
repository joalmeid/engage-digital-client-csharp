/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Engage.Digital.Client;
using Engage.Digital.Model;

namespace Engage.Digital.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocalesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all locales
        /// </summary>
        /// <remarks>
        /// This method renders all available locales.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Locale&gt;</returns>
        List<Locale> GetAllLocales ();

        /// <summary>
        /// Getting all locales
        /// </summary>
        /// <remarks>
        /// This method renders all available locales.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Locale&gt;</returns>
        ApiResponse<List<Locale>> GetAllLocalesWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocalesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all locales
        /// </summary>
        /// <remarks>
        /// This method renders all available locales.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Locale&gt;</returns>
        System.Threading.Tasks.Task<List<Locale>> GetAllLocalesAsync ();

        /// <summary>
        /// Getting all locales
        /// </summary>
        /// <remarks>
        /// This method renders all available locales.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Locale&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Locale>>> GetAllLocalesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocalesApi : ILocalesApiSync, ILocalesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocalesApi : ILocalesApi
    {
        private Engage.Digital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocalesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocalesApi(String basePath)
        {
            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                new Engage.Digital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocalesApi(Engage.Digital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocalesApi(Engage.Digital.Client.ISynchronousClient client,Engage.Digital.Client.IAsynchronousClient asyncClient, Engage.Digital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Engage.Digital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Engage.Digital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Engage.Digital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Engage.Digital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all locales This method renders all available locales.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Locale&gt;</returns>
        public List<Locale> GetAllLocales ()
        {
             Engage.Digital.Client.ApiResponse<List<Locale>> localVarResponse = GetAllLocalesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all locales This method renders all available locales.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Locale&gt;</returns>
        public Engage.Digital.Client.ApiResponse< List<Locale> > GetAllLocalesWithHttpInfo ()
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< List<Locale> >("/locales", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllLocales", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all locales This method renders all available locales.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Locale&gt;</returns>
        public async System.Threading.Tasks.Task<List<Locale>> GetAllLocalesAsync ()
        {
             Engage.Digital.Client.ApiResponse<List<Locale>> localVarResponse = await GetAllLocalesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all locales This method renders all available locales.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Locale&gt;)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<List<Locale>>> GetAllLocalesAsyncWithHttpInfo ()
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Locale>>("/locales", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllLocales", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
