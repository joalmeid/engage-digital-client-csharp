/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Engage.Digital.Client;
using Engage.Digital.Model;

namespace Engage.Digital.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all events
        /// </summary>
        /// <remarks>
        /// This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllEventsResponse</returns>
        GetAllEventsResponse GetAllEvents (string q = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all events
        /// </summary>
        /// <remarks>
        /// This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllEventsResponse</returns>
        ApiResponse<GetAllEventsResponse> GetAllEventsWithHttpInfo (string q = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an event from its id
        /// </summary>
        /// <remarks>
        /// This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Event</returns>
        Event GetEvent (string eventId);

        /// <summary>
        /// Getting an event from its id
        /// </summary>
        /// <remarks>
        /// This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> GetEventWithHttpInfo (string eventId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all events
        /// </summary>
        /// <remarks>
        /// This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllEventsResponse</returns>
        System.Threading.Tasks.Task<GetAllEventsResponse> GetAllEventsAsync (string q = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all events
        /// </summary>
        /// <remarks>
        /// This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllEventsResponse>> GetAllEventsAsyncWithHttpInfo (string q = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an event from its id
        /// </summary>
        /// <remarks>
        /// This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> GetEventAsync (string eventId);

        /// <summary>
        /// Getting an event from its id
        /// </summary>
        /// <remarks>
        /// This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> GetEventAsyncWithHttpInfo (string eventId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private Engage.Digital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(String basePath)
        {
            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                new Engage.Digital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(Engage.Digital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(Engage.Digital.Client.ISynchronousClient client,Engage.Digital.Client.IAsynchronousClient asyncClient, Engage.Digital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Engage.Digital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Engage.Digital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Engage.Digital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Engage.Digital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all events This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllEventsResponse</returns>
        public GetAllEventsResponse GetAllEvents (string q = null, int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllEventsResponse> localVarResponse = GetAllEventsWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all events This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllEventsResponse</returns>
        public Engage.Digital.Client.ApiResponse< GetAllEventsResponse > GetAllEventsWithHttpInfo (string q = null, int? offset = null, int? limit = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllEventsResponse >("/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllEvents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all events This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllEventsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllEventsResponse> GetAllEventsAsync (string q = null, int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllEventsResponse> localVarResponse = await GetAllEventsAsyncWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all events This method renders events ordered by creation date (descending).  Authorization​: Only users whose role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">To filter events on given query. Query works exactly like threads query but only have those keywords: content, content_thread, name_in, created_before, created_after, user. Order can be created_at.desc (default) or created_at.asc. e.g. q&#x3D;name_in:\&quot;content.replied\&quot;%20content_thread:\&quot;7f946431b6eebffafae642cc\&quot;%20created_after:\&quot;2014-03-20\&quot;%20user:\&quot;4ee91f197aa58d01b500000f\&quot;%20order:\&quot;created_at.asc\&quot; * DateTime parameters should be ISO-8601 * you can specify multiple value for a given keyword: q&#x3D;name_in:’content.replied’&amp;name_in:’content.ignored’ Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllEventsResponse)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<GetAllEventsResponse>> GetAllEventsAsyncWithHttpInfo (string q = null, int? offset = null, int? limit = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (q != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllEventsResponse>("/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllEvents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting an event from its id This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Event</returns>
        public Event GetEvent (string eventId)
        {
             Engage.Digital.Client.ApiResponse<Event> localVarResponse = GetEventWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an event from its id This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of Event</returns>
        public Engage.Digital.Client.ApiResponse< Event > GetEventWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetEvent");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventId != null)
                requestOptions.PathParameters.Add("eventId", Engage.Digital.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Event >("/events/{eventId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEvent", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting an event from its id This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> GetEventAsync (string eventId)
        {
             Engage.Digital.Client.ApiResponse<Event> localVarResponse = await GetEventAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an event from its id This method renders an event from given id. If token’s user role does not have “search event” permission a 404 HTTP response will be returned.  Authorization​: Only users who’s role can search event permission.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Event>> GetEventAsyncWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetEvent");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (eventId != null)
                requestOptions.PathParameters.Add("eventId", Engage.Digital.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Event>("/events/{eventId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEvent", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
