/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Engage.Digital.Client;
using Engage.Digital.Model;

namespace Engage.Digital.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPresenceStatusApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a presence status
        /// </summary>
        /// <remarks>
        /// This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>PresenceStatus</returns>
        PresenceStatus CreatePresenceStatus (string name);

        /// <summary>
        /// Creating a presence status
        /// </summary>
        /// <remarks>
        /// This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        ApiResponse<PresenceStatus> CreatePresenceStatusWithHttpInfo (string name);
        /// <summary>
        /// Deleting a presence status
        /// </summary>
        /// <remarks>
        /// This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>PresenceStatus</returns>
        PresenceStatus DeletePresenceStatus (string presenceStatusId);

        /// <summary>
        /// Deleting a presence status
        /// </summary>
        /// <remarks>
        /// This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        ApiResponse<PresenceStatus> DeletePresenceStatusWithHttpInfo (string presenceStatusId);
        /// <summary>
        /// Getting all presence statuses
        /// </summary>
        /// <remarks>
        /// This method renders all presence statuses ordered by name (in alphabetical order).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllPresenceStatusResponse</returns>
        GetAllPresenceStatusResponse GetAllPresenceStatus (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all presence statuses
        /// </summary>
        /// <remarks>
        /// This method renders all presence statuses ordered by name (in alphabetical order).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllPresenceStatusResponse</returns>
        ApiResponse<GetAllPresenceStatusResponse> GetAllPresenceStatusWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a presence status from its id
        /// </summary>
        /// <remarks>
        /// This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>PresenceStatus</returns>
        PresenceStatus GetPresenceStatus (string presenceStatusId);

        /// <summary>
        /// Getting a presence status from its id
        /// </summary>
        /// <remarks>
        /// This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        ApiResponse<PresenceStatus> GetPresenceStatusWithHttpInfo (string presenceStatusId);
        /// <summary>
        /// Updating a presence status
        /// </summary>
        /// <remarks>
        /// This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>PresenceStatus</returns>
        PresenceStatus UpdatePresenceStatus (string presenceStatusId, string name);

        /// <summary>
        /// Updating a presence status
        /// </summary>
        /// <remarks>
        /// This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        ApiResponse<PresenceStatus> UpdatePresenceStatusWithHttpInfo (string presenceStatusId, string name);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPresenceStatusApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a presence status
        /// </summary>
        /// <remarks>
        /// This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of PresenceStatus</returns>
        System.Threading.Tasks.Task<PresenceStatus> CreatePresenceStatusAsync (string name);

        /// <summary>
        /// Creating a presence status
        /// </summary>
        /// <remarks>
        /// This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceStatus>> CreatePresenceStatusAsyncWithHttpInfo (string name);
        /// <summary>
        /// Deleting a presence status
        /// </summary>
        /// <remarks>
        /// This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of PresenceStatus</returns>
        System.Threading.Tasks.Task<PresenceStatus> DeletePresenceStatusAsync (string presenceStatusId);

        /// <summary>
        /// Deleting a presence status
        /// </summary>
        /// <remarks>
        /// This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceStatus>> DeletePresenceStatusAsyncWithHttpInfo (string presenceStatusId);
        /// <summary>
        /// Getting all presence statuses
        /// </summary>
        /// <remarks>
        /// This method renders all presence statuses ordered by name (in alphabetical order).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllPresenceStatusResponse</returns>
        System.Threading.Tasks.Task<GetAllPresenceStatusResponse> GetAllPresenceStatusAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all presence statuses
        /// </summary>
        /// <remarks>
        /// This method renders all presence statuses ordered by name (in alphabetical order).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllPresenceStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllPresenceStatusResponse>> GetAllPresenceStatusAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a presence status from its id
        /// </summary>
        /// <remarks>
        /// This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of PresenceStatus</returns>
        System.Threading.Tasks.Task<PresenceStatus> GetPresenceStatusAsync (string presenceStatusId);

        /// <summary>
        /// Getting a presence status from its id
        /// </summary>
        /// <remarks>
        /// This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceStatus>> GetPresenceStatusAsyncWithHttpInfo (string presenceStatusId);
        /// <summary>
        /// Updating a presence status
        /// </summary>
        /// <remarks>
        /// This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of PresenceStatus</returns>
        System.Threading.Tasks.Task<PresenceStatus> UpdatePresenceStatusAsync (string presenceStatusId, string name);

        /// <summary>
        /// Updating a presence status
        /// </summary>
        /// <remarks>
        /// This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceStatus>> UpdatePresenceStatusAsyncWithHttpInfo (string presenceStatusId, string name);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPresenceStatusApi : IPresenceStatusApiSync, IPresenceStatusApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PresenceStatusApi : IPresenceStatusApi
    {
        private Engage.Digital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PresenceStatusApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PresenceStatusApi(String basePath)
        {
            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                new Engage.Digital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceStatusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PresenceStatusApi(Engage.Digital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceStatusApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PresenceStatusApi(Engage.Digital.Client.ISynchronousClient client,Engage.Digital.Client.IAsynchronousClient asyncClient, Engage.Digital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Engage.Digital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Engage.Digital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Engage.Digital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Engage.Digital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a presence status This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>PresenceStatus</returns>
        public PresenceStatus CreatePresenceStatus (string name)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = CreatePresenceStatusWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a presence status This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        public Engage.Digital.Client.ApiResponse< PresenceStatus > CreatePresenceStatusWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'name' when calling PresenceStatusApi->CreatePresenceStatus");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< PresenceStatus >("/presence_status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating a presence status This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of PresenceStatus</returns>
        public async System.Threading.Tasks.Task<PresenceStatus> CreatePresenceStatusAsync (string name)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = await CreatePresenceStatusAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a presence status This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<PresenceStatus>> CreatePresenceStatusAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'name' when calling PresenceStatusApi->CreatePresenceStatus");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<PresenceStatus>("/presence_status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a presence status This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>PresenceStatus</returns>
        public PresenceStatus DeletePresenceStatus (string presenceStatusId)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = DeletePresenceStatusWithHttpInfo(presenceStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a presence status This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        public Engage.Digital.Client.ApiResponse< PresenceStatus > DeletePresenceStatusWithHttpInfo (string presenceStatusId)
        {
            // verify the required parameter 'presenceStatusId' is set
            if (presenceStatusId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'presenceStatusId' when calling PresenceStatusApi->DeletePresenceStatus");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (presenceStatusId != null)
                requestOptions.PathParameters.Add("presenceStatusId", Engage.Digital.Client.ClientUtils.ParameterToString(presenceStatusId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< PresenceStatus >("/presence_status/{presenceStatusId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeletePresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a presence status This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of PresenceStatus</returns>
        public async System.Threading.Tasks.Task<PresenceStatus> DeletePresenceStatusAsync (string presenceStatusId)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = await DeletePresenceStatusAsyncWithHttpInfo(presenceStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a presence status This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<PresenceStatus>> DeletePresenceStatusAsyncWithHttpInfo (string presenceStatusId)
        {
            // verify the required parameter 'presenceStatusId' is set
            if (presenceStatusId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'presenceStatusId' when calling PresenceStatusApi->DeletePresenceStatus");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (presenceStatusId != null)
                requestOptions.PathParameters.Add("presenceStatusId", Engage.Digital.Client.ClientUtils.ParameterToString(presenceStatusId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<PresenceStatus>("/presence_status/{presenceStatusId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeletePresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all presence statuses This method renders all presence statuses ordered by name (in alphabetical order).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllPresenceStatusResponse</returns>
        public GetAllPresenceStatusResponse GetAllPresenceStatus (int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllPresenceStatusResponse> localVarResponse = GetAllPresenceStatusWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all presence statuses This method renders all presence statuses ordered by name (in alphabetical order).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllPresenceStatusResponse</returns>
        public Engage.Digital.Client.ApiResponse< GetAllPresenceStatusResponse > GetAllPresenceStatusWithHttpInfo (int? offset = null, int? limit = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllPresenceStatusResponse >("/presence_status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllPresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all presence statuses This method renders all presence statuses ordered by name (in alphabetical order).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllPresenceStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetAllPresenceStatusResponse> GetAllPresenceStatusAsync (int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllPresenceStatusResponse> localVarResponse = await GetAllPresenceStatusAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all presence statuses This method renders all presence statuses ordered by name (in alphabetical order).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllPresenceStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<GetAllPresenceStatusResponse>> GetAllPresenceStatusAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllPresenceStatusResponse>("/presence_status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllPresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a presence status from its id This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>PresenceStatus</returns>
        public PresenceStatus GetPresenceStatus (string presenceStatusId)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = GetPresenceStatusWithHttpInfo(presenceStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a presence status from its id This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        public Engage.Digital.Client.ApiResponse< PresenceStatus > GetPresenceStatusWithHttpInfo (string presenceStatusId)
        {
            // verify the required parameter 'presenceStatusId' is set
            if (presenceStatusId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'presenceStatusId' when calling PresenceStatusApi->GetPresenceStatus");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (presenceStatusId != null)
                requestOptions.PathParameters.Add("presenceStatusId", Engage.Digital.Client.ClientUtils.ParameterToString(presenceStatusId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< PresenceStatus >("/presence_status/{presenceStatusId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a presence status from its id This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of PresenceStatus</returns>
        public async System.Threading.Tasks.Task<PresenceStatus> GetPresenceStatusAsync (string presenceStatusId)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = await GetPresenceStatusAsyncWithHttpInfo(presenceStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a presence status from its id This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<PresenceStatus>> GetPresenceStatusAsyncWithHttpInfo (string presenceStatusId)
        {
            // verify the required parameter 'presenceStatusId' is set
            if (presenceStatusId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'presenceStatusId' when calling PresenceStatusApi->GetPresenceStatus");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (presenceStatusId != null)
                requestOptions.PathParameters.Add("presenceStatusId", Engage.Digital.Client.ClientUtils.ParameterToString(presenceStatusId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PresenceStatus>("/presence_status/{presenceStatusId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a presence status This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>PresenceStatus</returns>
        public PresenceStatus UpdatePresenceStatus (string presenceStatusId, string name)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = UpdatePresenceStatusWithHttpInfo(presenceStatusId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a presence status This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>ApiResponse of PresenceStatus</returns>
        public Engage.Digital.Client.ApiResponse< PresenceStatus > UpdatePresenceStatusWithHttpInfo (string presenceStatusId, string name)
        {
            // verify the required parameter 'presenceStatusId' is set
            if (presenceStatusId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'presenceStatusId' when calling PresenceStatusApi->UpdatePresenceStatus");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'name' when calling PresenceStatusApi->UpdatePresenceStatus");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (presenceStatusId != null)
                requestOptions.PathParameters.Add("presenceStatusId", Engage.Digital.Client.ClientUtils.ParameterToString(presenceStatusId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< PresenceStatus >("/presence_status/{presenceStatusId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a presence status This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of PresenceStatus</returns>
        public async System.Threading.Tasks.Task<PresenceStatus> UpdatePresenceStatusAsync (string presenceStatusId, string name)
        {
             Engage.Digital.Client.ApiResponse<PresenceStatus> localVarResponse = await UpdatePresenceStatusAsyncWithHttpInfo(presenceStatusId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a presence status This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presenceStatusId"></param>
        /// <param name="name">The name of the presence status.</param>
        /// <returns>Task of ApiResponse (PresenceStatus)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<PresenceStatus>> UpdatePresenceStatusAsyncWithHttpInfo (string presenceStatusId, string name)
        {
            // verify the required parameter 'presenceStatusId' is set
            if (presenceStatusId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'presenceStatusId' when calling PresenceStatusApi->UpdatePresenceStatus");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'name' when calling PresenceStatusApi->UpdatePresenceStatus");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (presenceStatusId != null)
                requestOptions.PathParameters.Add("presenceStatusId", Engage.Digital.Client.ClientUtils.ParameterToString(presenceStatusId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<PresenceStatus>("/presence_status/{presenceStatusId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePresenceStatus", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
