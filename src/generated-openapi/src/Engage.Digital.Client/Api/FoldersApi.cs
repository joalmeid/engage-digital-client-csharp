/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Engage.Digital.Client;
using Engage.Digital.Model;

namespace Engage.Digital.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        Folder CreateFolder (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> CreateFolderWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        Folder DeleteFolder (string folderId);

        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> DeleteFolderWithHttpInfo (string folderId);
        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllFoldersResponse</returns>
        GetAllFoldersResponse GetAllFolders (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllFoldersResponse</returns>
        ApiResponse<GetAllFoldersResponse> GetAllFoldersWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        Folder GetFolder (string folderId);

        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> GetFolderWithHttpInfo (string folderId);
        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        Folder UpdateFolder (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        ApiResponse<Folder> UpdateFolderWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Creating a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> DeleteFolderAsync (string folderId);

        /// <summary>
        /// Deleting a folder
        /// </summary>
        /// <remarks>
        /// This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> DeleteFolderAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllFoldersResponse</returns>
        System.Threading.Tasks.Task<GetAllFoldersResponse> GetAllFoldersAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all folders
        /// </summary>
        /// <remarks>
        /// This method renders folders.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllFoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllFoldersResponse>> GetAllFoldersAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> GetFolderAsync (string folderId);

        /// <summary>
        /// Getting a folder from its id
        /// </summary>
        /// <remarks>
        /// This method renders a folder from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> GetFolderAsyncWithHttpInfo (string folderId);
        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> UpdateFolderAsync (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);

        /// <summary>
        /// Updating a folder
        /// </summary>
        /// <remarks>
        /// This method updates an existing folder from given attributes and renders it in case of success.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IFoldersApiSync, IFoldersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private Engage.Digital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                new Engage.Digital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(Engage.Digital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FoldersApi(Engage.Digital.Client.ISynchronousClient client,Engage.Digital.Client.IAsynchronousClient asyncClient, Engage.Digital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Engage.Digital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Engage.Digital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Engage.Digital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Engage.Digital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        public Folder CreateFolder (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = CreateFolderWithHttpInfo(label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        public Engage.Digital.Client.ApiResponse< Folder > CreateFolderWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (label != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (position != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (query != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "query", query))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (renderThreadsCount != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "render_threads_count", renderThreadsCount))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (roleRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "role_restriction[only][]", roleRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "team_restriction[only][]", teamRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< Folder >("/folders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = await CreateFolderAsyncWithHttpInfo(label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a folder This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (label != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (position != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (query != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "query", query))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (renderThreadsCount != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "render_threads_count", renderThreadsCount))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (roleRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "role_restriction[only][]", roleRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "team_restriction[only][]", teamRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Folder>("/folders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        public Folder DeleteFolder (string folderId)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = DeleteFolderWithHttpInfo(folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        public Engage.Digital.Client.ApiResponse< Folder > DeleteFolderWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->DeleteFolder");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (folderId != null)
                requestOptions.PathParameters.Add("folderId", Engage.Digital.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< Folder >("/folders/{folderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> DeleteFolderAsync (string folderId)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = await DeleteFolderAsyncWithHttpInfo(folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a folder This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Folder>> DeleteFolderAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->DeleteFolder");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("folderId", Engage.Digital.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Folder>("/folders/{folderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllFoldersResponse</returns>
        public GetAllFoldersResponse GetAllFolders (int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllFoldersResponse> localVarResponse = GetAllFoldersWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllFoldersResponse</returns>
        public Engage.Digital.Client.ApiResponse< GetAllFoldersResponse > GetAllFoldersWithHttpInfo (int? offset = null, int? limit = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllFoldersResponse >("/folders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllFolders", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllFoldersResponse</returns>
        public async System.Threading.Tasks.Task<GetAllFoldersResponse> GetAllFoldersAsync (int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllFoldersResponse> localVarResponse = await GetAllFoldersAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all folders This method renders folders.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllFoldersResponse)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<GetAllFoldersResponse>> GetAllFoldersAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllFoldersResponse>("/folders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllFolders", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Folder</returns>
        public Folder GetFolder (string folderId)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = GetFolderWithHttpInfo(folderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>ApiResponse of Folder</returns>
        public Engage.Digital.Client.ApiResponse< Folder > GetFolderWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->GetFolder");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (folderId != null)
                requestOptions.PathParameters.Add("folderId", Engage.Digital.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Folder >("/folders/{folderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> GetFolderAsync (string folderId)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = await GetFolderAsyncWithHttpInfo(folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a folder from its id This method renders a folder from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Folder>> GetFolderAsyncWithHttpInfo (string folderId)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->GetFolder");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("folderId", Engage.Digital.Client.ClientUtils.ParameterToString(folderId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Folder>("/folders/{folderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Folder</returns>
        public Folder UpdateFolder (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = UpdateFolderWithHttpInfo(folderId, label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>ApiResponse of Folder</returns>
        public Engage.Digital.Client.ApiResponse< Folder > UpdateFolderWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->UpdateFolder");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (folderId != null)
                requestOptions.PathParameters.Add("folderId", Engage.Digital.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (label != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (position != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (query != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "query", query))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (renderThreadsCount != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "render_threads_count", renderThreadsCount))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (roleRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "role_restriction[only][]", roleRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "team_restriction[only][]", teamRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Folder >("/folders/{folderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> UpdateFolderAsync (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
             Engage.Digital.Client.ApiResponse<Folder> localVarResponse = await UpdateFolderAsyncWithHttpInfo(folderId, label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a folder This method updates an existing folder from given attributes and renders it in case of success.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="label">Folder’s label (mandatory). (optional)</param>
        /// <param name="parentId">ID of the parent folder. (optional)</param>
        /// <param name="position">position of the folder.  (optional)</param>
        /// <param name="query">query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true” (optional)</param>
        /// <param name="renderThreadsCount">boolean describing display of the number of threads.  (optional)</param>
        /// <param name="roleRestrictionOnly">list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \&quot;only\&quot;. For example: &#x60;&amp;role_restriction[only][]&#x3D;4e5596cdae70f677b5000002&#x60; (optional)</param>
        /// <param name="teamRestrictionOnly">list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \&quot;only\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (string folderId, string label = null, string parentId = null, int? position = null, string query = null, bool? renderThreadsCount = null, List<string> roleRestrictionOnly = null, List<string> teamRestrictionOnly = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->UpdateFolder");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("folderId", Engage.Digital.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (label != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (position != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "position", position))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (query != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "query", query))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (renderThreadsCount != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "render_threads_count", renderThreadsCount))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (roleRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "role_restriction[only][]", roleRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamRestrictionOnly != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "team_restriction[only][]", teamRestrictionOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Folder>("/folders/{folderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
