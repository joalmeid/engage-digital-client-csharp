/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Engage.Digital.Client;
using Engage.Digital.Model;

namespace Engage.Digital.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        Category CreateCategory (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> CreateCategoryWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Category</returns>
        Category DeleteCategory (string categoryId, string takeOverCategoryId = null);

        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> DeleteCategoryWithHttpInfo (string categoryId, string takeOverCategoryId = null);
        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCategoriesResponse</returns>
        GetAllCategoriesResponse GetAllCategories (string parentId = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCategoriesResponse</returns>
        ApiResponse<GetAllCategoriesResponse> GetAllCategoriesWithHttpInfo (string parentId = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Category</returns>
        Category GetCategory (string categoryId);

        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> GetCategoryWithHttpInfo (string categoryId);
        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        Category UpdateCategory (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> UpdateCategoryWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> CreateCategoryAsync (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Creating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> CreateCategoryAsyncWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> DeleteCategoryAsync (string categoryId, string takeOverCategoryId = null);

        /// <summary>
        /// Deleting a category
        /// </summary>
        /// <remarks>
        /// This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> DeleteCategoryAsyncWithHttpInfo (string categoryId, string takeOverCategoryId = null);
        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCategoriesResponse</returns>
        System.Threading.Tasks.Task<GetAllCategoriesResponse> GetAllCategoriesAsync (string parentId = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all categories
        /// </summary>
        /// <remarks>
        /// This method renders categories ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllCategoriesResponse>> GetAllCategoriesAsyncWithHttpInfo (string parentId = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> GetCategoryAsync (string categoryId);

        /// <summary>
        /// Getting a category from its id
        /// </summary>
        /// <remarks>
        /// This method renders a category from given id.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> GetCategoryAsyncWithHttpInfo (string categoryId);
        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> UpdateCategoryAsync (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a category
        /// </summary>
        /// <remarks>
        /// This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> UpdateCategoryAsyncWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApi : ICategoriesApiSync, ICategoriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoriesApi : ICategoriesApi
    {
        private Engage.Digital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi(String basePath)
        {
            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                new Engage.Digital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoriesApi(Engage.Digital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CategoriesApi(Engage.Digital.Client.ISynchronousClient client,Engage.Digital.Client.IAsynchronousClient asyncClient, Engage.Digital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Engage.Digital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Engage.Digital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Engage.Digital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Engage.Digital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        public Category CreateCategory (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = CreateCategoryWithHttpInfo(name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Engage.Digital.Client.ApiResponse< Category > CreateCategoryWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (color != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "color", color))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (mandatory != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "mandatory", mandatory))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (multiple != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "multiple", multiple))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (postQualification != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "post_qualification", postQualification))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unselectable != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "unselectable", unselectable))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< Category >("/categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> CreateCategoryAsync (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = await CreateCategoryAsyncWithHttpInfo(name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Category>> CreateCategoryAsyncWithHttpInfo (string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (color != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "color", color))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (mandatory != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "mandatory", mandatory))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (multiple != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "multiple", multiple))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (postQualification != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "post_qualification", postQualification))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unselectable != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "unselectable", unselectable))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Category>("/categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Category</returns>
        public Category DeleteCategory (string categoryId, string takeOverCategoryId = null)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = DeleteCategoryWithHttpInfo(categoryId, takeOverCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Engage.Digital.Client.ApiResponse< Category > DeleteCategoryWithHttpInfo (string categoryId, string takeOverCategoryId = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategory");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (categoryId != null)
                requestOptions.PathParameters.Add("categoryId", Engage.Digital.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (takeOverCategoryId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "take_over_category_id", takeOverCategoryId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Delete< Category >("/categories/{categoryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> DeleteCategoryAsync (string categoryId, string takeOverCategoryId = null)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = await DeleteCategoryAsyncWithHttpInfo(categoryId, takeOverCategoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a category This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="takeOverCategoryId">ID of a category to recategorize (optional). (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Category>> DeleteCategoryAsyncWithHttpInfo (string categoryId, string takeOverCategoryId = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->DeleteCategory");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (categoryId != null)
                requestOptions.PathParameters.Add("categoryId", Engage.Digital.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (takeOverCategoryId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "take_over_category_id", takeOverCategoryId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Category>("/categories/{categoryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllCategoriesResponse</returns>
        public GetAllCategoriesResponse GetAllCategories (string parentId = null, int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllCategoriesResponse> localVarResponse = GetAllCategoriesWithHttpInfo(parentId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllCategoriesResponse</returns>
        public Engage.Digital.Client.ApiResponse< GetAllCategoriesResponse > GetAllCategoriesWithHttpInfo (string parentId = null, int? offset = null, int? limit = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllCategoriesResponse >("/categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllCategories", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllCategoriesResponse> GetAllCategoriesAsync (string parentId = null, int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllCategoriesResponse> localVarResponse = await GetAllCategoriesAsyncWithHttpInfo(parentId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all categories This method renders categories ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentId">To filter categories on given category parent id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<GetAllCategoriesResponse>> GetAllCategoriesAsyncWithHttpInfo (string parentId = null, int? offset = null, int? limit = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllCategoriesResponse>("/categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllCategories", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Category</returns>
        public Category GetCategory (string categoryId)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = GetCategoryWithHttpInfo(categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>ApiResponse of Category</returns>
        public Engage.Digital.Client.ApiResponse< Category > GetCategoryWithHttpInfo (string categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategory");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (categoryId != null)
                requestOptions.PathParameters.Add("categoryId", Engage.Digital.Client.ClientUtils.ParameterToString(categoryId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Category >("/categories/{categoryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> GetCategoryAsync (string categoryId)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = await GetCategoryAsyncWithHttpInfo(categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a category from its id This method renders a category from given id.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Category>> GetCategoryAsyncWithHttpInfo (string categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategory");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (categoryId != null)
                requestOptions.PathParameters.Add("categoryId", Engage.Digital.Client.ClientUtils.ParameterToString(categoryId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Category>("/categories/{categoryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Category</returns>
        public Category UpdateCategory (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = UpdateCategoryWithHttpInfo(categoryId, name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public Engage.Digital.Client.ApiResponse< Category > UpdateCategoryWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategory");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (categoryId != null)
                requestOptions.PathParameters.Add("categoryId", Engage.Digital.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (color != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "color", color))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (mandatory != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "mandatory", mandatory))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (multiple != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "multiple", multiple))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (postQualification != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "post_qualification", postQualification))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unselectable != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "unselectable", unselectable))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Category >("/categories/{categoryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> UpdateCategoryAsync (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
             Engage.Digital.Client.ApiResponse<Category> localVarResponse = await UpdateCategoryAsyncWithHttpInfo(categoryId, name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a category This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"></param>
        /// <param name="name">Category name. (optional)</param>
        /// <param name="parentId">ID of parent category. (optional)</param>
        /// <param name="color">displayed color for the category, see Category colors.  (optional)</param>
        /// <param name="mandatory">mandatory categorization (Boolean). (optional)</param>
        /// <param name="multiple">allow to assign multiple child categories (Boolean). (optional)</param>
        /// <param name="postQualification">post qualification (Boolean). (optional)</param>
        /// <param name="unselectable">root category is unselectable (Boolean). (optional)</param>
        /// <param name="sourceIds">List of source id. (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Category>> UpdateCategoryAsyncWithHttpInfo (string categoryId, string name = null, string parentId = null, int? color = null, bool? mandatory = null, bool? multiple = null, bool? postQualification = null, bool? unselectable = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateCategory");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (categoryId != null)
                requestOptions.PathParameters.Add("categoryId", Engage.Digital.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (parentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "parent_id", parentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (color != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "color", color))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (mandatory != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "mandatory", mandatory))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (multiple != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "multiple", multiple))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (postQualification != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "post_qualification", postQualification))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unselectable != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "unselectable", unselectable))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Category>("/categories/{categoryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
