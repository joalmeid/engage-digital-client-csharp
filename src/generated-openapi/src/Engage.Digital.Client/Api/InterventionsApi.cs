/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Engage.Digital.Client;
using Engage.Digital.Model;

namespace Engage.Digital.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInterventionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        Intervention CancelIntervention (string interventionId);

        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> CancelInterventionWithHttpInfo (string interventionId);
        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Intervention</returns>
        Intervention CategorizeIntervention (string interventionId, List<string> categoryIds);

        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> CategorizeInterventionWithHttpInfo (string interventionId, List<string> categoryIds);
        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        Intervention CloseIntervention (string interventionId);

        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> CloseInterventionWithHttpInfo (string interventionId);
        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>GetAllInterventionsResponse</returns>
        GetAllInterventionsResponse CreateIntervention (string contentId);

        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        ApiResponse<GetAllInterventionsResponse> CreateInterventionWithHttpInfo (string contentId);
        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllInterventionsResponse</returns>
        GetAllInterventionsResponse GetAllInterventions (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        ApiResponse<GetAllInterventionsResponse> GetAllInterventionsWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        Intervention GetIntervention (string interventionId);

        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> GetInterventionWithHttpInfo (string interventionId);
        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Intervention</returns>
        Intervention ReassignIntervention (string interventionId, string userId);

        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        ApiResponse<Intervention> ReassignInterventionWithHttpInfo (string interventionId, string userId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInterventionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> CancelInterventionAsync (string interventionId);

        /// <summary>
        /// Cancelling an intervention
        /// </summary>
        /// <remarks>
        /// This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> CancelInterventionAsyncWithHttpInfo (string interventionId);
        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> CategorizeInterventionAsync (string interventionId, List<string> categoryIds);

        /// <summary>
        /// Categorizing an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> CategorizeInterventionAsyncWithHttpInfo (string interventionId, List<string> categoryIds);
        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> CloseInterventionAsync (string interventionId);

        /// <summary>
        /// Closing an intervention
        /// </summary>
        /// <remarks>
        /// This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> CloseInterventionAsyncWithHttpInfo (string interventionId);
        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        System.Threading.Tasks.Task<GetAllInterventionsResponse> CreateInterventionAsync (string contentId);

        /// <summary>
        /// Creating an intervention
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInterventionsResponse>> CreateInterventionAsyncWithHttpInfo (string contentId);
        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        System.Threading.Tasks.Task<GetAllInterventionsResponse> GetAllInterventionsAsync (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all interventions
        /// </summary>
        /// <remarks>
        /// This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInterventionsResponse>> GetAllInterventionsAsyncWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> GetInterventionAsync (string interventionId);

        /// <summary>
        /// Getting an intervention from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> GetInterventionAsyncWithHttpInfo (string interventionId);
        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of Intervention</returns>
        System.Threading.Tasks.Task<Intervention> ReassignInterventionAsync (string interventionId, string userId);

        /// <summary>
        /// Reassigning an intervention
        /// </summary>
        /// <remarks>
        /// This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </remarks>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        System.Threading.Tasks.Task<ApiResponse<Intervention>> ReassignInterventionAsyncWithHttpInfo (string interventionId, string userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInterventionsApi : IInterventionsApiSync, IInterventionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InterventionsApi : IInterventionsApi
    {
        private Engage.Digital.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InterventionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InterventionsApi(String basePath)
        {
            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                new Engage.Digital.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InterventionsApi(Engage.Digital.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Engage.Digital.Client.Configuration.MergeConfigurations(
                Engage.Digital.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Engage.Digital.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InterventionsApi(Engage.Digital.Client.ISynchronousClient client,Engage.Digital.Client.IAsynchronousClient asyncClient, Engage.Digital.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Engage.Digital.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Engage.Digital.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Engage.Digital.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Engage.Digital.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Engage.Digital.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        public Intervention CancelIntervention (string interventionId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = CancelInterventionWithHttpInfo(interventionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public Engage.Digital.Client.ApiResponse< Intervention > CancelInterventionWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CancelIntervention");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< Intervention >("/interventions/{interventionId}/cancel", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CancelIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> CancelInterventionAsync (string interventionId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = await CancelInterventionAsyncWithHttpInfo(interventionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelling an intervention This method cancels (destroys) an intervention. It renders intervention itself. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Caveats:  * If the intervention is already being canceled, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:   * Intervention MUST NOT already be closed  * Intervention MUST NOT have agent replies   * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be destroyed (see caveats).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Intervention>> CancelInterventionAsyncWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CancelIntervention");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Intervention>("/interventions/{interventionId}/cancel", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CancelIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Intervention</returns>
        public Intervention CategorizeIntervention (string interventionId, List<string> categoryIds)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = CategorizeInterventionWithHttpInfo(interventionId, categoryIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public Engage.Digital.Client.ApiResponse< Intervention > CategorizeInterventionWithHttpInfo (string interventionId, List<string> categoryIds)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CategorizeIntervention");

            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryIds' when calling InterventionsApi->CategorizeIntervention");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter
            if (categoryIds != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Intervention >("/interventions/{interventionId}/update_categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CategorizeIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> CategorizeInterventionAsync (string interventionId, List<string> categoryIds)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = await CategorizeInterventionAsyncWithHttpInfo(interventionId, categoryIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Categorizing an intervention This method updates the categories of an intervention. If token’s user does not have “read” on the intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="categoryIds"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Intervention>> CategorizeInterventionAsyncWithHttpInfo (string interventionId, List<string> categoryIds)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CategorizeIntervention");

            // verify the required parameter 'categoryIds' is set
            if (categoryIds == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'categoryIds' when calling InterventionsApi->CategorizeIntervention");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter
            if (categoryIds != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Intervention>("/interventions/{interventionId}/update_categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CategorizeIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        public Intervention CloseIntervention (string interventionId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = CloseInterventionWithHttpInfo(interventionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public Engage.Digital.Client.ApiResponse< Intervention > CloseInterventionWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CloseIntervention");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter


            // make the HTTP request

            var response = this.Client.Put< Intervention >("/interventions/{interventionId}/close", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CloseIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> CloseInterventionAsync (string interventionId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = await CloseInterventionAsyncWithHttpInfo(interventionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Closing an intervention This method closes an intervention. Caveats:  * If the intervention is already being closed, it will return a 409 error. * To be able to close an intervention, it must meet the following criteria otherwise a 403 will be raised:    * Intervention MUST NOT already be closed    * Intervention MUST have agent replies   * Access-Token agent MUST be the owner of the intervention or have the permission to edit permissions    * Access-Token agent MUST have read access on the source  Authorization​: no, but it renders an error if intervention can’t be closed (see caveats)
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Intervention>> CloseInterventionAsyncWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->CloseIntervention");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Intervention>("/interventions/{interventionId}/close", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CloseIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>GetAllInterventionsResponse</returns>
        public GetAllInterventionsResponse CreateIntervention (string contentId)
        {
             Engage.Digital.Client.ApiResponse<GetAllInterventionsResponse> localVarResponse = CreateInterventionWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        public Engage.Digital.Client.ApiResponse< GetAllInterventionsResponse > CreateInterventionWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'contentId' when calling InterventionsApi->CreateIntervention");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "content_id", contentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< GetAllInterventionsResponse >("/interventions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInterventionsResponse> CreateInterventionAsync (string contentId)
        {
             Engage.Digital.Client.ApiResponse<GetAllInterventionsResponse> localVarResponse = await CreateInterventionAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an intervention This method creates a new intervention or reopen it. In case of success it renders the intervention, otherwise, it renders an error (422 HTTP code). This method opens intervention as access token’s user.  Authorization​: no, but it renders an error if intervention can’t be created or reopened (already opened, etc.).
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId">The content to create intervention on (mandatory).</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<GetAllInterventionsResponse>> CreateInterventionAsyncWithHttpInfo (string contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'contentId' when calling InterventionsApi->CreateIntervention");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contentId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "content_id", contentId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<GetAllInterventionsResponse>("/interventions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllInterventionsResponse</returns>
        public GetAllInterventionsResponse GetAllInterventions (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllInterventionsResponse> localVarResponse = GetAllInterventionsWithHttpInfo(threadId, userId, identityGroupId, identityId, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllInterventionsResponse</returns>
        public Engage.Digital.Client.ApiResponse< GetAllInterventionsResponse > GetAllInterventionsWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {
            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (threadId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "thread_id", threadId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityGroupId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "identity_group_id", identityGroupId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_id", identityId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllInterventionsResponse >("/interventions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllInterventions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllInterventionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInterventionsResponse> GetAllInterventionsAsync (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {
             Engage.Digital.Client.ApiResponse<GetAllInterventionsResponse> localVarResponse = await GetAllInterventionsAsyncWithHttpInfo(threadId, userId, identityGroupId, identityId, sort, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all interventions This method renders interventions ordered by creation date (descending). Only interventions in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">To filter interventions on given thread id. (optional)</param>
        /// <param name="userId">To filter interventions on given user id. (optional)</param>
        /// <param name="identityGroupId">To filter interventions on given identity_group_id. This will return interventions associated to any identity in the indentity_group. (optional)</param>
        /// <param name="identityId">To filter interventions on given identity_id(s). Can be a single value or an array. (optional)</param>
        /// <param name="sort">To change the criteria chosen to sort the interventions. The value can be “created_at” or “updated_at”. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllInterventionsResponse)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<GetAllInterventionsResponse>> GetAllInterventionsAsyncWithHttpInfo (string threadId = null, string userId = null, string identityGroupId = null, List<string> identityId = null, string sort = null, int? offset = null, int? limit = null)
        {

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (threadId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "thread_id", threadId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityGroupId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "identity_group_id", identityGroupId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("multi", "identity_id", identityId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllInterventionsResponse>("/interventions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllInterventions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Intervention</returns>
        public Intervention GetIntervention (string interventionId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = GetInterventionWithHttpInfo(interventionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public Engage.Digital.Client.ApiResponse< Intervention > GetInterventionWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->GetIntervention");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Intervention >("/interventions/{interventionId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> GetInterventionAsync (string interventionId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = await GetInterventionAsyncWithHttpInfo(interventionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an intervention from its id This method renders an intervention from given id. If token’s user does not have “read” on intervention’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Intervention>> GetInterventionAsyncWithHttpInfo (string interventionId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->GetIntervention");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Intervention>("/interventions/{interventionId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Intervention</returns>
        public Intervention ReassignIntervention (string interventionId, string userId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = ReassignInterventionWithHttpInfo(interventionId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Intervention</returns>
        public Engage.Digital.Client.ApiResponse< Intervention > ReassignInterventionWithHttpInfo (string interventionId, string userId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->ReassignIntervention");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'userId' when calling InterventionsApi->ReassignIntervention");

            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Engage.Digital.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Engage.Digital.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter
            if (userId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Intervention >("/interventions/{interventionId}/reassign", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReassignIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of Intervention</returns>
        public async System.Threading.Tasks.Task<Intervention> ReassignInterventionAsync (string interventionId, string userId)
        {
             Engage.Digital.Client.ApiResponse<Intervention> localVarResponse = await ReassignInterventionAsyncWithHttpInfo(interventionId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reassigning an intervention This method updates the user in charge of the intervention  Authorization​: Only users who can update interventions.
        /// </summary>
        /// <exception cref="Engage.Digital.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (Intervention)</returns>
        public async System.Threading.Tasks.Task<Engage.Digital.Client.ApiResponse<Intervention>> ReassignInterventionAsyncWithHttpInfo (string interventionId, string userId)
        {
            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionsApi->ReassignIntervention");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Engage.Digital.Client.ApiException(400, "Missing required parameter 'userId' when calling InterventionsApi->ReassignIntervention");


            Engage.Digital.Client.RequestOptions requestOptions = new Engage.Digital.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionId != null)
                requestOptions.PathParameters.Add("interventionId", Engage.Digital.Client.ClientUtils.ParameterToString(interventionId)); // path parameter
            if (userId != null)
            {
                foreach (var kvp in Engage.Digital.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Intervention>("/interventions/{interventionId}/reassign", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReassignIntervention", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
