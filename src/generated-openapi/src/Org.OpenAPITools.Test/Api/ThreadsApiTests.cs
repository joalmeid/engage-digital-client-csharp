/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ThreadsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ThreadsApiTests : IDisposable
    {
        private ThreadsApi instance;

        public ThreadsApiTests()
        {
            instance = new ThreadsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ThreadsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ThreadsApi
            //Assert.IsType(typeof(ThreadsApi), instance, "instance is a ThreadsApi");
        }

        
        /// <summary>
        /// Test ArchiveThread
        /// </summary>
        [Fact]
        public void ArchiveThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.ArchiveThread(threadId);
            //Assert.IsType<Thread> (response, "response is Thread");
        }
        
        /// <summary>
        /// Test CategorizeThread
        /// </summary>
        [Fact]
        public void CategorizeThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //List<string> threadCategoryIds = null;
            //var response = instance.CategorizeThread(threadId, threadCategoryIds);
            //Assert.IsType<Thread> (response, "response is Thread");
        }
        
        /// <summary>
        /// Test CloseThread
        /// </summary>
        [Fact]
        public void CloseThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.CloseThread(threadId);
            //Assert.IsType<Thread> (response, "response is Thread");
        }
        
        /// <summary>
        /// Test GetAllThreads
        /// </summary>
        [Fact]
        public void GetAllThreadsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? q = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllThreads(q, offset, limit);
            //Assert.IsType<GetAllThreadsResponse> (response, "response is GetAllThreadsResponse");
        }
        
        /// <summary>
        /// Test GetThread
        /// </summary>
        [Fact]
        public void GetThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.GetThread(threadId);
            //Assert.IsType<Thread> (response, "response is Thread");
        }
        
        /// <summary>
        /// Test OpenThread
        /// </summary>
        [Fact]
        public void OpenThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.OpenThread(threadId);
            //Assert.IsType<Thread> (response, "response is Thread");
        }
        
    }

}
