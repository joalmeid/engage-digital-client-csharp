/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInterventionCommentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating an intervention comment
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>InterventionComment</returns>
        InterventionComment CreateInterventionComment (string body, string interventionId, string userId);

        /// <summary>
        /// Creating an intervention comment
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>ApiResponse of InterventionComment</returns>
        ApiResponse<InterventionComment> CreateInterventionCommentWithHttpInfo (string body, string interventionId, string userId);
        /// <summary>
        /// Deleting an intervention comment
        /// </summary>
        /// <remarks>
        /// This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>InterventionComment</returns>
        InterventionComment DeleteInterventionComment (string interventionCommentId);

        /// <summary>
        /// Deleting an intervention comment
        /// </summary>
        /// <remarks>
        /// This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>ApiResponse of InterventionComment</returns>
        ApiResponse<InterventionComment> DeleteInterventionCommentWithHttpInfo (string interventionCommentId);
        /// <summary>
        /// Getting all intervention comments
        /// </summary>
        /// <remarks>
        /// This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllInterventionCommentsResponse</returns>
        GetAllInterventionCommentsResponse GetAllInterventionComments (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all intervention comments
        /// </summary>
        /// <remarks>
        /// This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllInterventionCommentsResponse</returns>
        ApiResponse<GetAllInterventionCommentsResponse> GetAllInterventionCommentsWithHttpInfo (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an intervention comment from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>InterventionComment</returns>
        InterventionComment GetInterventionComment (string interventionCommentId);

        /// <summary>
        /// Getting an intervention comment from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>ApiResponse of InterventionComment</returns>
        ApiResponse<InterventionComment> GetInterventionCommentWithHttpInfo (string interventionCommentId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInterventionCommentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating an intervention comment
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>Task of InterventionComment</returns>
        System.Threading.Tasks.Task<InterventionComment> CreateInterventionCommentAsync (string body, string interventionId, string userId);

        /// <summary>
        /// Creating an intervention comment
        /// </summary>
        /// <remarks>
        /// This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>Task of ApiResponse (InterventionComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterventionComment>> CreateInterventionCommentAsyncWithHttpInfo (string body, string interventionId, string userId);
        /// <summary>
        /// Deleting an intervention comment
        /// </summary>
        /// <remarks>
        /// This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of InterventionComment</returns>
        System.Threading.Tasks.Task<InterventionComment> DeleteInterventionCommentAsync (string interventionCommentId);

        /// <summary>
        /// Deleting an intervention comment
        /// </summary>
        /// <remarks>
        /// This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of ApiResponse (InterventionComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterventionComment>> DeleteInterventionCommentAsyncWithHttpInfo (string interventionCommentId);
        /// <summary>
        /// Getting all intervention comments
        /// </summary>
        /// <remarks>
        /// This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllInterventionCommentsResponse</returns>
        System.Threading.Tasks.Task<GetAllInterventionCommentsResponse> GetAllInterventionCommentsAsync (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all intervention comments
        /// </summary>
        /// <remarks>
        /// This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllInterventionCommentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInterventionCommentsResponse>> GetAllInterventionCommentsAsyncWithHttpInfo (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting an intervention comment from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of InterventionComment</returns>
        System.Threading.Tasks.Task<InterventionComment> GetInterventionCommentAsync (string interventionCommentId);

        /// <summary>
        /// Getting an intervention comment from its id
        /// </summary>
        /// <remarks>
        /// This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of ApiResponse (InterventionComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterventionComment>> GetInterventionCommentAsyncWithHttpInfo (string interventionCommentId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInterventionCommentsApi : IInterventionCommentsApiSync, IInterventionCommentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InterventionCommentsApi : IInterventionCommentsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionCommentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InterventionCommentsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionCommentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InterventionCommentsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionCommentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InterventionCommentsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionCommentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InterventionCommentsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating an intervention comment This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>InterventionComment</returns>
        public InterventionComment CreateInterventionComment (string body, string interventionId, string userId)
        {
             Org.OpenAPITools.Client.ApiResponse<InterventionComment> localVarResponse = CreateInterventionCommentWithHttpInfo(body, interventionId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an intervention comment This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>ApiResponse of InterventionComment</returns>
        public Org.OpenAPITools.Client.ApiResponse< InterventionComment > CreateInterventionCommentWithHttpInfo (string body, string interventionId, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling InterventionCommentsApi->CreateInterventionComment");

            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionCommentsApi->CreateInterventionComment");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling InterventionCommentsApi->CreateInterventionComment");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (body != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "intervention_id", interventionId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< InterventionComment >("/intervention_comments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInterventionComment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating an intervention comment This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>Task of InterventionComment</returns>
        public async System.Threading.Tasks.Task<InterventionComment> CreateInterventionCommentAsync (string body, string interventionId, string userId)
        {
             Org.OpenAPITools.Client.ApiResponse<InterventionComment> localVarResponse = await CreateInterventionCommentAsyncWithHttpInfo(body, interventionId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an intervention comment This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The comment body (mandatory).</param>
        /// <param name="interventionId">The comment intervention id (mandatory).</param>
        /// <param name="userId">The comment user id (mandatory).</param>
        /// <returns>Task of ApiResponse (InterventionComment)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterventionComment>> CreateInterventionCommentAsyncWithHttpInfo (string body, string interventionId, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling InterventionCommentsApi->CreateInterventionComment");

            // verify the required parameter 'interventionId' is set
            if (interventionId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interventionId' when calling InterventionCommentsApi->CreateInterventionComment");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userId' when calling InterventionCommentsApi->CreateInterventionComment");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (body != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "body", body))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "intervention_id", interventionId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InterventionComment>("/intervention_comments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInterventionComment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting an intervention comment This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>InterventionComment</returns>
        public InterventionComment DeleteInterventionComment (string interventionCommentId)
        {
             Org.OpenAPITools.Client.ApiResponse<InterventionComment> localVarResponse = DeleteInterventionCommentWithHttpInfo(interventionCommentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting an intervention comment This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>ApiResponse of InterventionComment</returns>
        public Org.OpenAPITools.Client.ApiResponse< InterventionComment > DeleteInterventionCommentWithHttpInfo (string interventionCommentId)
        {
            // verify the required parameter 'interventionCommentId' is set
            if (interventionCommentId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interventionCommentId' when calling InterventionCommentsApi->DeleteInterventionComment");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionCommentId != null)
                requestOptions.PathParameters.Add("interventionCommentId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(interventionCommentId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< InterventionComment >("/intervention_comments/{interventionCommentId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteInterventionComment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting an intervention comment This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of InterventionComment</returns>
        public async System.Threading.Tasks.Task<InterventionComment> DeleteInterventionCommentAsync (string interventionCommentId)
        {
             Org.OpenAPITools.Client.ApiResponse<InterventionComment> localVarResponse = await DeleteInterventionCommentAsyncWithHttpInfo(interventionCommentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting an intervention comment This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of ApiResponse (InterventionComment)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterventionComment>> DeleteInterventionCommentAsyncWithHttpInfo (string interventionCommentId)
        {
            // verify the required parameter 'interventionCommentId' is set
            if (interventionCommentId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interventionCommentId' when calling InterventionCommentsApi->DeleteInterventionComment");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionCommentId != null)
                requestOptions.PathParameters.Add("interventionCommentId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(interventionCommentId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<InterventionComment>("/intervention_comments/{interventionCommentId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteInterventionComment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all intervention comments This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllInterventionCommentsResponse</returns>
        public GetAllInterventionCommentsResponse GetAllInterventionComments (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllInterventionCommentsResponse> localVarResponse = GetAllInterventionCommentsWithHttpInfo(interventionId, threadId, userId, identityId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all intervention comments This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllInterventionCommentsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< GetAllInterventionCommentsResponse > GetAllInterventionCommentsWithHttpInfo (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "intervention_id", interventionId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (threadId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thread_id", threadId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "identity_id", identityId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllInterventionCommentsResponse >("/intervention_comments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllInterventionComments", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all intervention comments This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllInterventionCommentsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInterventionCommentsResponse> GetAllInterventionCommentsAsync (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllInterventionCommentsResponse> localVarResponse = await GetAllInterventionCommentsAsyncWithHttpInfo(interventionId, threadId, userId, identityId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all intervention comments This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionId">To filter comments on given intervention id. (optional)</param>
        /// <param name="threadId">To filter comments on given thread id. (optional)</param>
        /// <param name="userId">To filter comments on given user id. (optional)</param>
        /// <param name="identityId">To filter comments on given identity id. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllInterventionCommentsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAllInterventionCommentsResponse>> GetAllInterventionCommentsAsyncWithHttpInfo (string interventionId = null, string threadId = null, string userId = null, string identityId = null, int? offset = null, int? limit = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "intervention_id", interventionId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (threadId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "thread_id", threadId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (userId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "identity_id", identityId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllInterventionCommentsResponse>("/intervention_comments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllInterventionComments", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting an intervention comment from its id This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>InterventionComment</returns>
        public InterventionComment GetInterventionComment (string interventionCommentId)
        {
             Org.OpenAPITools.Client.ApiResponse<InterventionComment> localVarResponse = GetInterventionCommentWithHttpInfo(interventionCommentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting an intervention comment from its id This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>ApiResponse of InterventionComment</returns>
        public Org.OpenAPITools.Client.ApiResponse< InterventionComment > GetInterventionCommentWithHttpInfo (string interventionCommentId)
        {
            // verify the required parameter 'interventionCommentId' is set
            if (interventionCommentId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interventionCommentId' when calling InterventionCommentsApi->GetInterventionComment");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (interventionCommentId != null)
                requestOptions.PathParameters.Add("interventionCommentId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(interventionCommentId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< InterventionComment >("/intervention_comments/{interventionCommentId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInterventionComment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting an intervention comment from its id This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of InterventionComment</returns>
        public async System.Threading.Tasks.Task<InterventionComment> GetInterventionCommentAsync (string interventionCommentId)
        {
             Org.OpenAPITools.Client.ApiResponse<InterventionComment> localVarResponse = await GetInterventionCommentAsyncWithHttpInfo(interventionCommentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting an intervention comment from its id This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interventionCommentId"></param>
        /// <returns>Task of ApiResponse (InterventionComment)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterventionComment>> GetInterventionCommentAsyncWithHttpInfo (string interventionCommentId)
        {
            // verify the required parameter 'interventionCommentId' is set
            if (interventionCommentId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interventionCommentId' when calling InterventionCommentsApi->GetInterventionComment");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (interventionCommentId != null)
                requestOptions.PathParameters.Add("interventionCommentId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(interventionCommentId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InterventionComment>("/intervention_comments/{interventionCommentId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInterventionComment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
