/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThreadsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archiving a thread
        /// </summary>
        /// <remarks>
        /// Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        Thread ArchiveThread (string threadId);

        /// <summary>
        /// Archiving a thread
        /// </summary>
        /// <remarks>
        /// Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        ApiResponse<Thread> ArchiveThreadWithHttpInfo (string threadId);
        /// <summary>
        /// Categorizing a thread
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>Thread</returns>
        Thread CategorizeThread (string threadId, List<string> threadCategoryIds = null);

        /// <summary>
        /// Categorizing a thread
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>ApiResponse of Thread</returns>
        ApiResponse<Thread> CategorizeThreadWithHttpInfo (string threadId, List<string> threadCategoryIds = null);
        /// <summary>
        /// Close a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        Thread CloseThread (string threadId);

        /// <summary>
        /// Close a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        ApiResponse<Thread> CloseThreadWithHttpInfo (string threadId);
        /// <summary>
        /// Getting all threads
        /// </summary>
        /// <remarks>
        /// This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllThreadsResponse</returns>
        GetAllThreadsResponse GetAllThreads (int? q = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all threads
        /// </summary>
        /// <remarks>
        /// This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllThreadsResponse</returns>
        ApiResponse<GetAllThreadsResponse> GetAllThreadsWithHttpInfo (int? q = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a thread from its id
        /// </summary>
        /// <remarks>
        /// This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        Thread GetThread (string threadId);

        /// <summary>
        /// Getting a thread from its id
        /// </summary>
        /// <remarks>
        /// This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        ApiResponse<Thread> GetThreadWithHttpInfo (string threadId);
        /// <summary>
        /// Open a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        Thread OpenThread (string threadId);

        /// <summary>
        /// Open a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        ApiResponse<Thread> OpenThreadWithHttpInfo (string threadId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThreadsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archiving a thread
        /// </summary>
        /// <remarks>
        /// Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        System.Threading.Tasks.Task<Thread> ArchiveThreadAsync (string threadId);

        /// <summary>
        /// Archiving a thread
        /// </summary>
        /// <remarks>
        /// Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        System.Threading.Tasks.Task<ApiResponse<Thread>> ArchiveThreadAsyncWithHttpInfo (string threadId);
        /// <summary>
        /// Categorizing a thread
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>Task of Thread</returns>
        System.Threading.Tasks.Task<Thread> CategorizeThreadAsync (string threadId, List<string> threadCategoryIds = null);

        /// <summary>
        /// Categorizing a thread
        /// </summary>
        /// <remarks>
        /// This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        System.Threading.Tasks.Task<ApiResponse<Thread>> CategorizeThreadAsyncWithHttpInfo (string threadId, List<string> threadCategoryIds = null);
        /// <summary>
        /// Close a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        System.Threading.Tasks.Task<Thread> CloseThreadAsync (string threadId);

        /// <summary>
        /// Close a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        System.Threading.Tasks.Task<ApiResponse<Thread>> CloseThreadAsyncWithHttpInfo (string threadId);
        /// <summary>
        /// Getting all threads
        /// </summary>
        /// <remarks>
        /// This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllThreadsResponse</returns>
        System.Threading.Tasks.Task<GetAllThreadsResponse> GetAllThreadsAsync (int? q = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all threads
        /// </summary>
        /// <remarks>
        /// This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllThreadsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllThreadsResponse>> GetAllThreadsAsyncWithHttpInfo (int? q = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a thread from its id
        /// </summary>
        /// <remarks>
        /// This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        System.Threading.Tasks.Task<Thread> GetThreadAsync (string threadId);

        /// <summary>
        /// Getting a thread from its id
        /// </summary>
        /// <remarks>
        /// This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        System.Threading.Tasks.Task<ApiResponse<Thread>> GetThreadAsyncWithHttpInfo (string threadId);
        /// <summary>
        /// Open a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        System.Threading.Tasks.Task<Thread> OpenThreadAsync (string threadId);

        /// <summary>
        /// Open a thread
        /// </summary>
        /// <remarks>
        /// Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        System.Threading.Tasks.Task<ApiResponse<Thread>> OpenThreadAsyncWithHttpInfo (string threadId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThreadsApi : IThreadsApiSync, IThreadsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ThreadsApi : IThreadsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThreadsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThreadsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThreadsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThreadsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ThreadsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archiving a thread Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        public Thread ArchiveThread (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = ArchiveThreadWithHttpInfo(threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archiving a thread Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        public Org.OpenAPITools.Client.ApiResponse< Thread > ArchiveThreadWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->ArchiveThread");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = this.Client.Put< Thread >("/content_threads/{threadId}/ignore", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ArchiveThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Archiving a thread Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        public async System.Threading.Tasks.Task<Thread> ArchiveThreadAsync (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = await ArchiveThreadAsyncWithHttpInfo(threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archiving a thread Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Thread>> ArchiveThreadAsyncWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->ArchiveThread");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Thread>("/content_threads/{threadId}/ignore", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ArchiveThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Categorizing a thread This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>Thread</returns>
        public Thread CategorizeThread (string threadId, List<string> threadCategoryIds = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = CategorizeThreadWithHttpInfo(threadId, threadCategoryIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Categorizing a thread This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>ApiResponse of Thread</returns>
        public Org.OpenAPITools.Client.ApiResponse< Thread > CategorizeThreadWithHttpInfo (string threadId, List<string> threadCategoryIds = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->CategorizeThread");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            if (threadCategoryIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "thread_category_ids[]", threadCategoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Thread >("/content_threads/{threadId}/update_categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CategorizeThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Categorizing a thread This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>Task of Thread</returns>
        public async System.Threading.Tasks.Task<Thread> CategorizeThreadAsync (string threadId, List<string> threadCategoryIds = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = await CategorizeThreadAsyncWithHttpInfo(threadId, threadCategoryIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Categorizing a thread This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="threadCategoryIds">An array containing the new categories to set on the thread. (optional)</param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Thread>> CategorizeThreadAsyncWithHttpInfo (string threadId, List<string> threadCategoryIds = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->CategorizeThread");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter
            if (threadCategoryIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "thread_category_ids[]", threadCategoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Thread>("/content_threads/{threadId}/update_categories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CategorizeThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Close a thread Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        public Thread CloseThread (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = CloseThreadWithHttpInfo(threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close a thread Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        public Org.OpenAPITools.Client.ApiResponse< Thread > CloseThreadWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->CloseThread");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = this.Client.Put< Thread >("/content_threads/{threadId}/close", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CloseThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Close a thread Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        public async System.Threading.Tasks.Task<Thread> CloseThreadAsync (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = await CloseThreadAsyncWithHttpInfo(threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close a thread Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Thread>> CloseThreadAsyncWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->CloseThread");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Thread>("/content_threads/{threadId}/close", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CloseThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all threads This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllThreadsResponse</returns>
        public GetAllThreadsResponse GetAllThreads (int? q = null, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllThreadsResponse> localVarResponse = GetAllThreadsWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all threads This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllThreadsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< GetAllThreadsResponse > GetAllThreadsWithHttpInfo (int? q = null, int? offset = null, int? limit = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllThreadsResponse >("/content_threads", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllThreads", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all threads This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllThreadsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllThreadsResponse> GetAllThreadsAsync (int? q = null, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllThreadsResponse> localVarResponse = await GetAllThreadsAsyncWithHttpInfo(q, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all threads This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">A search query to filter threads. Please refer to ​Search &amp; filtering parameters​ for more details. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllThreadsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAllThreadsResponse>> GetAllThreadsAsyncWithHttpInfo (int? q = null, int? offset = null, int? limit = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (q != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllThreadsResponse>("/content_threads", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllThreads", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a thread from its id This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        public Thread GetThread (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = GetThreadWithHttpInfo(threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a thread from its id This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        public Org.OpenAPITools.Client.ApiResponse< Thread > GetThreadWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->GetThread");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Thread >("/content_threads/{threadId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a thread from its id This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        public async System.Threading.Tasks.Task<Thread> GetThreadAsync (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = await GetThreadAsyncWithHttpInfo(threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a thread from its id This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Thread>> GetThreadAsyncWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->GetThread");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Thread>("/content_threads/{threadId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Open a thread Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Thread</returns>
        public Thread OpenThread (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = OpenThreadWithHttpInfo(threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open a thread Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>ApiResponse of Thread</returns>
        public Org.OpenAPITools.Client.ApiResponse< Thread > OpenThreadWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->OpenThread");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Thread >("/content_threads/{threadId}/open", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OpenThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Open a thread Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of Thread</returns>
        public async System.Threading.Tasks.Task<Thread> OpenThreadAsync (string threadId)
        {
             Org.OpenAPITools.Client.ApiResponse<Thread> localVarResponse = await OpenThreadAsyncWithHttpInfo(threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open a thread Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <returns>Task of ApiResponse (Thread)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Thread>> OpenThreadAsyncWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'threadId' when calling ThreadsApi->OpenThread");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (threadId != null)
                requestOptions.PathParameters.Add("threadId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(threadId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Thread>("/content_threads/{threadId}/open", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OpenThread", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
