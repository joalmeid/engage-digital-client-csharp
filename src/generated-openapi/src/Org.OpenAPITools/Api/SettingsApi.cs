/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        Settings GetAllSettings ();

        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> GetAllSettingsWithHttpInfo ();
        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Settings</returns>
        Settings UpdateSettings (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);

        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> UpdateSettingsWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> GetAllSettingsAsync ();

        /// <summary>
        /// Getting all settings
        /// </summary>
        /// <remarks>
        /// This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> GetAllSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> UpdateSettingsAsync (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);

        /// <summary>
        /// Updating settings
        /// </summary>
        /// <remarks>
        /// This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> UpdateSettingsAsyncWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        public Settings GetAllSettings ()
        {
             Org.OpenAPITools.Client.ApiResponse<Settings> localVarResponse = GetAllSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        public Org.OpenAPITools.Client.ApiResponse< Settings > GetAllSettingsWithHttpInfo ()
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< Settings >("/settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> GetAllSettingsAsync ()
        {
             Org.OpenAPITools.Client.ApiResponse<Settings> localVarResponse = await GetAllSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all settings This method renders all settings of your domain.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Settings>> GetAllSettingsAsyncWithHttpInfo ()
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Settings>("/settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Settings</returns>
        public Settings UpdateSettings (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Settings> localVarResponse = UpdateSettingsWithHttpInfo(activityPresenceThreshold, activityTracking, beginningOfWeek, categoryTagging, contentLanguages, dashboard, denyIframeIntegration, disablePasswordAutocomplete, expirePasswordAfter, expirePasswordEnabled, exportInSeconds, foldUselessContents, fteDuration, identityMerge, interventionDeferRates, interventionDeferThreshold, interventionRates, locale, multiLang, name, passwordArchivableEnabled, passwordArchivableSize, passwordMinLength, passwordNonWord, passwordNumbers, passwordRecoveryDisabled, pushEnabled, replyAsAnyIdentity, rtlSupport, selfApprovalRequired, sessionTimeout, spellchecking, style, thirdPartyServicesDisabled, timezone, trackJs, type, urgentTaskThreshold, useSystemFont);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>ApiResponse of Settings</returns>
        public Org.OpenAPITools.Client.ApiResponse< Settings > UpdateSettingsWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (activityPresenceThreshold != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "activity_presence_threshold", activityPresenceThreshold))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (activityTracking != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "activity_tracking", activityTracking))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (beginningOfWeek != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "beginning_of_week", beginningOfWeek))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (categoryTagging != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_tagging", categoryTagging))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contentLanguages != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_languages", contentLanguages))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (dashboard != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dashboard", dashboard))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (denyIframeIntegration != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deny_iframe_integration", denyIframeIntegration))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (disablePasswordAutocomplete != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_password_autocomplete", disablePasswordAutocomplete))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (expirePasswordAfter != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expire_password_after", expirePasswordAfter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (expirePasswordEnabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expire_password_enabled", expirePasswordEnabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (exportInSeconds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "export_in_seconds", exportInSeconds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (foldUselessContents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fold_useless_contents", foldUselessContents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (fteDuration != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fte_duration", fteDuration))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityMerge != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "identity_merge", identityMerge))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionDeferRates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "intervention_defer_rates[]", interventionDeferRates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionDeferThreshold != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "intervention_defer_threshold", interventionDeferThreshold))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionRates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "intervention_rates", interventionRates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (multiLang != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "multi_lang", multiLang))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (name != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordArchivableEnabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_archivable_enabled", passwordArchivableEnabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordArchivableSize != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_archivable_size", passwordArchivableSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordMinLength != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_min_length", passwordMinLength))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordNonWord != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_non_word", passwordNonWord))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordNumbers != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_numbers", passwordNumbers))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordRecoveryDisabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_recovery_disabled", passwordRecoveryDisabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (pushEnabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "push_enabled", pushEnabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (replyAsAnyIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reply_as_any_identity", replyAsAnyIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (rtlSupport != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "rtl_support", rtlSupport))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (selfApprovalRequired != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "self_approval_required", selfApprovalRequired))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sessionTimeout != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "session_timeout", sessionTimeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (spellchecking != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "spellchecking", spellchecking))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (style != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "style", style))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (thirdPartyServicesDisabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "third_party_services_disabled", thirdPartyServicesDisabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackJs != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "track_js", trackJs))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (type != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (urgentTaskThreshold != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "urgent_task_threshold", urgentTaskThreshold))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (useSystemFont != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_system_font", useSystemFont))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Settings >("/settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> UpdateSettingsAsync (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Settings> localVarResponse = await UpdateSettingsAsyncWithHttpInfo(activityPresenceThreshold, activityTracking, beginningOfWeek, categoryTagging, contentLanguages, dashboard, denyIframeIntegration, disablePasswordAutocomplete, expirePasswordAfter, expirePasswordEnabled, exportInSeconds, foldUselessContents, fteDuration, identityMerge, interventionDeferRates, interventionDeferThreshold, interventionRates, locale, multiLang, name, passwordArchivableEnabled, passwordArchivableSize, passwordMinLength, passwordNonWord, passwordNumbers, passwordRecoveryDisabled, pushEnabled, replyAsAnyIdentity, rtlSupport, selfApprovalRequired, sessionTimeout, spellchecking, style, thirdPartyServicesDisabled, timezone, trackJs, type, urgentTaskThreshold, useSystemFont);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating settings This method updates the current domain settings.  Authorization​: only users that can update settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityPresenceThreshold">(in hours). (optional)</param>
        /// <param name="activityTracking">​Enable activity tracking (Boolean) (optional)</param>
        /// <param name="beginningOfWeek">(Day of week) (optional)</param>
        /// <param name="categoryTagging">A​ ctivate the forced categorization by source.​ (Boolean) (optional)</param>
        /// <param name="contentLanguages">(See format) (optional)</param>
        /// <param name="dashboard">Activate the dashboard (Boolean) (optional)</param>
        /// <param name="denyIframeIntegration">Prevent the DD to be embed by other websites (Boolean) (optional)</param>
        /// <param name="disablePasswordAutocomplete">(Boolean) (optional)</param>
        /// <param name="expirePasswordAfter">password expiration delay (in seconds) (optional)</param>
        /// <param name="expirePasswordEnabled">enable password expiration (Boolean) (optional)</param>
        /// <param name="exportInSeconds">provide durations in seconds in export (Boolean) (optional)</param>
        /// <param name="foldUselessContents">fold archived contents (Boolean) (optional)</param>
        /// <param name="fteDuration">FTE data period (in hours) (optional)</param>
        /// <param name="identityMerge">enable identity merge (Boolean) (optional)</param>
        /// <param name="interventionDeferRates">(Array of times in seconds) (optional)</param>
        /// <param name="interventionDeferThreshold">(in seconds) (optional)</param>
        /// <param name="interventionRates">(Array of times in seconds) (optional)</param>
        /// <param name="locale">locale code (String) (optional)</param>
        /// <param name="multiLang">activate multi language support for messages (Boolean) (optional)</param>
        /// <param name="name">Name of the Dimelo Digital (String) (optional)</param>
        /// <param name="passwordArchivableEnabled">prohibit reusing old passwords (Boolean) (optional)</param>
        /// <param name="passwordArchivableSize">number of archived passwords (optional)</param>
        /// <param name="passwordMinLength">minimum character length (optional)</param>
        /// <param name="passwordNonWord">should contain at least 1 non alphanumeric char (Boolean) (optional)</param>
        /// <param name="passwordNumbers">should contain at least 1 number (Boolean) (optional)</param>
        /// <param name="passwordRecoveryDisabled">disable password recovery by email (Boolean) (optional)</param>
        /// <param name="pushEnabled">Enable push mode (Boolean) (optional)</param>
        /// <param name="replyAsAnyIdentity">Enable reply as any identity (Boolean) (optional)</param>
        /// <param name="rtlSupport">Enable right to left support (Boolean) (optional)</param>
        /// <param name="selfApprovalRequired">​Allow authors to ask approval of their messages (Boolean) (optional)</param>
        /// <param name="sessionTimeout">Session timeout (in minutes) (optional)</param>
        /// <param name="spellchecking">Enable spellchecking (Boolean) (optional)</param>
        /// <param name="style">Defines the DD’s design (String) (optional)</param>
        /// <param name="thirdPartyServicesDisabled">Disable third-party services (tracking...) (Boolean) (optional)</param>
        /// <param name="timezone">Use the timezone endpoint to get the timezone name (String) (optional)</param>
        /// <param name="trackJs">Track JS errors (Boolean) (optional)</param>
        /// <param name="type">Can be ‘demo’, ‘production’ or ‘archived’ (optional)</param>
        /// <param name="urgentTaskThreshold">Chat max response time (in seconds) (optional)</param>
        /// <param name="useSystemFont">Experimental (Boolean) (optional)</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Settings>> UpdateSettingsAsyncWithHttpInfo (int? activityPresenceThreshold = null, bool? activityTracking = null, string beginningOfWeek = null, bool? categoryTagging = null, string contentLanguages = null, bool? dashboard = null, bool? denyIframeIntegration = null, bool? disablePasswordAutocomplete = null, int? expirePasswordAfter = null, bool? expirePasswordEnabled = null, bool? exportInSeconds = null, bool? foldUselessContents = null, int? fteDuration = null, bool? identityMerge = null, List<int> interventionDeferRates = null, int? interventionDeferThreshold = null, List<int> interventionRates = null, string locale = null, bool? multiLang = null, string name = null, bool? passwordArchivableEnabled = null, int? passwordArchivableSize = null, int? passwordMinLength = null, bool? passwordNonWord = null, bool? passwordNumbers = null, bool? passwordRecoveryDisabled = null, bool? pushEnabled = null, bool? replyAsAnyIdentity = null, bool? rtlSupport = null, bool? selfApprovalRequired = null, int? sessionTimeout = null, bool? spellchecking = null, string style = null, bool? thirdPartyServicesDisabled = null, string timezone = null, bool? trackJs = null, string type = null, int? urgentTaskThreshold = null, bool? useSystemFont = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (activityPresenceThreshold != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "activity_presence_threshold", activityPresenceThreshold))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (activityTracking != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "activity_tracking", activityTracking))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (beginningOfWeek != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "beginning_of_week", beginningOfWeek))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (categoryTagging != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category_tagging", categoryTagging))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contentLanguages != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "content_languages", contentLanguages))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (dashboard != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dashboard", dashboard))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (denyIframeIntegration != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deny_iframe_integration", denyIframeIntegration))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (disablePasswordAutocomplete != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "disable_password_autocomplete", disablePasswordAutocomplete))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (expirePasswordAfter != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expire_password_after", expirePasswordAfter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (expirePasswordEnabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expire_password_enabled", expirePasswordEnabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (exportInSeconds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "export_in_seconds", exportInSeconds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (foldUselessContents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fold_useless_contents", foldUselessContents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (fteDuration != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fte_duration", fteDuration))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (identityMerge != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "identity_merge", identityMerge))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionDeferRates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "intervention_defer_rates[]", interventionDeferRates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionDeferThreshold != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "intervention_defer_threshold", interventionDeferThreshold))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (interventionRates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "intervention_rates", interventionRates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (locale != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locale", locale))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (multiLang != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "multi_lang", multiLang))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (name != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordArchivableEnabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_archivable_enabled", passwordArchivableEnabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordArchivableSize != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_archivable_size", passwordArchivableSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordMinLength != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_min_length", passwordMinLength))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordNonWord != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_non_word", passwordNonWord))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordNumbers != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_numbers", passwordNumbers))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (passwordRecoveryDisabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "password_recovery_disabled", passwordRecoveryDisabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (pushEnabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "push_enabled", pushEnabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (replyAsAnyIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reply_as_any_identity", replyAsAnyIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (rtlSupport != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "rtl_support", rtlSupport))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (selfApprovalRequired != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "self_approval_required", selfApprovalRequired))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sessionTimeout != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "session_timeout", sessionTimeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (spellchecking != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "spellchecking", spellchecking))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (style != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "style", style))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (thirdPartyServicesDisabled != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "third_party_services_disabled", thirdPartyServicesDisabled))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timezone != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackJs != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "track_js", trackJs))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (type != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "type", type))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (urgentTaskThreshold != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "urgent_task_threshold", urgentTaskThreshold))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (useSystemFont != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_system_font", useSystemFont))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Settings>("/settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
