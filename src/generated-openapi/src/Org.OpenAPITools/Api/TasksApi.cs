/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTasksResponse</returns>
        GetAllTasksResponse GetAllTasks (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTasksResponse</returns>
        ApiResponse<GetAllTasksResponse> GetAllTasksWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task</returns>
        Task GetTask (string taskId);

        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task</returns>
        Task MoveTask (string taskId, string queue);

        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> MoveTaskWithHttpInfo (string taskId, string queue);
        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task</returns>
        Task TransferTask (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);

        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> TransferTaskWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTasksResponse</returns>
        System.Threading.Tasks.Task<GetAllTasksResponse> GetAllTasksAsync (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all tasks
        /// </summary>
        /// <remarks>
        /// This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTasksResponse>> GetAllTasksAsyncWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskAsync (string taskId);

        /// <summary>
        /// Getting a task from its id
        /// </summary>
        /// <remarks>
        /// This method renders a task from given id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> MoveTaskAsync (string taskId, string queue);

        /// <summary>
        /// Move a task to another queue
        /// </summary>
        /// <remarks>
        /// This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> MoveTaskAsyncWithHttpInfo (string taskId, string queue);
        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> TransferTaskAsync (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);

        /// <summary>
        /// Transferring a task
        /// </summary>
        /// <remarks>
        /// This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> TransferTaskAsyncWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : ITasksApiSync, ITasksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TasksApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllTasksResponse</returns>
        public GetAllTasksResponse GetAllTasks (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllTasksResponse> localVarResponse = GetAllTasksWithHttpInfo(queue, channelId, step, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllTasksResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< GetAllTasksResponse > GetAllTasksWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (queue != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queue", queue))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (step != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllTasksResponse >("/tasks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllTasks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllTasksResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTasksResponse> GetAllTasksAsync (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllTasksResponse> localVarResponse = await GetAllTasksAsyncWithHttpInfo(queue, channelId, step, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all tasks This method renders tasks ordered by priority (highest first) and then by creation date (latest first).  Authorization​: only users that can read tasks.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queue">To filter tasks on given queue name (filters on the “global” queue by default).The most commonly used queues are: “global” (contains every task pending assignation), “workbin_{agent_id}” (contains every tasks assigned to the {agent_id} agent, “history” (contains every processed tasks), and “undelivered” (contains every undelivered tasks). If queue is set to “workbins” all the tasks currently in a workbin will be returned. (optional)</param>
        /// <param name="channelId">To filter tasks on given channel id. (optional)</param>
        /// <param name="step">To filter tasks on the step they’re currently in. (optional)</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTasksResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAllTasksResponse>> GetAllTasksAsyncWithHttpInfo (string queue = null, string channelId = null, string step = null, int? offset = null, int? limit = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (queue != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queue", queue))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (step != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllTasksResponse>("/tasks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllTasks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task</returns>
        public Task GetTask (string taskId)
        {
             Org.OpenAPITools.Client.ApiResponse<Task> localVarResponse = GetTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of Task</returns>
        public Org.OpenAPITools.Client.ApiResponse< Task > GetTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTask");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Task >("/tasks/{taskId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskAsync (string taskId)
        {
             Org.OpenAPITools.Client.ApiResponse<Task> localVarResponse = await GetTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a task from its id This method renders a task from given id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Task>> GetTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTask");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Task>("/tasks/{taskId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task</returns>
        public Task MoveTask (string taskId, string queue)
        {
             Org.OpenAPITools.Client.ApiResponse<Task> localVarResponse = MoveTaskWithHttpInfo(taskId, queue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>ApiResponse of Task</returns>
        public Org.OpenAPITools.Client.ApiResponse< Task > MoveTaskWithHttpInfo (string taskId, string queue)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->MoveTask");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queue' when calling TasksApi->MoveTask");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (queue != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queue", queue))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Delete< Task >("/tasks/{taskId}/move", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MoveTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> MoveTaskAsync (string taskId, string queue)
        {
             Org.OpenAPITools.Client.ApiResponse<Task> localVarResponse = await MoveTaskAsyncWithHttpInfo(taskId, queue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move a task to another queue This method changes a task queue and renders it in case of success. Only accepts “undelivered” and special queue defined in topology (e.g. triage).  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="queue">Name of the queue task has to be moved in.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Task>> MoveTaskAsyncWithHttpInfo (string taskId, string queue)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->MoveTask");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queue' when calling TasksApi->MoveTask");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (queue != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "queue", queue))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Task>("/tasks/{taskId}/move", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MoveTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task</returns>
        public Task TransferTask (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Task> localVarResponse = TransferTaskWithHttpInfo(taskId, agentIds, bypass, categoryIds, language, teamIds, comment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        public Org.OpenAPITools.Client.ApiResponse< Task > TransferTaskWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->TransferTask");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (agentIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "agent_ids", agentIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (bypass != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bypass", bypass))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (categoryIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids", categoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (language != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "language", language))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids", teamIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (comment != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "comment", comment))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Task >("/tasks/{taskId}/transfer", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TransferTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> TransferTaskAsync (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Task> localVarResponse = await TransferTaskAsyncWithHttpInfo(taskId, agentIds, bypass, categoryIds, language, teamIds, comment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transferring a task This method transfers an existing task and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="agentIds">List of agents to transfer the task to (multiple). (optional)</param>
        /// <param name="bypass">Force the transfer to the first agent in agent_ids if set. When bypass is used, (optional)</param>
        /// <param name="categoryIds">Filter agents receiving the task depending on their categories. (optional)</param>
        /// <param name="language">Filter agents receiving the task depending on their spoken languages. (optional)</param>
        /// <param name="teamIds">Filter agents receiving the task depending on their teams. (optional)</param>
        /// <param name="comment">Add a comment to the task. (optional)</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Task>> TransferTaskAsyncWithHttpInfo (string taskId, List<string> agentIds = null, string bypass = null, List<string> categoryIds = null, string language = null, List<string> teamIds = null, string comment = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->TransferTask");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (taskId != null)
                requestOptions.PathParameters.Add("taskId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (agentIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "agent_ids", agentIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (bypass != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bypass", bypass))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (categoryIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids", categoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (language != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "language", language))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "team_ids", teamIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (comment != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "comment", comment))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Task>("/tasks/{taskId}/transfer", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TransferTask", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
