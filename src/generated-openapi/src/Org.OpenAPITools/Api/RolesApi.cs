/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        Role CreateRole (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> CreateRoleWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllRolesResponse</returns>
        GetAllRolesResponse GetAllRoles (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllRolesResponse</returns>
        ApiResponse<GetAllRolesResponse> GetAllRolesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        Role GetRole (string roleId);

        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (string roleId);
        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        Role UpdateRole (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> UpdateRoleWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateRoleAsync (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Creating a role
        /// </summary>
        /// <remarks>
        /// This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllRolesResponse</returns>
        System.Threading.Tasks.Task<GetAllRolesResponse> GetAllRolesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all roles
        /// </summary>
        /// <remarks>
        /// This method renders roles ordered by creation date (ascending).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllRolesResponse>> GetAllRolesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (string roleId);

        /// <summary>
        /// Getting a role from its id
        /// </summary>
        /// <remarks>
        /// This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);

        /// <summary>
        /// Updating a role
        /// </summary>
        /// <remarks>
        /// This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        public Role CreateRole (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Role> localVarResponse = CreateRoleWithHttpInfo(label, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public Org.OpenAPITools.Client.ApiResponse< Role > CreateRoleWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'label' when calling RolesApi->CreateRole");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessHelpCenter != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< Role >("/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRole", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateRoleAsync (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Role> localVarResponse = await CreateRoleAsyncWithHttpInfo(label, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a role This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (string label, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'label' when calling RolesApi->CreateRole");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessHelpCenter != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Role>("/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRole", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllRolesResponse</returns>
        public GetAllRolesResponse GetAllRoles (int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllRolesResponse> localVarResponse = GetAllRolesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllRolesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< GetAllRolesResponse > GetAllRolesWithHttpInfo (int? offset = null, int? limit = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllRolesResponse >("/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllRoles", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllRolesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllRolesResponse> GetAllRolesAsync (int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllRolesResponse> localVarResponse = await GetAllRolesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all roles This method renders roles ordered by creation date (ascending).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllRolesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAllRolesResponse>> GetAllRolesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllRolesResponse>("/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllRoles", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        public Role GetRole (string roleId)
        {
             Org.OpenAPITools.Client.ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        public Org.OpenAPITools.Client.ApiResponse< Role > GetRoleWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleId != null)
                requestOptions.PathParameters.Add("roleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Role >("/roles/{roleId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRole", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (string roleId)
        {
             Org.OpenAPITools.Client.ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a role from its id This method renders a role from given id.  Authorization​: only users that can manage roles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (roleId != null)
                requestOptions.PathParameters.Add("roleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Role>("/roles/{roleId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRole", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Role</returns>
        public Role UpdateRole (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Role> localVarResponse = UpdateRoleWithHttpInfo(roleId, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public Org.OpenAPITools.Client.ApiResponse< Role > UpdateRoleWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleId != null)
                requestOptions.PathParameters.Add("roleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            if (accessHelpCenter != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Role >("/roles/{roleId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRole", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> UpdateRoleAsync (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Role> localVarResponse = await UpdateRoleAsyncWithHttpInfo(roleId, accessHelpCenter, accessPreviousMessages, accessPullMode, adminStampAnswer, approveContent, assignIntervention, authorBlockContent, closeContentThread, createAndDestroyExtension, createCommunity, createContentSource, createUser, delayExportContent, deleteContentThread, impersonateUser, inviteUser, manageApiAccessTokens, manageAppSdkApplications, manageAutomaticExportsTasks, manageCategories, manageChat, manageCustomFields, manageCustomNotifications, manageEmailsTemplates, manageFolders, manageIce, manageIdentities, manageOwnNotifications, manageReplyAssistant, manageRoles, manageRulesEngineRules, manageSurveys, manageTags, manageTeams, manageTopologies, manageUsersOfMyTeams, monitorTasks, monitorTeamTasks, muteContent, openContentThread, publishContent, readCommunity, readContentSource, readEvent, readExport, readIdentity, readOwnStats, readPresence, readStats, readSurveys, readUser, receiveTasks, replyWithAssistant, searchContents, searchEvent, updateCommunity, updateContentSource, updateExtension, updateIdentity, updateIntervention, updateOwnIntervention, updateSettings, updateTimeSheet, updateUser, useEmoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a role This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <param name="accessHelpCenter"> (optional)</param>
        /// <param name="accessPreviousMessages"> (optional)</param>
        /// <param name="accessPullMode"> (optional)</param>
        /// <param name="adminStampAnswer"> (optional)</param>
        /// <param name="approveContent"> (optional)</param>
        /// <param name="assignIntervention"> (optional)</param>
        /// <param name="authorBlockContent"> (optional)</param>
        /// <param name="closeContentThread"> (optional)</param>
        /// <param name="createAndDestroyExtension"> (optional)</param>
        /// <param name="createCommunity"> (optional)</param>
        /// <param name="createContentSource"> (optional)</param>
        /// <param name="createUser"> (optional)</param>
        /// <param name="delayExportContent"> (optional)</param>
        /// <param name="deleteContentThread"> (optional)</param>
        /// <param name="impersonateUser"> (optional)</param>
        /// <param name="inviteUser"> (optional)</param>
        /// <param name="manageApiAccessTokens"> (optional)</param>
        /// <param name="manageAppSdkApplications"> (optional)</param>
        /// <param name="manageAutomaticExportsTasks">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageCategories"> (optional)</param>
        /// <param name="manageChat"> (optional)</param>
        /// <param name="manageCustomFields"> (optional)</param>
        /// <param name="manageCustomNotifications"> (optional)</param>
        /// <param name="manageEmailsTemplates"> (optional)</param>
        /// <param name="manageFolders"> (optional)</param>
        /// <param name="manageIce"> (optional)</param>
        /// <param name="manageIdentities"> (optional)</param>
        /// <param name="manageOwnNotifications"> (optional)</param>
        /// <param name="manageReplyAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageRoles"> (optional)</param>
        /// <param name="manageRulesEngineRules">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="manageTags"> (optional)</param>
        /// <param name="manageTeams"> (optional)</param>
        /// <param name="manageTopologies"> (optional)</param>
        /// <param name="manageUsersOfMyTeams"> (optional)</param>
        /// <param name="monitorTasks"> (optional)</param>
        /// <param name="monitorTeamTasks"> (optional)</param>
        /// <param name="muteContent"> (optional)</param>
        /// <param name="openContentThread"> (optional)</param>
        /// <param name="publishContent"> (optional)</param>
        /// <param name="readCommunity"> (optional)</param>
        /// <param name="readContentSource"> (optional)</param>
        /// <param name="readEvent"> (optional)</param>
        /// <param name="readExport"> (optional)</param>
        /// <param name="readIdentity"> (optional)</param>
        /// <param name="readOwnStats"> (optional)</param>
        /// <param name="readPresence"> (optional)</param>
        /// <param name="readStats"> (optional)</param>
        /// <param name="readSurveys">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="readUser"> (optional)</param>
        /// <param name="receiveTasks"> (optional)</param>
        /// <param name="replyWithAssistant">permission only available with the corresponding extension enabled (optional)</param>
        /// <param name="searchContents"> (optional)</param>
        /// <param name="searchEvent"> (optional)</param>
        /// <param name="updateCommunity"> (optional)</param>
        /// <param name="updateContentSource"> (optional)</param>
        /// <param name="updateExtension"> (optional)</param>
        /// <param name="updateIdentity"> (optional)</param>
        /// <param name="updateIntervention"> (optional)</param>
        /// <param name="updateOwnIntervention"> (optional)</param>
        /// <param name="updateSettings"> (optional)</param>
        /// <param name="updateTimeSheet"> (optional)</param>
        /// <param name="updateUser"> (optional)</param>
        /// <param name="useEmoji"> (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string roleId, bool? accessHelpCenter = null, bool? accessPreviousMessages = null, bool? accessPullMode = null, bool? adminStampAnswer = null, bool? approveContent = null, bool? assignIntervention = null, bool? authorBlockContent = null, bool? closeContentThread = null, bool? createAndDestroyExtension = null, bool? createCommunity = null, bool? createContentSource = null, bool? createUser = null, bool? delayExportContent = null, bool? deleteContentThread = null, bool? impersonateUser = null, bool? inviteUser = null, bool? manageApiAccessTokens = null, bool? manageAppSdkApplications = null, bool? manageAutomaticExportsTasks = null, bool? manageCategories = null, bool? manageChat = null, bool? manageCustomFields = null, bool? manageCustomNotifications = null, bool? manageEmailsTemplates = null, bool? manageFolders = null, bool? manageIce = null, bool? manageIdentities = null, bool? manageOwnNotifications = null, bool? manageReplyAssistant = null, bool? manageRoles = null, bool? manageRulesEngineRules = null, bool? manageSurveys = null, bool? manageTags = null, bool? manageTeams = null, bool? manageTopologies = null, bool? manageUsersOfMyTeams = null, bool? monitorTasks = null, bool? monitorTeamTasks = null, bool? muteContent = null, bool? openContentThread = null, bool? publishContent = null, bool? readCommunity = null, bool? readContentSource = null, bool? readEvent = null, bool? readExport = null, bool? readIdentity = null, bool? readOwnStats = null, bool? readPresence = null, bool? readStats = null, bool? readSurveys = null, bool? readUser = null, bool? receiveTasks = null, bool? replyWithAssistant = null, bool? searchContents = null, bool? searchEvent = null, bool? updateCommunity = null, bool? updateContentSource = null, bool? updateExtension = null, bool? updateIdentity = null, bool? updateIntervention = null, bool? updateOwnIntervention = null, bool? updateSettings = null, bool? updateTimeSheet = null, bool? updateUser = null, bool? useEmoji = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (roleId != null)
                requestOptions.PathParameters.Add("roleId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            if (accessHelpCenter != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_help_center", accessHelpCenter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPreviousMessages != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_previous_messages", accessPreviousMessages))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (accessPullMode != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_pull_mode", accessPullMode))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (adminStampAnswer != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "admin_stamp_answer", adminStampAnswer))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (approveContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "approve_content", approveContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (assignIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "assign_intervention", assignIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (authorBlockContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "author_block_content", authorBlockContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (closeContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "close_content_thread", closeContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createAndDestroyExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_and_destroy_extension", createAndDestroyExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_community", createCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_content_source", createContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "create_user", createUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (delayExportContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delay_export_content", delayExportContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (deleteContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "delete_content_thread", deleteContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (impersonateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "impersonate_user", impersonateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inviteUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "invite_user", inviteUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageApiAccessTokens != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_api_access_tokens", manageApiAccessTokens))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAppSdkApplications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_app_sdk_applications", manageAppSdkApplications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageAutomaticExportsTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_automatic_exports_tasks", manageAutomaticExportsTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCategories != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_categories", manageCategories))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageChat != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_chat", manageChat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomFields != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_fields", manageCustomFields))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageCustomNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_custom_notifications", manageCustomNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageEmailsTemplates != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_emails_templates", manageEmailsTemplates))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageFolders != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_folders", manageFolders))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIce != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_ice", manageIce))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageIdentities != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_identities", manageIdentities))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageOwnNotifications != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_own_notifications", manageOwnNotifications))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageReplyAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_reply_assistant", manageReplyAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRoles != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_roles", manageRoles))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageRulesEngineRules != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_rules_engine_rules", manageRulesEngineRules))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_surveys", manageSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTags != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_tags", manageTags))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_teams", manageTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageTopologies != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_topologies", manageTopologies))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (manageUsersOfMyTeams != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "manage_users_of_my_teams", manageUsersOfMyTeams))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_tasks", monitorTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (monitorTeamTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "monitor_team_tasks", monitorTeamTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (muteContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mute_content", muteContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (openContentThread != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "open_content_thread", openContentThread))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (publishContent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "publish_content", publishContent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_community", readCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_content_source", readContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_event", readEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readExport != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_export", readExport))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_identity", readIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readOwnStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_own_stats", readOwnStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readPresence != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_presence", readPresence))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readStats != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_stats", readStats))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readSurveys != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_surveys", readSurveys))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (readUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "read_user", readUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (receiveTasks != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "receive_tasks", receiveTasks))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (replyWithAssistant != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reply_with_assistant", replyWithAssistant))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchContents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_contents", searchContents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (searchEvent != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "search_event", searchEvent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateCommunity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_community", updateCommunity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateContentSource != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_content_source", updateContentSource))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateExtension != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_extension", updateExtension))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIdentity != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_identity", updateIdentity))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_intervention", updateIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateOwnIntervention != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_own_intervention", updateOwnIntervention))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateSettings != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_settings", updateSettings))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateTimeSheet != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_time_sheet", updateTimeSheet))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (updateUser != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "update_user", updateUser))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (useEmoji != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "use_emoji", useEmoji))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Role>("/roles/{roleId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRole", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
