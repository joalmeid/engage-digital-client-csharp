/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantEntriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry CreateReplyAssistantEntry (string label);

        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> CreateReplyAssistantEntryWithHttpInfo (string label);
        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry DeleteReplyAssistantEntry (string replyAssistantEntryId);

        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> DeleteReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantEntriesResponse</returns>
        GetAllReplyAssistantEntriesResponse GetAllReplyAssistantEntries (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantEntriesResponse</returns>
        ApiResponse<GetAllReplyAssistantEntriesResponse> GetAllReplyAssistantEntriesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry GetReplyAssistantEntry (string replyAssistantEntryId);

        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> GetReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ReplyAssistantEntry</returns>
        ReplyAssistantEntry UpdateReplyAssistantEntry (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        ApiResponse<ReplyAssistantEntry> UpdateReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantEntriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> CreateReplyAssistantEntryAsync (string label);

        /// <summary>
        /// Creating an entry
        /// </summary>
        /// <remarks>
        /// This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> CreateReplyAssistantEntryAsyncWithHttpInfo (string label);
        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> DeleteReplyAssistantEntryAsync (string replyAssistantEntryId);

        /// <summary>
        /// Deleting a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> DeleteReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantEntriesResponse</returns>
        System.Threading.Tasks.Task<GetAllReplyAssistantEntriesResponse> GetAllReplyAssistantEntriesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries
        /// </summary>
        /// <remarks>
        /// This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllReplyAssistantEntriesResponse>> GetAllReplyAssistantEntriesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> GetReplyAssistantEntryAsync (string replyAssistantEntryId);

        /// <summary>
        /// Getting a reply assistant entry from its id
        /// </summary>
        /// <remarks>
        /// This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> GetReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId);
        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        System.Threading.Tasks.Task<ReplyAssistantEntry> UpdateReplyAssistantEntryAsync (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);

        /// <summary>
        /// Updating a reply assistant entry
        /// </summary>
        /// <remarks>
        /// This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyAssistantEntry>> UpdateReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplyAssistantEntriesApi : IReplyAssistantEntriesApiSync, IReplyAssistantEntriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplyAssistantEntriesApi : IReplyAssistantEntriesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantEntriesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplyAssistantEntriesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplyAssistantEntriesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplyAssistantEntriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReplyAssistantEntriesApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry CreateReplyAssistantEntry (string label)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = CreateReplyAssistantEntryWithHttpInfo(label);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public Org.OpenAPITools.Client.ApiResponse< ReplyAssistantEntry > CreateReplyAssistantEntryWithHttpInfo (string label)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'label' when calling ReplyAssistantEntriesApi->CreateReplyAssistantEntry");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< ReplyAssistantEntry >("/reply_assistant/entries", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> CreateReplyAssistantEntryAsync (string label)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = await CreateReplyAssistantEntryAsyncWithHttpInfo(label);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an entry This method creates a reply assistant entry. In case of success it renders the entry, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="label">The name of the entry.</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry>> CreateReplyAssistantEntryAsyncWithHttpInfo (string label)
        {
            // verify the required parameter 'label' is set
            if (label == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'label' when calling ReplyAssistantEntriesApi->CreateReplyAssistantEntry");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ReplyAssistantEntry>("/reply_assistant/entries", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry DeleteReplyAssistantEntry (string replyAssistantEntryId)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = DeleteReplyAssistantEntryWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public Org.OpenAPITools.Client.ApiResponse< ReplyAssistantEntry > DeleteReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->DeleteReplyAssistantEntry");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantEntryId != null)
                requestOptions.PathParameters.Add("replyAssistantEntryId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replyAssistantEntryId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< ReplyAssistantEntry >("/reply_assistant/entries/{replyAssistantEntryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> DeleteReplyAssistantEntryAsync (string replyAssistantEntryId)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = await DeleteReplyAssistantEntryAsyncWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a reply assistant entry This method destroys an existing entry. It renders the entry itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry>> DeleteReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->DeleteReplyAssistantEntry");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (replyAssistantEntryId != null)
                requestOptions.PathParameters.Add("replyAssistantEntryId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replyAssistantEntryId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<ReplyAssistantEntry>("/reply_assistant/entries/{replyAssistantEntryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllReplyAssistantEntriesResponse</returns>
        public GetAllReplyAssistantEntriesResponse GetAllReplyAssistantEntries (int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllReplyAssistantEntriesResponse> localVarResponse = GetAllReplyAssistantEntriesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllReplyAssistantEntriesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< GetAllReplyAssistantEntriesResponse > GetAllReplyAssistantEntriesWithHttpInfo (int? offset = null, int? limit = null)
        {
            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllReplyAssistantEntriesResponse >("/reply_assistant/entries", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllReplyAssistantEntries", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllReplyAssistantEntriesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllReplyAssistantEntriesResponse> GetAllReplyAssistantEntriesAsync (int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllReplyAssistantEntriesResponse> localVarResponse = await GetAllReplyAssistantEntriesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting​ a​ll​ reply assistant e​ntries This method renders all entries ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllReplyAssistantEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAllReplyAssistantEntriesResponse>> GetAllReplyAssistantEntriesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllReplyAssistantEntriesResponse>("/reply_assistant/entries", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllReplyAssistantEntries", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry GetReplyAssistantEntry (string replyAssistantEntryId)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = GetReplyAssistantEntryWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public Org.OpenAPITools.Client.ApiResponse< ReplyAssistantEntry > GetReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->GetReplyAssistantEntry");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantEntryId != null)
                requestOptions.PathParameters.Add("replyAssistantEntryId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replyAssistantEntryId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ReplyAssistantEntry >("/reply_assistant/entries/{replyAssistantEntryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> GetReplyAssistantEntryAsync (string replyAssistantEntryId)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = await GetReplyAssistantEntryAsyncWithHttpInfo(replyAssistantEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a reply assistant entry from its id This method renders an entry from given id.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry>> GetReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->GetReplyAssistantEntry");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (replyAssistantEntryId != null)
                requestOptions.PathParameters.Add("replyAssistantEntryId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replyAssistantEntryId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ReplyAssistantEntry>("/reply_assistant/entries/{replyAssistantEntryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ReplyAssistantEntry</returns>
        public ReplyAssistantEntry UpdateReplyAssistantEntry (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = UpdateReplyAssistantEntryWithHttpInfo(replyAssistantEntryId, label, foreignId, categoryIds, shortcuts, entryGroupId, sourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>ApiResponse of ReplyAssistantEntry</returns>
        public Org.OpenAPITools.Client.ApiResponse< ReplyAssistantEntry > UpdateReplyAssistantEntryWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->UpdateReplyAssistantEntry");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (replyAssistantEntryId != null)
                requestOptions.PathParameters.Add("replyAssistantEntryId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replyAssistantEntryId)); // path parameter
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (foreignId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "foreign_id", foreignId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (categoryIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (shortcuts != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "shortcuts[]", shortcuts))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (entryGroupId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entry_group_id", entryGroupId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< ReplyAssistantEntry >("/reply_assistant/entries/{replyAssistantEntryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ReplyAssistantEntry</returns>
        public async System.Threading.Tasks.Task<ReplyAssistantEntry> UpdateReplyAssistantEntryAsync (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
             Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry> localVarResponse = await UpdateReplyAssistantEntryAsyncWithHttpInfo(replyAssistantEntryId, label, foreignId, categoryIds, shortcuts, entryGroupId, sourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a reply assistant entry This method updates an existing entry from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyAssistantEntryId"></param>
        /// <param name="label">The name of the entry. (optional)</param>
        /// <param name="foreignId">The internal/company id of the entry. This is used to match Engage Digital entry’s id with the company one. Example: KB042. (optional)</param>
        /// <param name="categoryIds">To restrict the entry to a set of Engage Digital categories. Then, KB entries that do not match message’s categories to which you are replying will not be suggested. (optional)</param>
        /// <param name="shortcuts">entry shortcuts (optional)</param>
        /// <param name="entryGroupId">Entry group id. (optional)</param>
        /// <param name="sourceIds">Source ids (array) (optional)</param>
        /// <returns>Task of ApiResponse (ReplyAssistantEntry)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReplyAssistantEntry>> UpdateReplyAssistantEntryAsyncWithHttpInfo (string replyAssistantEntryId, string label = null, string foreignId = null, List<string> categoryIds = null, List<string> shortcuts = null, string entryGroupId = null, List<string> sourceIds = null)
        {
            // verify the required parameter 'replyAssistantEntryId' is set
            if (replyAssistantEntryId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'replyAssistantEntryId' when calling ReplyAssistantEntriesApi->UpdateReplyAssistantEntry");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (replyAssistantEntryId != null)
                requestOptions.PathParameters.Add("replyAssistantEntryId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replyAssistantEntryId)); // path parameter
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (foreignId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "foreign_id", foreignId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (categoryIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "category_ids[]", categoryIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (shortcuts != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "shortcuts[]", shortcuts))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (entryGroupId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entry_group_id", entryGroupId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceIds != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "source_ids[]", sourceIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<ReplyAssistantEntry>("/reply_assistant/entries/{replyAssistantEntryId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateReplyAssistantEntry", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
