/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Webhook</returns>
        Webhook CreateWebhook (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);

        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> CreateWebhookWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);
        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        Webhook DeleteWebhook (string webhookId, string accessToken);

        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> DeleteWebhookWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllWebhooksResponse</returns>
        GetAllWebhooksResponse GetAllWebhooks (string accessToken, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllWebhooksResponse</returns>
        ApiResponse<GetAllWebhooksResponse> GetAllWebhooksWithHttpInfo (string accessToken, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        Webhook GetWebhook (string webhookId, string accessToken);

        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Webhook</returns>
        Webhook UpdateWebhook (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);

        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> UpdateWebhookWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> CreateWebhookAsync (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);

        /// <summary>
        /// Creating a webhook
        /// </summary>
        /// <remarks>
        /// This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> CreateWebhookAsyncWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null);
        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> DeleteWebhookAsync (string webhookId, string accessToken);

        /// <summary>
        /// Deleting a webhook
        /// </summary>
        /// <remarks>
        /// This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> DeleteWebhookAsyncWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllWebhooksResponse</returns>
        System.Threading.Tasks.Task<GetAllWebhooksResponse> GetAllWebhooksAsync (string accessToken, int? offset = null, int? limit = null);

        /// <summary>
        /// Getting all webhooks
        /// </summary>
        /// <remarks>
        /// This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllWebhooksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllWebhooksResponse>> GetAllWebhooksAsyncWithHttpInfo (string accessToken, int? offset = null, int? limit = null);
        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookAsync (string webhookId, string accessToken);

        /// <summary>
        /// Getting a webhook from its id
        /// </summary>
        /// <remarks>
        /// This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (string webhookId, string accessToken);
        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> UpdateWebhookAsync (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);

        /// <summary>
        /// Updating a webhook
        /// </summary>
        /// <remarks>
        /// This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> UpdateWebhookAsyncWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Webhook</returns>
        public Webhook CreateWebhook (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = CreateWebhookWithHttpInfo(accessToken, label, url, registeredEvents, active, stagingUse, verifyToken, secret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Org.OpenAPITools.Client.ApiResponse< Webhook > CreateWebhookWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->CreateWebhook");

            // verify the required parameter 'label' is set
            if (label == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'label' when calling WebhooksApi->CreateWebhook");

            // verify the required parameter 'url' is set
            if (url == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling WebhooksApi->CreateWebhook");

            // verify the required parameter 'registeredEvents' is set
            if (registeredEvents == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'registeredEvents' when calling WebhooksApi->CreateWebhook");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (active != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (stagingUse != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "staging_use", stagingUse))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (url != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (verifyToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify_token", verifyToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secret != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secret", secret))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (registeredEvents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "registered_events[]", registeredEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< Webhook >("/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> CreateWebhookAsync (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = await CreateWebhookAsyncWithHttpInfo(accessToken, label, url, registeredEvents, active, stagingUse, verifyToken, secret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a webhook This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="label">The label of the webhook.</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Webhook>> CreateWebhookAsyncWithHttpInfo (string accessToken, string label, string url, List<string> registeredEvents, bool? active = null, bool? stagingUse = null, string verifyToken = null, string secret = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->CreateWebhook");

            // verify the required parameter 'label' is set
            if (label == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'label' when calling WebhooksApi->CreateWebhook");

            // verify the required parameter 'url' is set
            if (url == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'url' when calling WebhooksApi->CreateWebhook");

            // verify the required parameter 'registeredEvents' is set
            if (registeredEvents == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'registeredEvents' when calling WebhooksApi->CreateWebhook");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (active != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (stagingUse != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "staging_use", stagingUse))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (url != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (verifyToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify_token", verifyToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secret != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secret", secret))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (registeredEvents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "registered_events[]", registeredEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Webhook>("/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        public Webhook DeleteWebhook (string webhookId, string accessToken)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = DeleteWebhookWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Org.OpenAPITools.Client.ApiResponse< Webhook > DeleteWebhookWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhook");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->DeleteWebhook");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Delete< Webhook >("/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> DeleteWebhookAsync (string webhookId, string accessToken)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = await DeleteWebhookAsyncWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a webhook This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Webhook>> DeleteWebhookAsyncWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhook");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->DeleteWebhook");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Webhook>("/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>GetAllWebhooksResponse</returns>
        public GetAllWebhooksResponse GetAllWebhooks (string accessToken, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllWebhooksResponse> localVarResponse = GetAllWebhooksWithHttpInfo(accessToken, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>ApiResponse of GetAllWebhooksResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< GetAllWebhooksResponse > GetAllWebhooksWithHttpInfo (string accessToken, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetAllWebhooks");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< GetAllWebhooksResponse >("/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllWebhooks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of GetAllWebhooksResponse</returns>
        public async System.Threading.Tasks.Task<GetAllWebhooksResponse> GetAllWebhooksAsync (string accessToken, int? offset = null, int? limit = null)
        {
             Org.OpenAPITools.Client.ApiResponse<GetAllWebhooksResponse> localVarResponse = await GetAllWebhooksAsyncWithHttpInfo(accessToken, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all webhooks This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Access token.</param>
        /// <param name="offset">The record index to start. Default value is 0. (optional)</param>
        /// <param name="limit">The max number of records to return. Default value is 30, max value is 150. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllWebhooksResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAllWebhooksResponse>> GetAllWebhooksAsyncWithHttpInfo (string accessToken, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetAllWebhooks");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (offset != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<GetAllWebhooksResponse>("/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAllWebhooks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook (string webhookId, string accessToken)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = GetWebhookWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Org.OpenAPITools.Client.ApiResponse< Webhook > GetWebhookWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhook");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetWebhook");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< Webhook >("/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync (string webhookId, string accessToken)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting a webhook from its id This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (string webhookId, string accessToken)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhook");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->GetWebhook");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Webhook>("/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Webhook</returns>
        public Webhook UpdateWebhook (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = UpdateWebhookWithHttpInfo(webhookId, accessToken, active, label, stagingUse, url, verifyToken, secret, registeredEvents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Org.OpenAPITools.Client.ApiResponse< Webhook > UpdateWebhookWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhook");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->UpdateWebhook");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (active != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (stagingUse != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "staging_use", stagingUse))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (url != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (verifyToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify_token", verifyToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secret != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secret", secret))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (registeredEvents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "registered_events[]", registeredEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Put< Webhook >("/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> UpdateWebhookAsync (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
             Org.OpenAPITools.Client.ApiResponse<Webhook> localVarResponse = await UpdateWebhookAsyncWithHttpInfo(webhookId, accessToken, active, label, stagingUse, url, verifyToken, secret, registeredEvents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a webhook This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="accessToken">Access token.</param>
        /// <param name="active">true or false, this field is used to enable/disable a webhook. (optional)</param>
        /// <param name="label">The label of the webhook. (optional)</param>
        /// <param name="stagingUse">true or false, this field is used to determine if a webhook will be run in staging (optional)</param>
        /// <param name="url">The url of a webhook. This is used to determine the endpoint of your webhook, where (optional)</param>
        /// <param name="verifyToken">The token used in your webhook. (optional)</param>
        /// <param name="secret">The secret key that will be served as a ​&#x60;X-Dimelo-Secret​&#x60; header in every request. (optional)</param>
        /// <param name="registeredEvents">An array containing all the events that your webhook wants to subscribe. (optional)</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Webhook>> UpdateWebhookAsyncWithHttpInfo (string webhookId, string accessToken, bool? active = null, string label = null, bool? stagingUse = null, string url = null, string verifyToken = null, string secret = null, List<string> registeredEvents = null)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhook");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling WebhooksApi->UpdateWebhook");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (accessToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (active != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (label != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "label", label))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (stagingUse != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "staging_use", stagingUse))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (url != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "url", url))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (verifyToken != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verify_token", verifyToken))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (secret != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "secret", secret))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (registeredEvents != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "registered_events[]", registeredEvents))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Webhook>("/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
