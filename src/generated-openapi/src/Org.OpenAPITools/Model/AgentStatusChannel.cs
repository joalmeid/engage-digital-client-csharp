/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AgentStatusChannel
    /// </summary>
    [DataContract]
    public partial class AgentStatusChannel :  IEquatable<AgentStatusChannel>, IValidatableObject
    {
        /// <summary>
        /// Defines Busyness
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusynessEnum
        {
            /// <summary>
            /// Enum Unoccupied for value: unoccupied
            /// </summary>
            [EnumMember(Value = "unoccupied")]
            Unoccupied = 1,

            /// <summary>
            /// Enum Ok for value: ok
            /// </summary>
            [EnumMember(Value = "ok")]
            Ok = 2,

            /// <summary>
            /// Enum Busy for value: busy
            /// </summary>
            [EnumMember(Value = "busy")]
            Busy = 3,

            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 4

        }

        /// <summary>
        /// Gets or Sets Busyness
        /// </summary>
        [DataMember(Name="busyness", EmitDefaultValue=false)]
        public BusynessEnum? Busyness { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgentStatusChannel" /> class.
        /// </summary>
        /// <param name="busyness">busyness.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        public AgentStatusChannel(BusynessEnum? busyness = default(BusynessEnum?), string id = default(string), string name = default(string), string status = default(string))
        {
            this.Busyness = busyness;
            this.Id = id;
            this.Name = name;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgentStatusChannel {\n");
            sb.Append("  Busyness: ").Append(Busyness).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgentStatusChannel);
        }

        /// <summary>
        /// Returns true if AgentStatusChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of AgentStatusChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgentStatusChannel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Busyness == input.Busyness ||
                    this.Busyness.Equals(input.Busyness)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Busyness.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
