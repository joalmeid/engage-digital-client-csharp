/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Settings
    /// </summary>
    [DataContract]
    public partial class Settings :  IEquatable<Settings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Settings" /> class.
        /// </summary>
        /// <param name="activityPresenceThreshold">activityPresenceThreshold.</param>
        /// <param name="activityTracking">activityTracking.</param>
        /// <param name="beginningOfWeek">beginningOfWeek.</param>
        /// <param name="browserNotificationsDisabled">browserNotificationsDisabled.</param>
        /// <param name="contentLanguages">contentLanguages.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="denyIframeIntegration">denyIframeIntegration.</param>
        /// <param name="disablePasswordAutocomplete">disablePasswordAutocomplete.</param>
        /// <param name="displayOnlyUnknownBbcode">displayOnlyUnknownBbcode.</param>
        /// <param name="dumpInPreprod">dumpInPreprod.</param>
        /// <param name="expirePasswordAfter">expirePasswordAfter.</param>
        /// <param name="expirePasswordEnabled">expirePasswordEnabled.</param>
        /// <param name="fteDuration">fteDuration.</param>
        /// <param name="id">id.</param>
        /// <param name="identityMerge">identityMerge.</param>
        /// <param name="interventionClosingPeriod">interventionClosingPeriod.</param>
        /// <param name="interventionDeferRates">interventionDeferRates.</param>
        /// <param name="interventionDeferThreshold">interventionDeferThreshold.</param>
        /// <param name="interventionRates">interventionRates.</param>
        /// <param name="locale">locale.</param>
        /// <param name="multiLang">multiLang.</param>
        /// <param name="name">name.</param>
        /// <param name="passwordArchivableEnabled">passwordArchivableEnabled.</param>
        /// <param name="passwordArchivableSize">passwordArchivableSize.</param>
        /// <param name="passwordMinLength">passwordMinLength.</param>
        /// <param name="passwordNonWord">passwordNonWord.</param>
        /// <param name="passwordNumbers">passwordNumbers.</param>
        /// <param name="passwordRecoveryDisabled">passwordRecoveryDisabled.</param>
        /// <param name="pushEnabled">pushEnabled.</param>
        /// <param name="replyAsAnyIdentity">replyAsAnyIdentity.</param>
        /// <param name="rtlSupport">rtlSupport.</param>
        /// <param name="selfApprovalRequired">selfApprovalRequired.</param>
        /// <param name="sessionTimeout">sessionTimeout.</param>
        /// <param name="shardingKey">shardingKey.</param>
        /// <param name="spellchecking">spellchecking.</param>
        /// <param name="style">style.</param>
        /// <param name="thirdPartyServicesDisabled">thirdPartyServicesDisabled.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="urgentTaskThreshold">urgentTaskThreshold.</param>
        /// <param name="useTwoLettersAvatars">useTwoLettersAvatars.</param>
        public Settings(int activityPresenceThreshold = default(int), bool activityTracking = default(bool), string beginningOfWeek = default(string), bool browserNotificationsDisabled = default(bool), List<string> contentLanguages = default(List<string>), DateTime createdAt = default(DateTime), bool denyIframeIntegration = default(bool), bool disablePasswordAutocomplete = default(bool), bool displayOnlyUnknownBbcode = default(bool), bool dumpInPreprod = default(bool), int expirePasswordAfter = default(int), bool expirePasswordEnabled = default(bool), int fteDuration = default(int), string id = default(string), bool identityMerge = default(bool), int interventionClosingPeriod = default(int), List<int> interventionDeferRates = default(List<int>), int interventionDeferThreshold = default(int), List<int> interventionRates = default(List<int>), string locale = default(string), bool multiLang = default(bool), string name = default(string), bool passwordArchivableEnabled = default(bool), int passwordArchivableSize = default(int), int passwordMinLength = default(int), bool passwordNonWord = default(bool), bool passwordNumbers = default(bool), bool passwordRecoveryDisabled = default(bool), bool pushEnabled = default(bool), bool replyAsAnyIdentity = default(bool), bool rtlSupport = default(bool), bool selfApprovalRequired = default(bool), int sessionTimeout = default(int), string shardingKey = default(string), bool spellchecking = default(bool), string style = default(string), bool thirdPartyServicesDisabled = default(bool), string timezone = default(string), string type = default(string), DateTime updatedAt = default(DateTime), int urgentTaskThreshold = default(int), bool useTwoLettersAvatars = default(bool))
        {
            this.ActivityPresenceThreshold = activityPresenceThreshold;
            this.ActivityTracking = activityTracking;
            this.BeginningOfWeek = beginningOfWeek;
            this.BrowserNotificationsDisabled = browserNotificationsDisabled;
            this.ContentLanguages = contentLanguages;
            this.CreatedAt = createdAt;
            this.DenyIframeIntegration = denyIframeIntegration;
            this.DisablePasswordAutocomplete = disablePasswordAutocomplete;
            this.DisplayOnlyUnknownBbcode = displayOnlyUnknownBbcode;
            this.DumpInPreprod = dumpInPreprod;
            this.ExpirePasswordAfter = expirePasswordAfter;
            this.ExpirePasswordEnabled = expirePasswordEnabled;
            this.FteDuration = fteDuration;
            this.Id = id;
            this.IdentityMerge = identityMerge;
            this.InterventionClosingPeriod = interventionClosingPeriod;
            this.InterventionDeferRates = interventionDeferRates;
            this.InterventionDeferThreshold = interventionDeferThreshold;
            this.InterventionRates = interventionRates;
            this.Locale = locale;
            this.MultiLang = multiLang;
            this.Name = name;
            this.PasswordArchivableEnabled = passwordArchivableEnabled;
            this.PasswordArchivableSize = passwordArchivableSize;
            this.PasswordMinLength = passwordMinLength;
            this.PasswordNonWord = passwordNonWord;
            this.PasswordNumbers = passwordNumbers;
            this.PasswordRecoveryDisabled = passwordRecoveryDisabled;
            this.PushEnabled = pushEnabled;
            this.ReplyAsAnyIdentity = replyAsAnyIdentity;
            this.RtlSupport = rtlSupport;
            this.SelfApprovalRequired = selfApprovalRequired;
            this.SessionTimeout = sessionTimeout;
            this.ShardingKey = shardingKey;
            this.Spellchecking = spellchecking;
            this.Style = style;
            this.ThirdPartyServicesDisabled = thirdPartyServicesDisabled;
            this.Timezone = timezone;
            this.Type = type;
            this.UpdatedAt = updatedAt;
            this.UrgentTaskThreshold = urgentTaskThreshold;
            this.UseTwoLettersAvatars = useTwoLettersAvatars;
        }
        
        /// <summary>
        /// Gets or Sets ActivityPresenceThreshold
        /// </summary>
        [DataMember(Name="activity_presence_threshold", EmitDefaultValue=false)]
        public int ActivityPresenceThreshold { get; set; }

        /// <summary>
        /// Gets or Sets ActivityTracking
        /// </summary>
        [DataMember(Name="activity_tracking", EmitDefaultValue=false)]
        public bool ActivityTracking { get; set; }

        /// <summary>
        /// Gets or Sets BeginningOfWeek
        /// </summary>
        [DataMember(Name="beginning_of_week", EmitDefaultValue=false)]
        public string BeginningOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets BrowserNotificationsDisabled
        /// </summary>
        [DataMember(Name="browser_notifications_disabled", EmitDefaultValue=false)]
        public bool BrowserNotificationsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets ContentLanguages
        /// </summary>
        [DataMember(Name="content_languages[]", EmitDefaultValue=false)]
        public List<string> ContentLanguages { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DenyIframeIntegration
        /// </summary>
        [DataMember(Name="deny_iframe_integration", EmitDefaultValue=false)]
        public bool DenyIframeIntegration { get; set; }

        /// <summary>
        /// Gets or Sets DisablePasswordAutocomplete
        /// </summary>
        [DataMember(Name="disable_password_autocomplete", EmitDefaultValue=false)]
        public bool DisablePasswordAutocomplete { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOnlyUnknownBbcode
        /// </summary>
        [DataMember(Name="display_only_unknown_bbcode", EmitDefaultValue=false)]
        public bool DisplayOnlyUnknownBbcode { get; set; }

        /// <summary>
        /// Gets or Sets DumpInPreprod
        /// </summary>
        [DataMember(Name="dump_in_preprod", EmitDefaultValue=false)]
        public bool DumpInPreprod { get; set; }

        /// <summary>
        /// Gets or Sets ExpirePasswordAfter
        /// </summary>
        [DataMember(Name="expire_password_after", EmitDefaultValue=false)]
        public int ExpirePasswordAfter { get; set; }

        /// <summary>
        /// Gets or Sets ExpirePasswordEnabled
        /// </summary>
        [DataMember(Name="expire_password_enabled", EmitDefaultValue=false)]
        public bool ExpirePasswordEnabled { get; set; }

        /// <summary>
        /// Gets or Sets FteDuration
        /// </summary>
        [DataMember(Name="fte_duration", EmitDefaultValue=false)]
        public int FteDuration { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdentityMerge
        /// </summary>
        [DataMember(Name="identity_merge", EmitDefaultValue=false)]
        public bool IdentityMerge { get; set; }

        /// <summary>
        /// Gets or Sets InterventionClosingPeriod
        /// </summary>
        [DataMember(Name="intervention_closing_period", EmitDefaultValue=false)]
        public int InterventionClosingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets InterventionDeferRates
        /// </summary>
        [DataMember(Name="intervention_defer_rates", EmitDefaultValue=false)]
        public List<int> InterventionDeferRates { get; set; }

        /// <summary>
        /// Gets or Sets InterventionDeferThreshold
        /// </summary>
        [DataMember(Name="intervention_defer_threshold", EmitDefaultValue=false)]
        public int InterventionDeferThreshold { get; set; }

        /// <summary>
        /// Gets or Sets InterventionRates
        /// </summary>
        [DataMember(Name="intervention_rates", EmitDefaultValue=false)]
        public List<int> InterventionRates { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets MultiLang
        /// </summary>
        [DataMember(Name="multi_lang", EmitDefaultValue=false)]
        public bool MultiLang { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PasswordArchivableEnabled
        /// </summary>
        [DataMember(Name="password_archivable_enabled", EmitDefaultValue=false)]
        public bool PasswordArchivableEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PasswordArchivableSize
        /// </summary>
        [DataMember(Name="password_archivable_size", EmitDefaultValue=false)]
        public int PasswordArchivableSize { get; set; }

        /// <summary>
        /// Gets or Sets PasswordMinLength
        /// </summary>
        [DataMember(Name="password_min_length", EmitDefaultValue=false)]
        public int PasswordMinLength { get; set; }

        /// <summary>
        /// Gets or Sets PasswordNonWord
        /// </summary>
        [DataMember(Name="password_non_word", EmitDefaultValue=false)]
        public bool PasswordNonWord { get; set; }

        /// <summary>
        /// Gets or Sets PasswordNumbers
        /// </summary>
        [DataMember(Name="password_numbers", EmitDefaultValue=false)]
        public bool PasswordNumbers { get; set; }

        /// <summary>
        /// Gets or Sets PasswordRecoveryDisabled
        /// </summary>
        [DataMember(Name="password_recovery_disabled", EmitDefaultValue=false)]
        public bool PasswordRecoveryDisabled { get; set; }

        /// <summary>
        /// Gets or Sets PushEnabled
        /// </summary>
        [DataMember(Name="push_enabled", EmitDefaultValue=false)]
        public bool PushEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ReplyAsAnyIdentity
        /// </summary>
        [DataMember(Name="reply_as_any_identity", EmitDefaultValue=false)]
        public bool ReplyAsAnyIdentity { get; set; }

        /// <summary>
        /// Gets or Sets RtlSupport
        /// </summary>
        [DataMember(Name="rtl_support", EmitDefaultValue=false)]
        public bool RtlSupport { get; set; }

        /// <summary>
        /// Gets or Sets SelfApprovalRequired
        /// </summary>
        [DataMember(Name="self_approval_required", EmitDefaultValue=false)]
        public bool SelfApprovalRequired { get; set; }

        /// <summary>
        /// Gets or Sets SessionTimeout
        /// </summary>
        [DataMember(Name="session_timeout", EmitDefaultValue=false)]
        public int SessionTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ShardingKey
        /// </summary>
        [DataMember(Name="sharding_key", EmitDefaultValue=false)]
        public string ShardingKey { get; set; }

        /// <summary>
        /// Gets or Sets Spellchecking
        /// </summary>
        [DataMember(Name="spellchecking", EmitDefaultValue=false)]
        public bool Spellchecking { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public string Style { get; set; }

        /// <summary>
        /// Gets or Sets ThirdPartyServicesDisabled
        /// </summary>
        [DataMember(Name="third_party_services_disabled", EmitDefaultValue=false)]
        public bool ThirdPartyServicesDisabled { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UrgentTaskThreshold
        /// </summary>
        [DataMember(Name="urgent_task_threshold", EmitDefaultValue=false)]
        public int UrgentTaskThreshold { get; set; }

        /// <summary>
        /// Gets or Sets UseTwoLettersAvatars
        /// </summary>
        [DataMember(Name="use_two_letters_avatars", EmitDefaultValue=false)]
        public bool UseTwoLettersAvatars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Settings {\n");
            sb.Append("  ActivityPresenceThreshold: ").Append(ActivityPresenceThreshold).Append("\n");
            sb.Append("  ActivityTracking: ").Append(ActivityTracking).Append("\n");
            sb.Append("  BeginningOfWeek: ").Append(BeginningOfWeek).Append("\n");
            sb.Append("  BrowserNotificationsDisabled: ").Append(BrowserNotificationsDisabled).Append("\n");
            sb.Append("  ContentLanguages: ").Append(ContentLanguages).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DenyIframeIntegration: ").Append(DenyIframeIntegration).Append("\n");
            sb.Append("  DisablePasswordAutocomplete: ").Append(DisablePasswordAutocomplete).Append("\n");
            sb.Append("  DisplayOnlyUnknownBbcode: ").Append(DisplayOnlyUnknownBbcode).Append("\n");
            sb.Append("  DumpInPreprod: ").Append(DumpInPreprod).Append("\n");
            sb.Append("  ExpirePasswordAfter: ").Append(ExpirePasswordAfter).Append("\n");
            sb.Append("  ExpirePasswordEnabled: ").Append(ExpirePasswordEnabled).Append("\n");
            sb.Append("  FteDuration: ").Append(FteDuration).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdentityMerge: ").Append(IdentityMerge).Append("\n");
            sb.Append("  InterventionClosingPeriod: ").Append(InterventionClosingPeriod).Append("\n");
            sb.Append("  InterventionDeferRates: ").Append(InterventionDeferRates).Append("\n");
            sb.Append("  InterventionDeferThreshold: ").Append(InterventionDeferThreshold).Append("\n");
            sb.Append("  InterventionRates: ").Append(InterventionRates).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MultiLang: ").Append(MultiLang).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PasswordArchivableEnabled: ").Append(PasswordArchivableEnabled).Append("\n");
            sb.Append("  PasswordArchivableSize: ").Append(PasswordArchivableSize).Append("\n");
            sb.Append("  PasswordMinLength: ").Append(PasswordMinLength).Append("\n");
            sb.Append("  PasswordNonWord: ").Append(PasswordNonWord).Append("\n");
            sb.Append("  PasswordNumbers: ").Append(PasswordNumbers).Append("\n");
            sb.Append("  PasswordRecoveryDisabled: ").Append(PasswordRecoveryDisabled).Append("\n");
            sb.Append("  PushEnabled: ").Append(PushEnabled).Append("\n");
            sb.Append("  ReplyAsAnyIdentity: ").Append(ReplyAsAnyIdentity).Append("\n");
            sb.Append("  RtlSupport: ").Append(RtlSupport).Append("\n");
            sb.Append("  SelfApprovalRequired: ").Append(SelfApprovalRequired).Append("\n");
            sb.Append("  SessionTimeout: ").Append(SessionTimeout).Append("\n");
            sb.Append("  ShardingKey: ").Append(ShardingKey).Append("\n");
            sb.Append("  Spellchecking: ").Append(Spellchecking).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  ThirdPartyServicesDisabled: ").Append(ThirdPartyServicesDisabled).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UrgentTaskThreshold: ").Append(UrgentTaskThreshold).Append("\n");
            sb.Append("  UseTwoLettersAvatars: ").Append(UseTwoLettersAvatars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Settings);
        }

        /// <summary>
        /// Returns true if Settings instances are equal
        /// </summary>
        /// <param name="input">Instance of Settings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Settings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityPresenceThreshold == input.ActivityPresenceThreshold ||
                    this.ActivityPresenceThreshold.Equals(input.ActivityPresenceThreshold)
                ) && 
                (
                    this.ActivityTracking == input.ActivityTracking ||
                    this.ActivityTracking.Equals(input.ActivityTracking)
                ) && 
                (
                    this.BeginningOfWeek == input.BeginningOfWeek ||
                    (this.BeginningOfWeek != null &&
                    this.BeginningOfWeek.Equals(input.BeginningOfWeek))
                ) && 
                (
                    this.BrowserNotificationsDisabled == input.BrowserNotificationsDisabled ||
                    this.BrowserNotificationsDisabled.Equals(input.BrowserNotificationsDisabled)
                ) && 
                (
                    this.ContentLanguages == input.ContentLanguages ||
                    this.ContentLanguages != null &&
                    input.ContentLanguages != null &&
                    this.ContentLanguages.SequenceEqual(input.ContentLanguages)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DenyIframeIntegration == input.DenyIframeIntegration ||
                    this.DenyIframeIntegration.Equals(input.DenyIframeIntegration)
                ) && 
                (
                    this.DisablePasswordAutocomplete == input.DisablePasswordAutocomplete ||
                    this.DisablePasswordAutocomplete.Equals(input.DisablePasswordAutocomplete)
                ) && 
                (
                    this.DisplayOnlyUnknownBbcode == input.DisplayOnlyUnknownBbcode ||
                    this.DisplayOnlyUnknownBbcode.Equals(input.DisplayOnlyUnknownBbcode)
                ) && 
                (
                    this.DumpInPreprod == input.DumpInPreprod ||
                    this.DumpInPreprod.Equals(input.DumpInPreprod)
                ) && 
                (
                    this.ExpirePasswordAfter == input.ExpirePasswordAfter ||
                    this.ExpirePasswordAfter.Equals(input.ExpirePasswordAfter)
                ) && 
                (
                    this.ExpirePasswordEnabled == input.ExpirePasswordEnabled ||
                    this.ExpirePasswordEnabled.Equals(input.ExpirePasswordEnabled)
                ) && 
                (
                    this.FteDuration == input.FteDuration ||
                    this.FteDuration.Equals(input.FteDuration)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdentityMerge == input.IdentityMerge ||
                    this.IdentityMerge.Equals(input.IdentityMerge)
                ) && 
                (
                    this.InterventionClosingPeriod == input.InterventionClosingPeriod ||
                    this.InterventionClosingPeriod.Equals(input.InterventionClosingPeriod)
                ) && 
                (
                    this.InterventionDeferRates == input.InterventionDeferRates ||
                    this.InterventionDeferRates != null &&
                    input.InterventionDeferRates != null &&
                    this.InterventionDeferRates.SequenceEqual(input.InterventionDeferRates)
                ) && 
                (
                    this.InterventionDeferThreshold == input.InterventionDeferThreshold ||
                    this.InterventionDeferThreshold.Equals(input.InterventionDeferThreshold)
                ) && 
                (
                    this.InterventionRates == input.InterventionRates ||
                    this.InterventionRates != null &&
                    input.InterventionRates != null &&
                    this.InterventionRates.SequenceEqual(input.InterventionRates)
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MultiLang == input.MultiLang ||
                    this.MultiLang.Equals(input.MultiLang)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PasswordArchivableEnabled == input.PasswordArchivableEnabled ||
                    this.PasswordArchivableEnabled.Equals(input.PasswordArchivableEnabled)
                ) && 
                (
                    this.PasswordArchivableSize == input.PasswordArchivableSize ||
                    this.PasswordArchivableSize.Equals(input.PasswordArchivableSize)
                ) && 
                (
                    this.PasswordMinLength == input.PasswordMinLength ||
                    this.PasswordMinLength.Equals(input.PasswordMinLength)
                ) && 
                (
                    this.PasswordNonWord == input.PasswordNonWord ||
                    this.PasswordNonWord.Equals(input.PasswordNonWord)
                ) && 
                (
                    this.PasswordNumbers == input.PasswordNumbers ||
                    this.PasswordNumbers.Equals(input.PasswordNumbers)
                ) && 
                (
                    this.PasswordRecoveryDisabled == input.PasswordRecoveryDisabled ||
                    this.PasswordRecoveryDisabled.Equals(input.PasswordRecoveryDisabled)
                ) && 
                (
                    this.PushEnabled == input.PushEnabled ||
                    this.PushEnabled.Equals(input.PushEnabled)
                ) && 
                (
                    this.ReplyAsAnyIdentity == input.ReplyAsAnyIdentity ||
                    this.ReplyAsAnyIdentity.Equals(input.ReplyAsAnyIdentity)
                ) && 
                (
                    this.RtlSupport == input.RtlSupport ||
                    this.RtlSupport.Equals(input.RtlSupport)
                ) && 
                (
                    this.SelfApprovalRequired == input.SelfApprovalRequired ||
                    this.SelfApprovalRequired.Equals(input.SelfApprovalRequired)
                ) && 
                (
                    this.SessionTimeout == input.SessionTimeout ||
                    this.SessionTimeout.Equals(input.SessionTimeout)
                ) && 
                (
                    this.ShardingKey == input.ShardingKey ||
                    (this.ShardingKey != null &&
                    this.ShardingKey.Equals(input.ShardingKey))
                ) && 
                (
                    this.Spellchecking == input.Spellchecking ||
                    this.Spellchecking.Equals(input.Spellchecking)
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.ThirdPartyServicesDisabled == input.ThirdPartyServicesDisabled ||
                    this.ThirdPartyServicesDisabled.Equals(input.ThirdPartyServicesDisabled)
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UrgentTaskThreshold == input.UrgentTaskThreshold ||
                    this.UrgentTaskThreshold.Equals(input.UrgentTaskThreshold)
                ) && 
                (
                    this.UseTwoLettersAvatars == input.UseTwoLettersAvatars ||
                    this.UseTwoLettersAvatars.Equals(input.UseTwoLettersAvatars)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ActivityPresenceThreshold.GetHashCode();
                hashCode = hashCode * 59 + this.ActivityTracking.GetHashCode();
                if (this.BeginningOfWeek != null)
                    hashCode = hashCode * 59 + this.BeginningOfWeek.GetHashCode();
                hashCode = hashCode * 59 + this.BrowserNotificationsDisabled.GetHashCode();
                if (this.ContentLanguages != null)
                    hashCode = hashCode * 59 + this.ContentLanguages.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.DenyIframeIntegration.GetHashCode();
                hashCode = hashCode * 59 + this.DisablePasswordAutocomplete.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayOnlyUnknownBbcode.GetHashCode();
                hashCode = hashCode * 59 + this.DumpInPreprod.GetHashCode();
                hashCode = hashCode * 59 + this.ExpirePasswordAfter.GetHashCode();
                hashCode = hashCode * 59 + this.ExpirePasswordEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.FteDuration.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IdentityMerge.GetHashCode();
                hashCode = hashCode * 59 + this.InterventionClosingPeriod.GetHashCode();
                if (this.InterventionDeferRates != null)
                    hashCode = hashCode * 59 + this.InterventionDeferRates.GetHashCode();
                hashCode = hashCode * 59 + this.InterventionDeferThreshold.GetHashCode();
                if (this.InterventionRates != null)
                    hashCode = hashCode * 59 + this.InterventionRates.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                hashCode = hashCode * 59 + this.MultiLang.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.PasswordArchivableEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.PasswordArchivableSize.GetHashCode();
                hashCode = hashCode * 59 + this.PasswordMinLength.GetHashCode();
                hashCode = hashCode * 59 + this.PasswordNonWord.GetHashCode();
                hashCode = hashCode * 59 + this.PasswordNumbers.GetHashCode();
                hashCode = hashCode * 59 + this.PasswordRecoveryDisabled.GetHashCode();
                hashCode = hashCode * 59 + this.PushEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.ReplyAsAnyIdentity.GetHashCode();
                hashCode = hashCode * 59 + this.RtlSupport.GetHashCode();
                hashCode = hashCode * 59 + this.SelfApprovalRequired.GetHashCode();
                hashCode = hashCode * 59 + this.SessionTimeout.GetHashCode();
                if (this.ShardingKey != null)
                    hashCode = hashCode * 59 + this.ShardingKey.GetHashCode();
                hashCode = hashCode * 59 + this.Spellchecking.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                hashCode = hashCode * 59 + this.ThirdPartyServicesDisabled.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.UrgentTaskThreshold.GetHashCode();
                hashCode = hashCode * 59 + this.UseTwoLettersAvatars.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
