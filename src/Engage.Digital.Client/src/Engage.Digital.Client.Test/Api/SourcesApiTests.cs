/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Engage.Digital.Client;
using Engage.Digital.Client.Api;
using Engage.Digital.Model;

namespace Engage.Digital.Api.Test
{
    /// <summary>
    ///  Class for testing SourcesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SourcesApiTests : IDisposable
    {
        private SourcesApi instance;

        public SourcesApiTests()
        {
            instance = new SourcesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SourcesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SourcesApi
            //Assert.IsType(typeof(SourcesApi), instance, "instance is a SourcesApi");
        }

        
        /// <summary>
        /// Test GetAllSources
        /// </summary>
        [Fact]
        public void GetAllSourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllSources(offset, limit);
            //Assert.IsType<GetAllSourcesResponse> (response, "response is GetAllSourcesResponse");
        }
        
        /// <summary>
        /// Test GetSource
        /// </summary>
        [Fact]
        public void GetSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sourceId = null;
            //var response = instance.GetSource(sourceId);
            //Assert.IsType<Source> (response, "response is Source");
        }
        
        /// <summary>
        /// Test UpdateSource
        /// </summary>
        [Fact]
        public void UpdateSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sourceId = null;
            //string name = null;
            //bool? active = null;
            //string channelId = null;
            //int? color = null;
            //int? slaResponse = null;
            //string slaExpiredStrategy = null;
            //int? interventionMessagesBoost = null;
            //int? transferredTasksBoost = null;
            //bool? hiddenFromStats = null;
            //List<string> defaultCategoryIds = null;
            //List<string> userThreadDefaultCategoryIds = null;
            //string defaultContentLanguage = null;
            //bool? autoDetectContentLanguage = null;
            //bool? contentArchiving = null;
            //int? contentArchivingPeriod = null;
            //var response = instance.UpdateSource(sourceId, name, active, channelId, color, slaResponse, slaExpiredStrategy, interventionMessagesBoost, transferredTasksBoost, hiddenFromStats, defaultCategoryIds, userThreadDefaultCategoryIds, defaultContentLanguage, autoDetectContentLanguage, contentArchiving, contentArchivingPeriod);
            //Assert.IsType<Source> (response, "response is Source");
        }
        
    }

}
