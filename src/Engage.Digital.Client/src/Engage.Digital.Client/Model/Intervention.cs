/* 
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Engage.Digital.Client.OpenAPIDateConverter;

namespace Engage.Digital.Model
{
    /// <summary>
    /// Intervention
    /// </summary>
    [DataContract]
    public partial class Intervention :  IEquatable<Intervention>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Intervention" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Intervention() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Intervention" /> class.
        /// </summary>
        /// <param name="categoryIds">categoryIds.</param>
        /// <param name="closed">closed.</param>
        /// <param name="closedAt">closedAt.</param>
        /// <param name="commentsCount">commentsCount.</param>
        /// <param name="contentId">contentId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="deferredAt">deferredAt.</param>
        /// <param name="firstUserReplyId">firstUserReplyId.</param>
        /// <param name="firstUserReplyIn">firstUserReplyIn.</param>
        /// <param name="firstUserReplyInBh">firstUserReplyInBh.</param>
        /// <param name="id">id (required).</param>
        /// <param name="identityId">identityId.</param>
        /// <param name="lastUserReplyIn">lastUserReplyIn.</param>
        /// <param name="lastUserReplyInBh">lastUserReplyInBh.</param>
        /// <param name="sourceId">sourceId.</param>
        /// <param name="status">status.</param>
        /// <param name="threadId">threadId.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userId">userId.</param>
        /// <param name="userRepliesCount">userRepliesCount.</param>
        /// <param name="userReplyInAverage">userReplyInAverage.</param>
        /// <param name="userReplyInAverageBh">userReplyInAverageBh.</param>
        /// <param name="userReplyInAverageCount">userReplyInAverageCount.</param>
        public Intervention(List<string> categoryIds = default(List<string>), bool closed = default(bool), DateTime closedAt = default(DateTime), int commentsCount = default(int), string contentId = default(string), DateTime createdAt = default(DateTime), Object customFields = default(Object), DateTime deferredAt = default(DateTime), string firstUserReplyId = default(string), int firstUserReplyIn = default(int), int firstUserReplyInBh = default(int), string id = default(string), string identityId = default(string), int lastUserReplyIn = default(int), int lastUserReplyInBh = default(int), string sourceId = default(string), string status = default(string), string threadId = default(string), DateTime updatedAt = default(DateTime), string userId = default(string), int userRepliesCount = default(int), int userReplyInAverage = default(int), int userReplyInAverageBh = default(int), int userReplyInAverageCount = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Intervention and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            this.CategoryIds = categoryIds;
            this.Closed = closed;
            this.ClosedAt = closedAt;
            this.CommentsCount = commentsCount;
            this.ContentId = contentId;
            this.CreatedAt = createdAt;
            this.CustomFields = customFields;
            this.DeferredAt = deferredAt;
            this.FirstUserReplyId = firstUserReplyId;
            this.FirstUserReplyIn = firstUserReplyIn;
            this.FirstUserReplyInBh = firstUserReplyInBh;
            this.IdentityId = identityId;
            this.LastUserReplyIn = lastUserReplyIn;
            this.LastUserReplyInBh = lastUserReplyInBh;
            this.SourceId = sourceId;
            this.Status = status;
            this.ThreadId = threadId;
            this.UpdatedAt = updatedAt;
            this.UserId = userId;
            this.UserRepliesCount = userRepliesCount;
            this.UserReplyInAverage = userReplyInAverage;
            this.UserReplyInAverageBh = userReplyInAverageBh;
            this.UserReplyInAverageCount = userReplyInAverageCount;
        }
        
        /// <summary>
        /// Gets or Sets CategoryIds
        /// </summary>
        [DataMember(Name="category_ids", EmitDefaultValue=false)]
        public List<string> CategoryIds { get; set; }

        /// <summary>
        /// Gets or Sets Closed
        /// </summary>
        [DataMember(Name="closed", EmitDefaultValue=false)]
        public bool Closed { get; set; }

        /// <summary>
        /// Gets or Sets ClosedAt
        /// </summary>
        [DataMember(Name="closed_at", EmitDefaultValue=false)]
        public DateTime ClosedAt { get; set; }

        /// <summary>
        /// Gets or Sets CommentsCount
        /// </summary>
        [DataMember(Name="comments_count", EmitDefaultValue=false)]
        public int CommentsCount { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="content_id", EmitDefaultValue=false)]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Object CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets DeferredAt
        /// </summary>
        [DataMember(Name="deferred_at", EmitDefaultValue=false)]
        public DateTime DeferredAt { get; set; }

        /// <summary>
        /// Gets or Sets FirstUserReplyId
        /// </summary>
        [DataMember(Name="first_user_reply_id", EmitDefaultValue=false)]
        public string FirstUserReplyId { get; set; }

        /// <summary>
        /// Gets or Sets FirstUserReplyIn
        /// </summary>
        [DataMember(Name="first_user_reply_in", EmitDefaultValue=false)]
        public int FirstUserReplyIn { get; set; }

        /// <summary>
        /// Gets or Sets FirstUserReplyInBh
        /// </summary>
        [DataMember(Name="first_user_reply_in_bh", EmitDefaultValue=false)]
        public int FirstUserReplyInBh { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdentityId
        /// </summary>
        [DataMember(Name="identity_id", EmitDefaultValue=false)]
        public string IdentityId { get; set; }

        /// <summary>
        /// Gets or Sets LastUserReplyIn
        /// </summary>
        [DataMember(Name="last_user_reply_in", EmitDefaultValue=false)]
        public int LastUserReplyIn { get; set; }

        /// <summary>
        /// Gets or Sets LastUserReplyInBh
        /// </summary>
        [DataMember(Name="last_user_reply_in_bh", EmitDefaultValue=false)]
        public int LastUserReplyInBh { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserRepliesCount
        /// </summary>
        [DataMember(Name="user_replies_count", EmitDefaultValue=false)]
        public int UserRepliesCount { get; set; }

        /// <summary>
        /// Gets or Sets UserReplyInAverage
        /// </summary>
        [DataMember(Name="user_reply_in_average", EmitDefaultValue=false)]
        public int UserReplyInAverage { get; set; }

        /// <summary>
        /// Gets or Sets UserReplyInAverageBh
        /// </summary>
        [DataMember(Name="user_reply_in_average_bh", EmitDefaultValue=false)]
        public int UserReplyInAverageBh { get; set; }

        /// <summary>
        /// Gets or Sets UserReplyInAverageCount
        /// </summary>
        [DataMember(Name="user_reply_in_average_count", EmitDefaultValue=false)]
        public int UserReplyInAverageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Intervention {\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  DeferredAt: ").Append(DeferredAt).Append("\n");
            sb.Append("  FirstUserReplyId: ").Append(FirstUserReplyId).Append("\n");
            sb.Append("  FirstUserReplyIn: ").Append(FirstUserReplyIn).Append("\n");
            sb.Append("  FirstUserReplyInBh: ").Append(FirstUserReplyInBh).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdentityId: ").Append(IdentityId).Append("\n");
            sb.Append("  LastUserReplyIn: ").Append(LastUserReplyIn).Append("\n");
            sb.Append("  LastUserReplyInBh: ").Append(LastUserReplyInBh).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserRepliesCount: ").Append(UserRepliesCount).Append("\n");
            sb.Append("  UserReplyInAverage: ").Append(UserReplyInAverage).Append("\n");
            sb.Append("  UserReplyInAverageBh: ").Append(UserReplyInAverageBh).Append("\n");
            sb.Append("  UserReplyInAverageCount: ").Append(UserReplyInAverageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Intervention);
        }

        /// <summary>
        /// Returns true if Intervention instances are equal
        /// </summary>
        /// <param name="input">Instance of Intervention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Intervention input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryIds == input.CategoryIds ||
                    this.CategoryIds != null &&
                    input.CategoryIds != null &&
                    this.CategoryIds.SequenceEqual(input.CategoryIds)
                ) && 
                (
                    this.Closed == input.Closed ||
                    this.Closed.Equals(input.Closed)
                ) && 
                (
                    this.ClosedAt == input.ClosedAt ||
                    (this.ClosedAt != null &&
                    this.ClosedAt.Equals(input.ClosedAt))
                ) && 
                (
                    this.CommentsCount == input.CommentsCount ||
                    this.CommentsCount.Equals(input.CommentsCount)
                ) && 
                (
                    this.ContentId == input.ContentId ||
                    (this.ContentId != null &&
                    this.ContentId.Equals(input.ContentId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    (this.CustomFields != null &&
                    this.CustomFields.Equals(input.CustomFields))
                ) && 
                (
                    this.DeferredAt == input.DeferredAt ||
                    (this.DeferredAt != null &&
                    this.DeferredAt.Equals(input.DeferredAt))
                ) && 
                (
                    this.FirstUserReplyId == input.FirstUserReplyId ||
                    (this.FirstUserReplyId != null &&
                    this.FirstUserReplyId.Equals(input.FirstUserReplyId))
                ) && 
                (
                    this.FirstUserReplyIn == input.FirstUserReplyIn ||
                    this.FirstUserReplyIn.Equals(input.FirstUserReplyIn)
                ) && 
                (
                    this.FirstUserReplyInBh == input.FirstUserReplyInBh ||
                    this.FirstUserReplyInBh.Equals(input.FirstUserReplyInBh)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdentityId == input.IdentityId ||
                    (this.IdentityId != null &&
                    this.IdentityId.Equals(input.IdentityId))
                ) && 
                (
                    this.LastUserReplyIn == input.LastUserReplyIn ||
                    this.LastUserReplyIn.Equals(input.LastUserReplyIn)
                ) && 
                (
                    this.LastUserReplyInBh == input.LastUserReplyInBh ||
                    this.LastUserReplyInBh.Equals(input.LastUserReplyInBh)
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ThreadId == input.ThreadId ||
                    (this.ThreadId != null &&
                    this.ThreadId.Equals(input.ThreadId))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserRepliesCount == input.UserRepliesCount ||
                    this.UserRepliesCount.Equals(input.UserRepliesCount)
                ) && 
                (
                    this.UserReplyInAverage == input.UserReplyInAverage ||
                    this.UserReplyInAverage.Equals(input.UserReplyInAverage)
                ) && 
                (
                    this.UserReplyInAverageBh == input.UserReplyInAverageBh ||
                    this.UserReplyInAverageBh.Equals(input.UserReplyInAverageBh)
                ) && 
                (
                    this.UserReplyInAverageCount == input.UserReplyInAverageCount ||
                    this.UserReplyInAverageCount.Equals(input.UserReplyInAverageCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryIds != null)
                    hashCode = hashCode * 59 + this.CategoryIds.GetHashCode();
                hashCode = hashCode * 59 + this.Closed.GetHashCode();
                if (this.ClosedAt != null)
                    hashCode = hashCode * 59 + this.ClosedAt.GetHashCode();
                hashCode = hashCode * 59 + this.CommentsCount.GetHashCode();
                if (this.ContentId != null)
                    hashCode = hashCode * 59 + this.ContentId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.DeferredAt != null)
                    hashCode = hashCode * 59 + this.DeferredAt.GetHashCode();
                if (this.FirstUserReplyId != null)
                    hashCode = hashCode * 59 + this.FirstUserReplyId.GetHashCode();
                hashCode = hashCode * 59 + this.FirstUserReplyIn.GetHashCode();
                hashCode = hashCode * 59 + this.FirstUserReplyInBh.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdentityId != null)
                    hashCode = hashCode * 59 + this.IdentityId.GetHashCode();
                hashCode = hashCode * 59 + this.LastUserReplyIn.GetHashCode();
                hashCode = hashCode * 59 + this.LastUserReplyInBh.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ThreadId != null)
                    hashCode = hashCode * 59 + this.ThreadId.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.UserRepliesCount.GetHashCode();
                hashCode = hashCode * 59 + this.UserReplyInAverage.GetHashCode();
                hashCode = hashCode * 59 + this.UserReplyInAverageBh.GetHashCode();
                hashCode = hashCode * 59 + this.UserReplyInAverageCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
